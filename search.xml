<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>idea_项目设置</title>
      <link href="/2022/09/05/idea-prosettings/"/>
      <url>/2022/09/05/idea-prosettings/</url>
      
        <content type="html"><![CDATA[<p>项目设置结构：<a href="https://blog.csdn.net/weixin_43611145/article/details/102625173">https://blog.csdn.net/weixin_43611145/article/details/102625173</a></p><p>​                            <a href="https://m.jb51.net/article/237245.htm">https://m.jb51.net/article/237245.htm</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringDataJPA</title>
      <link href="/2022/08/16/springdatajpa/"/>
      <url>/2022/08/16/springdatajpa/</url>
      
        <content type="html"><![CDATA[<p>jdbc与jpa</p><p>hibernate、mybatis</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>debug</title>
      <link href="/2022/08/15/debug/"/>
      <url>/2022/08/15/debug/</url>
      
        <content type="html"><![CDATA[<h4 id="IDEA如何进行debug调试"><a href="#IDEA如何进行debug调试" class="headerlink" title="IDEA如何进行debug调试"></a>IDEA如何进行debug调试</h4><p>🍃第一步，设断点，打开debug<br>        设断点是什么意思，其实就是暂定，等待的意思。当程序执行到用户设置的断点时，程序暂定执行，等待下一步命令的执行。在IDEA中只需在代码注释行旁边单击鼠标左键即可。</p><img src="/2022/08/15/debug/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21qaDE2NjcwMDIwMTM=,size_16,color_FFFFFF,t_70.png" class=""><p>在IDEA中，我们不光可以设置断点，还可以为该断点添加条件，比如在如下实例中，设置条件为i = 5。此时断点样式右下角会有一个疑问符号，表示该断点是被赋予条件的。意思是程序直接执行到i = 5 时才暂定执行，等待下一步命令执行。</p><img src="/2022/08/15/debug/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21qaDE2NjcwMDIwMTM=,size_16,color_FFFFFF,t_70-16605533458203.png" class=""><img src="/2022/08/15/debug/20210313160744697.png" class=""><p> 给断点添加条件有快捷键（shift + ctrl + F8)。在使用快捷键时，有一个小细节，你的鼠标一定要放在断点红色代码这一行中，否则快捷键按的就不是给断点添加条件，而是查看所有断点，如下，因为他们的快捷键是一样的，区别在于鼠标的光标的位置，在断点处所在行就是给断点添加条件，在非断点处所在行就是查看所有断点。</p><pre><code>    当你已经把断点设置好了，便可以打开debug调试了。打开的方式有很多，在IDEA中，我们可以在最上面的工具栏中选择Run中的Debug打开；也可以选择右上角的Debug图标打开；还可以在代码里面单击鼠标右键选择Debug调试。</code></pre><p>🌱方式一</p><img src="/2022/08/15/debug/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21qaDE2NjcwMDIwMTM=,size_16,color_FFFFFF,t_70-16605536078238.png" class="" title="å¨è¿éæå¥å¾çæè¿°"><p>🌱方式二</p><img src="/2022/08/15/debug/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21qaDE2NjcwMDIwMTM=,size_16,color_FFFFFF,t_70-166055361283111.png" class="" title="å¨è¿éæå¥å¾çæè¿°"><p>🌱方式三</p><img src="/2022/08/15/debug/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21qaDE2NjcwMDIwMTM=,size_16,color_FFFFFF,t_70-166055362801014.png" class=""><p>🍃第二步，使用Debug调试的功能键<br>我们先来了解Debug栏中位于左侧的主要的5个功能键。</p><img src="/2022/08/15/debug/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21qaDE2NjcwMDIwMTM=,size_16,color_FFFFFF,t_70-166055365253417.png" class=""><p>第二个，一个竖杠加向右的三角形的按钮，功能是跳到下一次断点执行，两个断点之间的代码都被加载执行过了。但是当一个断点在一个for循环中，如果循环有n（n&gt;=1）次，for循环外有一个断点，此时该功能是跳过一次for循环，并不是跳过所有循环而直接到下一个断点，那么如果先要跳过所有循环可以将断点暂时不启用，也就是将enabled去掉，因为enable是启用断点的意思。</p><img src="/2022/08/15/debug/7ccaad02a56547b397c77e4e8787e096.png" class=""><p>第四个，两个重叠的红色圆圈的按钮，功能是查看所有的断点。快捷键是（shift + ctrl + F8），至于它的用法在上面将给断点添加条件时已讲述。</p><p>第五个，一个红色的圆圈中有一个灰色的斜杠的按钮，功能是隐藏所有的Debug断点。用途就是，当你在Debug调试时，你觉得此时已经没有问题了，这时可以暂时隐藏所有Debug断点，无障碍运行一次，如果有问题还要取消隐藏，不至于重新打开Debug。</p><img src="/2022/08/15/debug/debug.png" class=""><p>第一个按钮，功能是将你的光标移动到当前代码所执行处，不管此刻你的鼠标光标的位置在哪里。</p><p>第二个按钮，功能是单步跳入。Debug调试是一行一行的执行下去，但是如果遇到调用方法时，是不会进入方法里面的。</p><p>第三个和第四个的功能都是单步进入的执行，但唯一的区别是，蓝色向下箭头的按钮遇到方法时，只有当经过的方法时用户自定义的方法才会跳进去，如果是系统自定的方法则不会跳进去。而红色向下箭头的按钮，不管是系统自定义的方法还是用户自定义的方法都会跳入到方法里面去执行。</p><p>第五个按钮，功能是单步跳出。可以跳出进入的方法。</p><p>第六个按钮，功能是将当前执行的位置直接执行到用户指定鼠标光标的位置。</p><p>接下来就是最后一个功能区，如下图片，详细解释。</p><img src="/2022/08/15/debug/202103131719500.png" class="">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tomcat</title>
      <link href="/2022/08/08/tomcat/"/>
      <url>/2022/08/08/tomcat/</url>
      
        <content type="html"><![CDATA[<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><img src="/2022/08/08/tomcat/QQ%E6%88%AA%E5%9B%BE20220808125505.png" class=""><ul><li>bin目录主要是用来存放tomcat的命令，主要有两大类，一类是以.sh结尾的(linux命令)，另一类是以.bat结尾的(windows命令)。</li></ul><p>​        很多环境变量的设置都在此处，例如可以设置JDK路径、tomcat路径</p><p>​        startup 用来启动tomcat</p><p>​        shutdown 用来关闭tomcat</p><p>​        修改catalina可以设置tomcat的内存</p><ul><li><p>conf目录主要是用来存放tomcat的一些配置文件。</p><p>server.xml可以设置端口号、设置域名或IP、默认加载的项目、请求编码</p><p>web.xml可以设置tomcat支持的文件类型</p><p>context.xml可以用来配置数据源之类的</p><p>tomcat-users.xml用来配置管理tomcat的用户与权限</p><p>在Catalina目录下可以设置默认加载的项目</p></li><li><p>lib目录主要用来存放tomcat运行需要加载的jar包。</p></li></ul><p>​        例如，像连接数据库的jdbc的包我们可以加入到lib目录中来。</p><p>​        如，jsp-api,servlet-api；</p><ul><li> logs目录用来存放tomcat在运行过程中产生的日志文件，非常重要的是在控制台输出的日志。(清空不会对tomcat运行带来影响)</li></ul><p>​        在windows环境中，控制台的输出日志在catalina.xxxx-xx-xx.log文件中</p><p>​        在linux环境中，控制台的输出日志在catalina.out文件中</p><ul><li><p>temp目录用户存放tomcat在运行过程中产生的临时文件。(清空不会对tomcat运行带来影响)</p></li><li><p>Tomcat的webapps目录：</p></li></ul><p>​        webapps目录用来存放应用程序，当tomcat启动时会去加载webapps目录下的应用程序。可以以文件夹、war包、jar包的形式发布        应用。当然，你也可以把应用程序放置在磁盘的任意位置，在配置文件中映射好就行。</p><ul><li>Tomcat的work目录:</li></ul><p>​        work目录用来存放tomcat在运行时的编译后文件，例如JSP编译后的文件。</p><p>​        清空work目录，然后重启tomcat，可以达到清除缓存的作用</p><h3 id="清除tomcat缓存"><a href="#清除tomcat缓存" class="headerlink" title="清除tomcat缓存"></a>清除tomcat缓存</h3><p>1.关闭tomcat服务；</p><p>2.清除temp下的临时文件</p><p>3.清除work下相关内容</p><p>4.删除某个网站的缓存:进入work目录下有个Catalina目录,然后找到相应的文件夹删除那个文件夹即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buildingdev</title>
      <link href="/2022/07/28/buildingdev/"/>
      <url>/2022/07/28/buildingdev/</url>
      
        <content type="html"><![CDATA[<h3 id="一、部署vue-js"><a href="#一、部署vue-js" class="headerlink" title="一、部署vue.js"></a>一、部署vue.js</h3><h4 id="1-1-node-js的安装"><a href="#1-1-node-js的安装" class="headerlink" title="1.1.node.js的安装"></a>1.1.node.js的安装</h4><p>官网下载地址<a href="https://nodejs.org/en/download/">Download | Node.js</a></p><img src="/2022/07/28/buildingdev/20220613150255111.jpg" class="" title="img"><p>选择适合自己的版本，推荐LTS，长久稳定版本。 我这里选择的是Windows Installer(.msi) 64-bit</p><p>下载好后，双击下载的安装包。</p><img src="/2022/07/28/buildingdev/20220613150255112.png" class="" title="img"><p>点next</p><img src="/2022/07/28/buildingdev/20220613150255113.png" class="" title="img"><p>勾选I accept…………，点next </p><img src="/2022/07/28/buildingdev/20220613150255114.png" class="" title="img"><p>这里建议更改为自己想要的的安装目录，然后点next（可以自己先建好安装目录，我这里是提前建好的一个目录：E:\Java\nodejs）</p><img src="/2022/07/28/buildingdev/20220613150255115.png" class="" title="img"><p>这里有五个选项，有时间可以看一下，就是安装的时候会安装一些组件和npm，同时会添加环境变量，右侧有说明。我们直接点next</p><img src="/2022/07/28/buildingdev/20220613150255116.png" class="" title="img"><p>这里不用勾选，直接点next</p><img src="/2022/07/28/buildingdev/20220613150255117.png" class="" title="img"><p>install</p><img src="/2022/07/28/buildingdev/20220613150255118.png" class="" title="img"><p> finish</p><p>安装完成后，检查一下是否安装成功。</p><p>打开cmd，输入如下指令。 </p><pre class="line-numbers language-none"><code class="language-none">node -&#96;&#96;vnpm -&#96;&#96;v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2022/07/28/buildingdev/20220613150256119.png" class="" title="img"><p>输出了版本号就说明安装成功了。</p><p>安装后的完整目录：</p><img src="/2022/07/28/buildingdev/20220613150256120.png" class="" title="img"><h2 id="二、创建全局安装目录和缓存日志目录"><a href="#二、创建全局安装目录和缓存日志目录" class="headerlink" title="二、创建全局安装目录和缓存日志目录"></a>二、创建全局安装目录和缓存日志目录</h2><p> 在我们的安装目录下，创建名为node_cache和node_global的两个文件夹。</p><img src="/2022/07/28/buildingdev/20220613150256121.png" class="" title="img"><p>打开Dos窗口，执行如下命令，将npm的全局模块目录和缓存目录配置到我们刚才创建的那两个目录。</p><p>npm config set prefix “你的安装目录\node_global”</p><p>npm config set cache “你的安装目录\node_cache”</p><img src="/2022/07/28/buildingdev/20220613150256122.png" class="" title="img"><p>为了以后下载包快速，修改源为淘宝镜像。（这里修改了，我们就不需要安装cnpm了，因为cnpm就是<strong>Node.js淘宝镜像加速器，</strong>这里配置了就不需要安装了）</p><pre class="line-numbers language-none"><code class="language-none">npm config set registry https:&#96;&#96;&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看npm配置修改是否成功</p><pre class="line-numbers language-none"><code class="language-none">npm config list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/07/28/buildingdev/20220613150256123.png" class="" title="img"><p>同时我们会发现多了个文件：C:\Users\用户名\下的.npmrc文件，可以理解为一个记录当前用户修改信息的配置文件。如果你把这个文件删了，那你刚刚修改的那些参数全没有了，回归默认配置。</p><img src="/2022/07/28/buildingdev/20220613150256124.png" class="" title="img"><h2 id="三、配置环境变量"><a href="#三、配置环境变量" class="headerlink" title="三、配置环境变量"></a>三、配置环境变量</h2><p>在安装过程中，自动配置了两个环境变量一个是<strong>环境变量—用户变量—Path</strong>里面的<strong>C:\Users\你的用户名\AppData\Roaming\npm</strong>另一个是<strong>环境变量—系统变量—Path</strong>里面的<strong>软件安装目录</strong>，我们需要增加和修改一下。</p><h3 id="1-环境变量—用户变量—选中Path—点编辑"><a href="#1-环境变量—用户变量—选中Path—点编辑" class="headerlink" title="1. 环境变量—用户变量—选中Path—点编辑"></a>1. 环境变量—用户变量—选中Path—点编辑</h3><img src="/2022/07/28/buildingdev/20220613150256125.png" class="" title="img"><p> 将 <strong>C:\Users\你的用户名\AppData\Roaming\npm</strong> 修改为 <strong>你的安装目录\node_global</strong></p><img src="/2022/07/28/buildingdev/20220613150256126.png" class="" title="img"><img src="/2022/07/28/buildingdev/20220613150257127.png" class="" title="img"><h3 id="2-环境变量—系统变量—新建"><a href="#2-环境变量—系统变量—新建" class="headerlink" title="2. 环境变量—系统变量—新建"></a>2. 环境变量—系统变量—新建</h3><p>变量名：NODE_PATH</p><p>变量值：你的安装目录\node_global\node_modules</p><p>注：这里的node_modules目录是还没有的，但是我们等会把模块安装到全局目录下就会自动生成这个文件夹。</p><img src="/2022/07/28/buildingdev/20220613150257128.png" class="" title="img"><p>记得在系统变量—Path添加上%NODE_PATH% </p><img src="/2022/07/28/buildingdev/20220613150257129.jpg" class="" title="img"><h2 id="三、安装vue"><a href="#三、安装vue" class="headerlink" title="三、安装vue"></a>三、安装vue</h2><h3 id="1-安装vue-js"><a href="#1-安装vue-js" class="headerlink" title="1. 安装vue.js"></a>1. 安装vue.js</h3><pre class="line-numbers language-none"><code class="language-none">npm install vue -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中-g是全局安装，指安装到global全局目录去，如果不加-g，模块就会安装到当前路径下的node_modules文件夹下，没有目录则自动创建。</p><p>如果出现了这个问题，是因为当前用户没有这个权限。</p><img src="/2022/07/28/buildingdev/20220613150257130.png" class="" title="img"><p>网上有些方法是删除C:\Users\用户名\下的.npmrc文件，万万不可这样，因为那个文件删除了，我们前面修改的全局模块目录和缓存目录配置就没了！！！到时候vue包就下载到C:\Users\你的用户名\AppData\Roaming\npm去了，也就是默认的地方去了，那我们前面修改就没意义了。</p><p>正确的打开方式是，用管理员身份运行呗！</p><p>Win + s 搜索 “命令提示符”，右键以管理员身份运行。</p><img src="/2022/07/28/buildingdev/20220613150257131.jpg" class="" title="img"><pre class="line-numbers language-none"><code class="language-none">npm install vue -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/07/28/buildingdev/20220613150257132.png" class="" title="img"><h3 id="2-安装webpack模板"><a href="#2-安装webpack模板" class="headerlink" title="2. 安装webpack模板"></a>2. 安装webpack模板</h3><pre class="line-numbers language-none"><code class="language-none">npm install webpack -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/07/28/buildingdev/20220613150257133.png" class="" title="img"><p>此外，在webpack 4x以上，webpack将命令相关的内容都放到了webpack-cli，所以还需要安装webpack-cli</p><pre class="line-numbers language-none"><code class="language-none">npm install webpack-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/07/28/buildingdev/20220613150257134.png" class="" title="img"><p>输入 webpack -v，能输出版本号就说明都安装好了。</p><h3 id="3-安装脚手架vue-cli"><a href="#3-安装脚手架vue-cli" class="headerlink" title="3. 安装脚手架vue-cli"></a>3. 安装脚手架vue-cli</h3><pre class="line-numbers language-none"><code class="language-none">npm install vue-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/07/28/buildingdev/20220613150257135.png" class="" title="img"><p>输入vue –version，能输出版本号就说明安装好了。</p><h3 id="4-安装vue-router"><a href="#4-安装vue-router" class="headerlink" title="4. 安装vue-router"></a>4. 安装vue-router</h3><pre class="line-numbers language-none"><code class="language-none">npm install vue-router -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/07/28/buildingdev/20220613150258136.png" class="" title="img"><p>都弄好了我们打开我们自定义的全局模块目录下的node_modules文件夹，会发现安装的模块都统一在这里。</p><img src="/2022/07/28/buildingdev/20220613150258137.png" class="" title="img"><h2 id="四、我的第一个的-vue-cli应用程序"><a href="#四、我的第一个的-vue-cli应用程序" class="headerlink" title="四、我的第一个的 vue-cli应用程序"></a>四、我的第一个的 vue-cli应用程序</h2><p>\1. 创建项目（最好在cd到D盘、E盘的某个位置，即项目的路径，否则项目会新建在C:\Users\用户名\，也可以直接在想要的项目路径下输入cmd）可能会出现权限问题，所以我们还是以管理员运行cmd窗口。</p><img src="/2022/07/28/buildingdev/20220613150258138.png" class="" title="img"><p>\2. 创建一个基于webpack模板的vue应用程序</p><pre class="line-numbers language-none"><code class="language-none">vue init webpack 项目名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2022/07/28/buildingdev/20220613150258139.png" class="" title="img"><p>根据自己的需求来操作。</p><ul><li>项目名是？回车</li><li>项目描述？回车</li><li>作者？回车</li><li>是否安装编译器 回车</li><li>是否安装vue-router y 回车</li><li>是否使用ESLint做代码检查 n 回车</li><li>是否安装单元测试工具 n 回车</li><li>单元测试相关 n 回车</li><li>创建完成后直接初始化 n 回车</li></ul><img src="/2022/07/28/buildingdev/20220613150258140.png" class="" title="img"><p>因为没有自动初始化，我们按照代码提示手动初始化</p><pre class="line-numbers language-none"><code class="language-none">cd&#96; &#96;myvuenpm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/2022/07/28/buildingdev/20220613150258141.png" class="" title="img"><p> 访问网址：成功！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mybatis2</title>
      <link href="/2022/06/28/mybatis2/"/>
      <url>/2022/06/28/mybatis2/</url>
      
        <content type="html"><![CDATA[<p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>使用动态 SQL 最常见情景是根据条件包含 where 子句的一部分。比如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;select id&#x3D;&quot;findActiveBlogWithTitleLike&quot;     resultType&#x3D;&quot;Blog&quot;&gt;  SELECT * FROM BLOG  WHERE state &#x3D; ‘ACTIVE’  &lt;if test&#x3D;&quot;title !&#x3D; null&quot;&gt;    AND title like #&#123;title&#125;  &lt;&#x2F;if&gt;&lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这条语句提供了可选的查找文本功能。如果不传入 “title”，那么所有处于 “ACTIVE” 状态的 BLOG 都会返回；如果传入了 “title” 参数，那么就会对 “title” 一列进行模糊查找并返回对应的 BLOG 结果（细心的读者可能会发现，“title” 的参数值需要包含查找掩码或通配符字符）。</p><p>如果希望通过 “title” 和 “author” 两个参数进行可选搜索该怎么办呢？首先，我想先将语句名称修改成更名副其实的名称；接下来，只需要加入另一个条件即可。</p><pre class="line-numbers language-none"><code class="language-none">&lt;select id&#x3D;&quot;findActiveBlogLike&quot;     resultType&#x3D;&quot;Blog&quot;&gt;  SELECT * FROM BLOG WHERE state &#x3D; ‘ACTIVE’  &lt;if test&#x3D;&quot;title !&#x3D; null&quot;&gt;    AND title like #&#123;title&#125;  &lt;&#x2F;if&gt;  &lt;if test&#x3D;&quot;author !&#x3D; null and author.name !&#x3D; null&quot;&gt;    AND author_name like #&#123;author.name&#125;  &lt;&#x2F;if&gt;&lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h3><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><p>还是上面的例子，但是策略变为：传入了 “title” 就按 “title” 查找，传入了 “author” 就按 “author” 查找的情形。若两者都没有传入，就返回标记为 featured 的 BLOG（这可能是管理员认为，与其返回大量的无意义随机 Blog，还不如返回一些由管理员精选的 Blog）。</p><pre class="line-numbers language-none"><code class="language-none">&lt;select id&#x3D;&quot;findActiveBlogLike&quot;     resultType&#x3D;&quot;Blog&quot;&gt;  SELECT * FROM BLOG WHERE state &#x3D; ‘ACTIVE’  &lt;choose&gt;    &lt;when test&#x3D;&quot;title !&#x3D; null&quot;&gt;      AND title like #&#123;title&#125;    &lt;&#x2F;when&gt;    &lt;when test&#x3D;&quot;author !&#x3D; null and author.name !&#x3D; null&quot;&gt;      AND author_name like #&#123;author.name&#125;    &lt;&#x2F;when&gt;    &lt;otherwise&gt;      AND featured &#x3D; 1    &lt;&#x2F;otherwise&gt;  &lt;&#x2F;choose&gt;&lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="trim、where、set"><a href="#trim、where、set" class="headerlink" title="trim、where、set"></a>trim、where、set</h3><p>前面几个例子已经方便地解决了一个臭名昭著的动态 SQL 问题。现在回到之前的 “if” 示例，这次我们将 “state = ‘ACTIVE’” 设置成动态条件，看看会发生什么。</p><pre class="line-numbers language-none"><code class="language-none">&lt;select id&#x3D;&quot;findActiveBlogLike&quot;     resultType&#x3D;&quot;Blog&quot;&gt;  SELECT * FROM BLOG  WHERE  &lt;if test&#x3D;&quot;state !&#x3D; null&quot;&gt;    state &#x3D; #&#123;state&#125;  &lt;&#x2F;if&gt;  &lt;if test&#x3D;&quot;title !&#x3D; null&quot;&gt;    AND title like #&#123;title&#125;  &lt;&#x2F;if&gt;  &lt;if test&#x3D;&quot;author !&#x3D; null and author.name !&#x3D; null&quot;&gt;    AND author_name like #&#123;author.name&#125;  &lt;&#x2F;if&gt;&lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有匹配的条件会怎么样？最终这条 SQL 会变成这样：</p><pre class="line-numbers language-none"><code class="language-none">SELECT * FROM BLOGWHERE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这会导致查询失败。如果匹配的只是第二个条件又会怎样？这条 SQL 会是这样:</p><pre class="line-numbers language-none"><code class="language-none">SELECT * FROM BLOGWHEREAND title like ‘someTitle’<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个查询也会失败。这个问题不能简单地用条件元素来解决。这个问题是如此的难以解决，以至于解决过的人不会再想碰到这种问题。</p><p>MyBatis 有一个简单且适合大多数场景的解决办法。而在其他场景中，可以对其进行自定义以符合需求。而这，只需要一处简单的改动：</p><pre class="line-numbers language-none"><code class="language-none">&lt;select id&#x3D;&quot;findActiveBlogLike&quot;     resultType&#x3D;&quot;Blog&quot;&gt;  SELECT * FROM BLOG  &lt;where&gt;    &lt;if test&#x3D;&quot;state !&#x3D; null&quot;&gt;         state &#x3D; #&#123;state&#125;    &lt;&#x2F;if&gt;    &lt;if test&#x3D;&quot;title !&#x3D; null&quot;&gt;        AND title like #&#123;title&#125;    &lt;&#x2F;if&gt;    &lt;if test&#x3D;&quot;author !&#x3D; null and author.name !&#x3D; null&quot;&gt;        AND author_name like #&#123;author.name&#125;    &lt;&#x2F;if&gt;  &lt;&#x2F;where&gt;&lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p><p>如果 <em>where</em> 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能。比如，和 <em>where</em> 元素等价的自定义 trim 元素为：</p><pre class="line-numbers language-none"><code class="language-none">&lt;trim prefix&#x3D;&quot;WHERE&quot; prefixOverrides&#x3D;&quot;AND |OR &quot;&gt;  ...&lt;&#x2F;trim&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>prefixOverrides</em> 属性会忽略通过管道符分隔的文本序列（注意此例中的空格是必要的）。上述例子会移除所有 <em>prefixOverrides</em> 属性中指定的内容，并且插入 <em>prefix</em> 属性中指定的内容。</p><p>用于动态更新语句的类似解决方案叫做 <em>set</em>。<em>set</em> 元素可以用于动态包含需要更新的列，忽略其它不更新的列。比如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;update id&#x3D;&quot;updateAuthorIfNecessary&quot;&gt;  update Author    &lt;set&gt;      &lt;if test&#x3D;&quot;username !&#x3D; null&quot;&gt;username&#x3D;#&#123;username&#125;,&lt;&#x2F;if&gt;      &lt;if test&#x3D;&quot;password !&#x3D; null&quot;&gt;password&#x3D;#&#123;password&#125;,&lt;&#x2F;if&gt;      &lt;if test&#x3D;&quot;email !&#x3D; null&quot;&gt;email&#x3D;#&#123;email&#125;,&lt;&#x2F;if&gt;      &lt;if test&#x3D;&quot;bio !&#x3D; null&quot;&gt;bio&#x3D;#&#123;bio&#125;&lt;&#x2F;if&gt;    &lt;&#x2F;set&gt;  where id&#x3D;#&#123;id&#125;&lt;&#x2F;update&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子中，<em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</p><p>或者，你可以通过使用<em>trim</em>元素来达到同样的效果：</p><pre class="line-numbers language-none"><code class="language-none">&lt;trim prefix&#x3D;&quot;SET&quot; suffixOverrides&#x3D;&quot;,&quot;&gt;  ...&lt;&#x2F;trim&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意，我们覆盖了后缀值设置，并且自定义了前缀值。</p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）。比如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;select id&#x3D;&quot;selectPostIn&quot; resultType&#x3D;&quot;domain.blog.Post&quot;&gt;  SELECT *  FROM POST P  &lt;where&gt;    &lt;foreach item&#x3D;&quot;item&quot; index&#x3D;&quot;index&quot; collection&#x3D;&quot;list&quot;        open&#x3D;&quot;ID in (&quot; separator&#x3D;&quot;,&quot; close&#x3D;&quot;)&quot; nullable&#x3D;&quot;true&quot;&gt;          #&#123;item&#125;    &lt;&#x2F;foreach&gt;  &lt;&#x2F;where&gt;&lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符，看它多智能！</p><p><strong>提示</strong> 你可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象作为集合参数传递给 <em>foreach</em>。当使用可迭代对象或者数组时，index 是当前迭代的序号，item 的值是本次迭代获取到的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。</p><p>至此，我们已经完成了与 XML 配置及映射文件相关的讨论。下一章将详细探讨 Java API，以便你能充分利用已经创建的映射配置。</p><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>要在带注解的映射器接口类中使用动态 SQL，可以使用 <em>script</em> 元素。比如:</p><pre class="line-numbers language-none"><code class="language-none">@Update(&#123;&quot;&lt;script&gt;&quot;,  &quot;update Author&quot;,  &quot;  &lt;set&gt;&quot;,  &quot;    &lt;if test&#x3D;&#39;username !&#x3D; null&#39;&gt;username&#x3D;#&#123;username&#125;,&lt;&#x2F;if&gt;&quot;,  &quot;    &lt;if test&#x3D;&#39;password !&#x3D; null&#39;&gt;password&#x3D;#&#123;password&#125;,&lt;&#x2F;if&gt;&quot;,  &quot;    &lt;if test&#x3D;&#39;email !&#x3D; null&#39;&gt;email&#x3D;#&#123;email&#125;,&lt;&#x2F;if&gt;&quot;,  &quot;    &lt;if test&#x3D;&#39;bio !&#x3D; null&#39;&gt;bio&#x3D;#&#123;bio&#125;&lt;&#x2F;if&gt;&quot;,  &quot;  &lt;&#x2F;set&gt;&quot;,  &quot;where id&#x3D;#&#123;id&#125;&quot;,  &quot;&lt;&#x2F;script&gt;&quot;&#125;)void updateAuthorValues(Author author);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p><code>bind</code> 元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。比如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;select id&#x3D;&quot;selectBlogsLike&quot; resultType&#x3D;&quot;Blog&quot;&gt;  &lt;bind name&#x3D;&quot;pattern&quot; value&#x3D;&quot;&#39;%&#39; + _parameter.getTitle() + &#39;%&#39;&quot; &#x2F;&gt;  SELECT * FROM BLOG  WHERE title LIKE #&#123;pattern&#125;&lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多数据库支持"><a href="#多数据库支持" class="headerlink" title="多数据库支持"></a>多数据库支持</h3><p>如果配置了 databaseIdProvider，你就可以在动态代码中使用名为 “_databaseId” 的变量来为不同的数据库构建特定的语句。比如下面的例子：</p><pre class="line-numbers language-none"><code class="language-none">&lt;insert id&#x3D;&quot;insert&quot;&gt;  &lt;selectKey keyProperty&#x3D;&quot;id&quot; resultType&#x3D;&quot;int&quot; order&#x3D;&quot;BEFORE&quot;&gt;    &lt;if test&#x3D;&quot;_databaseId &#x3D;&#x3D; &#39;oracle&#39;&quot;&gt;      select seq_users.nextval from dual    &lt;&#x2F;if&gt;    &lt;if test&#x3D;&quot;_databaseId &#x3D;&#x3D; &#39;db2&#39;&quot;&gt;      select nextval for seq_users from sysibm.sysdummy1&quot;    &lt;&#x2F;if&gt;  &lt;&#x2F;selectKey&gt;  insert into users values (#&#123;id&#125;, #&#123;name&#125;)&lt;&#x2F;insert&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态-SQL-中的插入脚本语言"><a href="#动态-SQL-中的插入脚本语言" class="headerlink" title="动态 SQL 中的插入脚本语言"></a>动态 SQL 中的插入脚本语言</h3><p>MyBatis 从 3.2 版本开始支持插入脚本语言，这允许你插入一种语言驱动，并基于这种语言来编写动态 SQL 查询语句。</p><p>可以通过实现以下接口来插入一种语言：</p><pre class="line-numbers language-none"><code class="language-none">public interface LanguageDriver &#123;  ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql);  SqlSource createSqlSource(Configuration configuration, XNode script, Class&lt;?&gt; parameterType);  SqlSource createSqlSource(Configuration configuration, String script, Class&lt;?&gt; parameterType);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现自定义语言驱动后，你就可以在 mybatis-config.xml 文件中将它设置为默认语言：</p><pre class="line-numbers language-none"><code class="language-none">&lt;typeAliases&gt;  &lt;typeAlias type&#x3D;&quot;org.sample.MyLanguageDriver&quot; alias&#x3D;&quot;myLanguage&quot;&#x2F;&gt;&lt;&#x2F;typeAliases&gt;&lt;settings&gt;  &lt;setting name&#x3D;&quot;defaultScriptingLanguage&quot; value&#x3D;&quot;myLanguage&quot;&#x2F;&gt;&lt;&#x2F;settings&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者，你也可以使用 <code>lang</code> 属性为特定的语句指定语言：</p><pre class="line-numbers language-none"><code class="language-none">&lt;select id&#x3D;&quot;selectBlog&quot; lang&#x3D;&quot;myLanguage&quot;&gt;  SELECT * FROM BLOG&lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者，在你的 mapper 接口上添加 <code>@Lang</code> 注解：</p><pre class="line-numbers language-none"><code class="language-none">public interface Mapper &#123;  @Lang(MyLanguageDriver.class)  @Select(&quot;SELECT * FROM BLOG&quot;)  List&lt;Blog&gt; selectBlog();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>qianduan</title>
      <link href="/2022/06/06/qianduan/"/>
      <url>/2022/06/06/qianduan/</url>
      
        <content type="html"><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h4 id="1-HTML的注释"><a href="#1-HTML的注释" class="headerlink" title="1.HTML的注释"></a>1.HTML的注释</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--注释内容--></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-HTML的模式"><a href="#2-HTML的模式" class="headerlink" title="2.HTML的模式"></a>2.HTML的模式</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-基本标签"><a href="#3-基本标签" class="headerlink" title="3.基本标签"></a>3.基本标签</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落标记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  将文本分段<span class="token comment">&lt;!--标题字：是HTML预留的格式，和word中的标题字相同--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--换行标记--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--横线，独目标记 -color和width都是hr标签的属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50%<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--标记内什么格式将会完全保留--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span>预留格式标记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>删除字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">></span></span>插入字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>粗体字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>斜体字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span>  上方字10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>m<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span> 下方字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>字体标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--实体符号 特点:以&amp;开始，以;结束--></span><span class="token entity named-entity" title="&lt;">&amp;lt;</span> 是小于号<span class="token entity named-entity" title="&gt;">&amp;gt;</span>是大于号<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>是空格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>对齐方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-表格-table"><a href="#4-表格-table" class="headerlink" title="4.表格 table"></a>4.表格 table</h4><pre class="line-numbers language-none"><code class="language-none">&#x2F;*border&#x3D;&quot;1px&quot; 设置表格的边框为1像素宽度。width 宽度height 高度align对齐方式tr 行td 格th 标签也是单元格标签，比td多的是居中.加粗。*&#x2F;&lt;table align&#x3D;&quot;center&quot; border&#x3D;&quot;1px&quot; width&#x3D;&quot;60%&quot; height&#x3D;&quot;150px&quot;&gt;&lt;tr&gt;&lt;td&gt;x&lt;&#x2F;td&gt;&lt;td&gt;y&lt;&#x2F;td&gt;&lt;td align&#x3D;&quot;center&quot;&gt;z&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;​单元格的合并​注意事项：​(1).row合并的时候，删除“下面的”单元格,在上面的td标签中，加rowspan&#x3D;&quot;2&quot;​(2).col合并的时候，对删除哪个没有要求。在没被删的td标签中，加colspan&#x3D;&quot;2&quot;&lt;table border&#x3D;&quot;1px&quot; width&#x3D;&quot;50%&quot;&gt;&lt;tr&gt;&lt;td colspan&#x3D;&quot;2&quot;&gt;&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td rowspan&#x3D;&quot;2&quot;&gt;6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;表格的thead tbody tfoot&lt;table border&#x3D;&quot;1px&quot; width&#x3D;&quot;50%&quot;&gt;&lt;!--头--&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;员工编号&lt;&#x2F;th&gt;&lt;th&gt;员工薪资&lt;&#x2F;th&gt;&lt;th&gt;部门名称&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;!--体--&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;a&lt;&#x2F;td&gt;&lt;td&gt;b&lt;&#x2F;td&gt;&lt;td rowspan&#x3D;&quot;2&quot;&gt;f&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td colspan&#x3D;&quot;2&quot;&gt;d&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;!--脚--&gt;&lt;tfoot&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tfoot&gt;&lt;&#x2F;table&gt;&lt;hr&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-背景和图片"><a href="#5-背景和图片" class="headerlink" title="5.背景和图片"></a>5.背景和图片</h4><pre class="line-numbers language-none"><code class="language-none">背景bgcolor : 设置背景色background : 设置背景图片以上的设置都是对背景进行设置。&lt;body bgcolor&#x3D;&quot;red&quot; background&#x3D;&quot;图片地址&quot;&gt;图片(1).设置图片宽度和高度的时候，只设置宽度，高度会进行等比例缩放。(2).img标签就是图片标签(3).src属性是图片的路径(4).width设置宽度,height设置高度(5).title设置鼠标悬停时显示的信息。(6).alt设置图片加载失败时显示的提示信息。&lt;img src&#x3D;&quot;&quot; width&#x3D;&quot;&quot; title&#x3D;&quot;&quot; alt&#x3D;&quot;&quot;&#x2F;&gt;&lt;img src&#x3D;&quot;&quot; width&#x3D;&quot;&quot; title&#x3D;&quot;&quot; alt&#x3D;&quot;&quot;&gt;&lt;&#x2F;img&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p><h4 id="6-超链接的特点："><a href="#6-超链接的特点：" class="headerlink" title="6.超链接的特点："></a>6.超链接的特点：</h4><pre class="line-numbers language-none"><code class="language-none">有下划线鼠标停留在超链接上面显示小手形状。点击超链接之后还能跳转页面。&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度&lt;&#x2F;a&gt;href：hot references 热引用;href属性后面一定是一个资源的地址。href后面的路径可以是绝对路径也可以是相对路径，可以是网络中某个资源的路径，也可以是本地资源的路径。相对路径的对象要在同一个目录下图片超链接&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.hao123.com&#x2F;&quot;&gt;&lt;img src&#x3D;&quot;图片地址&quot;&#x2F;&gt;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p><pre><code>超链接target属性：在什么位置打开超链接        可取值：                _blank : 新窗口                _self ： 当前窗口（默认就是这种方式。）                _top ： 顶级窗口                _parent ： 父窗口    </code></pre><h4 id="7-列表"><a href="#7-列表" class="headerlink" title="7.列表"></a>7.列表</h4><pre class="line-numbers language-none"><code class="language-none">有序列表 ol&lt;ol type&#x3D;&quot;I&quot;&gt; type 序号类型&lt;li&gt;水果  li 代表项&lt;ol type&#x3D;&quot;a&quot;&gt;&lt;li&gt;苹果&lt;&#x2F;li&gt;&lt;li&gt;西瓜&lt;&#x2F;li&gt;&lt;li&gt;桃子&lt;&#x2F;li&gt;&lt;&#x2F;ol&gt;&lt;&#x2F;li&gt;无序列表 ul&lt;ul type&#x3D;&quot;circle&quot;&gt;&lt;li&gt;中国&lt;ul type&#x3D;&quot;square&quot;&gt;&lt;li&gt;北京&lt;&#x2F;ul&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;下拉列表&lt;select multiple&#x3D;&quot;multiple&quot; size&#x3D;&quot;2&quot;&gt;  multiple&#x3D;&quot;multiple&quot;支持多选的 size设置显示条目数量&lt;option&gt;河北省&lt;&#x2F;option&gt;   &lt;option&gt;&lt;&#x2F;option&gt;  选项&lt;option&gt;河南省&lt;&#x2F;option&gt;&lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-input输入域"><a href="#8-input输入域" class="headerlink" title="8.input输入域"></a>8.input输入域</h4><pre class="line-numbers language-none"><code class="language-none">&lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;点&quot;&quot;设置按钮上显示的文本&quot;&#x2F;&gt;  按钮&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&#x2F;&gt; 表示该按钮是一个提交按钮，具有提交表单的能力&lt;input type&#x3D;&quot;reset&quot; value&#x3D;&quot;清空&quot; &#x2F;&gt; &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&#x2F;&gt; 文本框  maxlength 设置文本框中可输入的字符数量。&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;username&quot;&#x2F;&gt; 密码框&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;interest&quot; value&#x3D;&quot;smoke&quot;&#x2F;&gt; 多选框&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;0&quot; checked&#x2F;&gt; 单选框&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;userid&quot; value&#x3D;&quot;111&quot; &#x2F;&gt; 隐藏域：网页上看不到，表单提交时数据会自动提交给服务器&lt;input type&#x3D;&quot;file&quot; &#x2F;&gt; file控件：文件上传专用&lt;textarea rows&#x3D;&quot;10&quot; cols&#x3D;&quot;60&quot; name&#x3D;&quot;introduce&quot;&gt;&lt;&#x2F;textarea&gt; 文本域，文本域没有value属性，用户填写的内容就是value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-表单"><a href="#9-表单" class="headerlink" title="9.表单"></a>9.表单</h4><pre class="line-numbers language-none"><code class="language-none">(1).收集用户信息。表单展现之后，用户填写表单，点击提交按钮提交数据给服务器。(2).使用form标签画表单。(3).一个网页当中可以有多个表单form。(4).表单最终是需要提交数据给服务器的，form标签有一个action属性action属性用来指定数据提交给哪个服务器。action属性和超链接中的href属性一样。都可以向服务器发送请求（request）超链接和表单都可以向服务器发送请求，只不过表单发送请求的同时可以携带数(5).http:&#x2F;&#x2F;192.168.111.3:8080&#x2F;oa&#x2F;save 这是请求路径，表单提交数据最终提交给：192.168.111.3机器上的8080端口对应的软件。(6).表单是以什么格式提交数据给服务器格式：action?name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value&amp;name&#x3D;value...W3C的HTTP协议规定的，必须以这种格式提交给服务器。(7).单项写了name属性的，一律会提交给服务器。当name没有写的时候，该项不会提交给服务器。文本框和密码框的value不需要程序员指定，用户输入什么value就是什么。但是当value没有写的时候，value的默认值是空字符串&quot;&quot;，会将空字符串提交给服务器。(8).form表单method属性：get:采用get方式提交的时候，用户提交的信息会显示在浏览器的地址栏上。post:采用post方式提交的时候，用户提交的信息不会显示在浏览器地址栏上。method属性不指定，或者指定get，这种情况下都是get。只有当method属性指定为post的时候才是post请求。剩下所有都是get请求。post提交的时候提交的数据格式和get还是一样的，只不过不再地址栏上显示出来。(9)readonly和disabled相同点：value的属性；都是只读不能修改。  readonly可以提交给服务器，disabled数据不会提交（即使有name属性也不会提交。）&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;usercode&quot; value&#x3D;&quot;110&quot; readonly &#x2F;&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;zhangsan&quot; disabled &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><h4 id="10-id"><a href="#10-id" class="headerlink" title="10.id"></a>10.id</h4><pre class="line-numbers language-none"><code class="language-none">(1).在HTML文档当中，任何元素（节点）都有id属性，id属性是该节点的唯一标识。所以在同一个HTML文档当中id值不能重复。(2).注意：表单提交数据的时候，只和name有关系，和id无关。(3).id的作用mjavascript可以对HTML文档当中的任意节点进行增删改，增删改之前需要先拿到这个节点，通常我们通过id来拿节点对象。id的存在让我们获取节点更方便。(4).HTML文档是一棵树，树上有很多节点，每一个节点都有唯一的id。javascript主要就是对这棵DOM树上的节点进行增删改的。DOM(Document)树。&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;username&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p><h4 id="11-div和span"><a href="#11-div和span" class="headerlink" title="11.div和span"></a>11.div和span</h4><pre class="line-numbers language-none"><code class="language-none">&lt;1.div和span都可以称为“图层”图层的作用是为了保证页面可以灵活的布局。div和span是可以定位的，只要定下div的左上角的x轴和y轴坐标即可。&lt;2.div和span的区别？div独自占用一行（默认情况下）span不会独自占用一行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javadoc</title>
      <link href="/2022/06/01/javadoc/"/>
      <url>/2022/06/01/javadoc/</url>
      
        <content type="html"><![CDATA[<h3 id="三种注释"><a href="#三种注释" class="headerlink" title="三种注释"></a>三种注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Ctrl+/ 快捷键</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*Ctrl+shift+/ 快捷键*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="文档注释-Javadoc"><a href="#文档注释-Javadoc" class="headerlink" title="文档注释(Javadoc)"></a>文档注释(Javadoc)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author 李朱鹏 * @version 1.0 * @since * @see java.io */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">/**     * 该方法用来计算学生的数学和语文成绩之和. //简要概述以.结尾     * &lt;p>我们通过输入数学成绩和语文成绩，通过运算，返回成绩总和。&lt;/p>     *     *     * @param math 数学成绩     * @param chinese 语文成绩     * @return 数学成绩和语文成绩之和     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> math<span class="token punctuation">,</span><span class="token keyword">int</span> chinese<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> math<span class="token operator">+</span>chinese<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * &#123;@code code标签后的将以代码格式呈现&#125;     * @deprecated     * @exception NullPointerException     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">M1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="javadoc书写规范"><a href="#javadoc书写规范" class="headerlink" title="javadoc书写规范"></a>javadoc书写规范</h5><ul><li><p>第一段：概要描述，通常用一句或者一段话简要描述该类的作用，以英文句号作为结束</p></li><li><p>第二段：详细描述，通常用一段或者多段话来详细描述该类的作用，一般每段话都以英文句号作为结束</p></li><li><p>第三段：文档标注，用于标注作者、创建时间、参阅类等信息</p></li></ul><p>常用标签：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@author</span> 作者<span class="token annotation punctuation">@version</span> 版本<span class="token annotation punctuation">@param</span> 参数<span class="token annotation punctuation">@return</span> 返回值<span class="token annotation punctuation">@deprecated</span> 已过时<span class="token annotation punctuation">@throws</span> 抛出异常<span class="token annotation punctuation">@exception</span> 可能出现的异常<span class="token annotation punctuation">@see</span> 查看相关内容<span class="token annotation punctuation">@since</span> API在什么程序在什么程序支持<span class="token punctuation">&#123;</span><span class="token annotation punctuation">@link</span><span class="token punctuation">&#125;</span> 链接到其他成员的对应文档@<span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span> 对常量进行注释，将其值包含在文档值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>UTF-8</title>
      <link href="/2022/05/26/utf-8/"/>
      <url>/2022/05/26/utf-8/</url>
      
        <content type="html"><![CDATA[<h3 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h3><p>在计算机内部，所有的信息最终都表示为一个二进制的字符串。每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。</p><p>上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码，一直沿用至今。</p><p>ASCII码一共规定了128个字符的编码，比如空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。</p><h3 id="非ASCII编码"><a href="#非ASCII编码" class="headerlink" title="非ASCII编码"></a>非ASCII编码</h3><p>英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样。</p><p>亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右。一个字节只能表示256种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示256x256=65536个符号。</p><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。</p><p>可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是Unicode，就像它的名字都表示的，这是一种所有符号的编码。</p><p>Unicode当然是一个很大的集合，现在的规模可以容纳100多万个符号。每个符号的编码都不一样，比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字“严”。具体的符号对应表，可以查询<a href="http://www.unicode.org/">unicode.org</a>，或者专门的<a href="http://www.chi2ko.com/tool/CJK.htm">汉字对应表</a>。</p><ul><li>Unicode的问题</li></ul><p>需要注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。</p><p>比如，汉字“严”的unicode是十六进制数4E25，转换成二进制数足足有15位（100111000100101），也就是说这个符号的表示至少需要2个字节。表示其他更大的符号，可能需要3个字节或者4个字节，甚至更多。</p><p>这里就有两个严重的问题，第一个问题是，如何才能区别unicode和ascii？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储来说是极大的浪费，文本文件的大小会因此大出二三倍，这是无法接受的。</p><h3 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h3><p>UTF-8就是在互联网上使用最广的一种unicode的实现方式。</p><p>UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p><p>UTF-8的编码规则很简单，只有二条：</p><p>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p><p>2）对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p><p>下表总结了编码规则，字母x表示可用编码的位。</p><p>1字节 0xxxxxxx<br>2字节 110xxxxx 10xxxxxx<br>3字节 1110xxxx 10xxxxxx 10xxxxxx<br>4字节 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx<br>5字节 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx<br>6字节 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx<br>实际将UNICODE转换为UTF-8编码时应先去除高位0，然后根据所剩编码的位数决定所需最小的UTF-8编码位数。<br>因此那些基本ASCII字符集中的字符（UNICODE兼容ASCII）只需要一个字节的UTF-8编码（7个二进制位）便可以表示。 </p><p>下面，还是以汉字“严”为例，演示如何实现UTF-8编码。</p><p>已知“严”的unicode是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800-0000 FFFF），因此“严”的UTF-8编码需要三个字节，即格式是“1110xxxx 10xxxxxx 10xxxxxx”。然后，从“严”的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，“严”的UTF-8编码是“11100100 10111000 10100101”，转换成十六进制就是E4B8A5。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-备份</title>
      <link href="/2022/04/22/linux-beifen/"/>
      <url>/2022/04/22/linux-beifen/</url>
      
        <content type="html"><![CDATA[<h3 id="备份策略"><a href="#备份策略" class="headerlink" title="备份策略"></a>备份策略</h3><ul><li><p>完全备份</p><ul><li>完全备份就是指把所有需要备份的数据全部备份，当然完全备份可以备份整块硬盘，整个分区或某个具体的目录。</li><li>优点：备份恢复速度快；缺点：备份时所需资源较多</li></ul></li><li><p>增量备份</p><ul><li>每一次备份都只备份上次备份值本次备份之间发生改变的部分；</li><li>优点：备份迅速，消耗资源少；缺点：恢复时麻烦</li></ul><img src="/2022/04/22/linux-beifen/%E5%A2%9E%E9%87%8F%E5%A4%87%E4%BB%BD.png" class=""></li><li><p>差异备份</p><ul><li>每次备份时备份的是第一次备份至本次备份之间发生改变的部分；</li></ul><img src="/2022/04/22/linux-beifen/%E5%B7%AE%E5%BC%82%E5%A4%87%E4%BB%BD.png" class=""></li></ul><h3 id="备份命令"><a href="#备份命令" class="headerlink" title="备份命令"></a>备份命令</h3><h4 id="dump命令"><a href="#dump命令" class="headerlink" title="dump命令"></a>dump命令</h4><ul><li><p>dump [选项] 备份之后的文件名 原文件或目录</p><ul><li>-level ：0-9十个备份级别<ul><li>备份级别分为0-9；级别为N的转储会对从上次进行的级别小于N的转储操作以来修改过的所有文件进行备份，而级别0就是完全备份。通过这种方式，可以很轻松的实现增量备份，差异备份，甚至每日备份。例如，第一次备份时可选择级别0(具体操作看后面)，以后每天做增量备份时就可以每天依次使用级别1，级别2，级别3等等… …；当需要每天做差异备份时，可先选择级别0做完整备份，然后每天都使用同一大于0的级别就行了。</li></ul></li><li>-f 文件名 ：指定备份之后的文件名</li><li>-u ：备份成功之后，备份时间记录在/etc/dumpdates文件中</li><li>-v ：显示备份过程中更多地输出信息</li><li>-j ：调用bzlib库压缩备份文件，将备份文件压缩为.bz2格式</li><li>-W ：显示允许被dump的分区的备份等级及备份时间</li></ul></li><li><p>备份分区</p><p>dump -0uj -f /root/boot.bak.bz2 /boot/</p><p>备份级别为0，执行完全备份；备份之后的文件名为/root/boot.bak.bz2；备份的分区为/boot、</p></li><li><p>文件/目录备份</p><ul><li>dump -0j -f /root/etc.dump.bz2 /etc/ </li><li>目录只能执行完全备份，不能执行其他级别的备份</li></ul></li></ul><h3 id="restore命令"><a href="#restore命令" class="headerlink" title="restore命令"></a>restore命令</h3><ul><li><p>restore [模式选择] [选项]</p><p>常用模式</p><ul><li>-C：比较备份数据和实际数据的变化</li><li>-i：进入交互模式，手工选择需要恢复的文件</li><li>-t：查看模式，用于查看备份文件中拥有哪些数据</li><li>-r：还原模式，用于数据还原</li></ul><p>选项</p><ul><li>-f：指定备份文件的文件名</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-rizhi</title>
      <link href="/2022/04/20/linux-rizhi/"/>
      <url>/2022/04/20/linux-rizhi/</url>
      
        <content type="html"><![CDATA[<h3 id="rsyslogd日志服务"><a href="#rsyslogd日志服务" class="headerlink" title="rsyslogd日志服务"></a>rsyslogd日志服务</h3><ul><li>确定服务启动<ul><li>ps aux | grep rsyslogd</li><li>chkconfig –list | grep rsyslog</li></ul></li></ul><h3 id="常见日志的作用"><a href="#常见日志的作用" class="headerlink" title="常见日志的作用"></a>常见日志的作用</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>/var/log/cron</td><td>记录了系统定时任务相关的日志</td></tr><tr><td>/var/log/cups</td><td>记录打印信息的日志</td></tr><tr><td>/var/log/dmesg</td><td>记录了系统在开机时内核自检的信息。</td></tr><tr><td>/var/log/btmp</td><td>记录错误登录的日志，二进制文件使用lastb命令查看</td></tr><tr><td>/var/log/lastlog</td><td>记录系统中所有用户最后一次登录的时间日志。二进制文件，使用lastlog查看</td></tr><tr><td>/var/log/mailog</td><td>记录邮件信息</td></tr><tr><td>/var/log/message</td><td>记录系统重要信息日志，系统出现问题先检查这个日志文件</td></tr><tr><td>/var/log/secure</td><td>记录验证和授权方面的信息，涉及到账户和密码的都会记录。</td></tr><tr><td>/var/log/wtmp</td><td>永久记录所有用户的登录、注销信息，同时记录系统的启动，重启，关机事件，用last命令查看</td></tr><tr><td>/var/run/utmp</td><td>记录当前已登入的用户的信息，会随着用户的登录和注销不断变化。用w,who,users等命令查看</td></tr></tbody></table><h3 id="日志文件的格式"><a href="#日志文件的格式" class="headerlink" title="日志文件的格式"></a>日志文件的格式</h3><ul><li><p>时间发生的时间</p></li><li><p>发生事件的服务器主机名</p></li><li><p>产生事件的服务名或程序名</p></li><li><p>时间的具体信息</p><pre class="line-numbers language-none"><code class="language-none">Apr 29 16:28:02 localhost run-parts(&#x2F;etc&#x2F;cron.daily)[1622]: finished logrotateApr 29 16:28:02 localhost run-parts(&#x2F;etc&#x2F;cron.daily)[1601]: starting man-db.cronApr 29 16:28:07 localhost run-parts(&#x2F;etc&#x2F;cron.daily)[1633]: finished man-db.cron<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="etc-rsyslog-conf配置文件"><a href="#etc-rsyslog-conf配置文件" class="headerlink" title="/etc/rsyslog.conf配置文件"></a>/etc/rsyslog.conf配置文件</h3><ul><li><p>我们通过vim修改该配置文件来设置rsyslog服务记录日志的方式</p></li><li><p>格式</p><ul><li><p>服务名称 [连接符号] 日志等级 日志记录位置</p></li><li><p>rsyslog日志服务配置语句：<em><em>authpriv.</em>   /var/log/secure</em>*</p></li><li><p>服务名称</p><table><thead><tr><th>服务名称</th><th>说明</th></tr></thead><tbody><tr><td>auth</td><td>安全和认证相关信息(不推荐使用authpriv提替代)</td></tr><tr><td>authpriv</td><td>安全和认证相关信息(私有的)</td></tr><tr><td>cron</td><td>系统定时任务cront和at产生的日志</td></tr><tr><td>daemon</td><td>和各个守护进程相关的日志</td></tr><tr><td>ftp</td><td>ftp守护进程产生的日志</td></tr><tr><td>kern</td><td>内核产生的日志</td></tr><tr><td>local10-local17</td><td>为本地使用预留的服务</td></tr><tr><td>lpr</td><td>打印产生的日志</td></tr><tr><td>mail</td><td>邮件收发消息</td></tr><tr><td>news</td><td>与新闻服务器相关的日志</td></tr><tr><td>syslog</td><td>有syslogd服务产生的日志信息(服务名虽然更改为rsyslogd,但配置名仍为syslog)</td></tr><tr><td>user</td><td>用户等级类别的日志信息</td></tr><tr><td>uucp</td><td>uucp子系统的日志信息</td></tr></tbody></table></li><li><p>连接符号</p><ul><li><p>.</p><p>. 代表只要比后面的等级高的(包含该等级)日志都记录下来。</p></li><li><p>.=</p><p>.= 代表只记录所需等级的日志，其他等级都不记录。</p></li><li><p>.! </p><p>.! 代表不等于，也就是除了该等级的日志外，其他等级都记录。</p></li></ul></li><li><p>等级</p><table><thead><tr><th>等级名称</th><th>说明</th></tr></thead><tbody><tr><td>debug</td><td>一般的调试信息说明</td></tr><tr><td>info</td><td>基本的通知信息</td></tr><tr><td>notice</td><td>普通信息，有一定重要性</td></tr><tr><td>warning</td><td>警告信息，但不影响服务运行</td></tr><tr><td>err</td><td>错误信息，可能会影响服务的运行</td></tr><tr><td>crit</td><td>临界状态信息，比err严重</td></tr><tr><td>alert</td><td>警告状态信息，比crit严重</td></tr><tr><td>emerg</td><td>疼痛等级信息，系统已经无法使用</td></tr></tbody></table><table><thead><tr><th>设置</th><th>含义</th></tr></thead><tbody><tr><td>authpriv.*</td><td>认证信息服务产生的所有日志等级都记录，*代表所有日志等级</td></tr><tr><td>cron.info</td><td>cron服务产生的日志，只要日志等级大于等于info级别就记录</td></tr><tr><td>*.=emerg</td><td>代表任何日志服务产生的日志，只要等级是emerg等级就记录</td></tr></tbody></table></li></ul></li></ul><h3 id="etc-logrotate-conf-日志轮替"><a href="#etc-logrotate-conf-日志轮替" class="headerlink" title="/etc/logrotate.conf 日志轮替"></a>/etc/logrotate.conf 日志轮替</h3><pre class="line-numbers language-none"><code class="language-none"># see &quot;man logrotate&quot; for details# rotate log files weekly# 默认值，若没有配置使用默认值weekly# keep 4 weeks worth of backlogs# 默认值，若没有配置使用默认值rotate 4# create new (empty) log files after rotating old ones# 默认值，若没有配置使用默认值create# use date as a suffix of the rotated file# 默认值，若没有配置使用默认值dateext# uncomment this if you want your log files compressed# 默认值，若没有配置使用默认值#compress# RPM packages drop log rotation information into this directoryinclude &#x2F;etc&#x2F;logrotate.d# no packages own wtmp and btmp -- we&#39;ll rotate them here&#x2F;var&#x2F;log&#x2F;wtmp &#123;    monthly    create 0664 root utmp        minsize 1M    rotate 1&#125;&#x2F;var&#x2F;log&#x2F;btmp &#123;    missingok    monthly    create 0600 root utmp    rotate 1&#125;# system-specific logs may be also be configured here.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>配置文件参数</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>daily</td><td>日志轮替周期是每天</td></tr><tr><td>weekly</td><td>日志轮替周期是每周</td></tr><tr><td>monthly</td><td>日志轮替周期是每月</td></tr><tr><td>rotate 数字</td><td>保留的日志文件的个数。0指没有备份</td></tr><tr><td>compress</td><td>日志轮替时，旧的日志进行压缩</td></tr><tr><td>create mode owener group</td><td>建立新日志。同时指定新日志的权限与所有者和所属组。</td></tr><tr><td>mail address</td><td>当日志轮替时，输出内容通过邮件发送到指定的邮件地址,mail xxx @16.com</td></tr><tr><td>missingok</td><td>如果日志不存在，则不进行日志轮替</td></tr><tr><td>notifempty</td><td>如果日志为空文件，则不进行日志轮替</td></tr><tr><td>minsize 大小</td><td>日志轮替的最小值，日志一定要到达这个最小值才轮替，不按时间轮替</td></tr><tr><td>size 大小</td><td>日志只有大于指定大小才进行日志轮替，不按照时间轮替</td></tr><tr><td>dateext</td><td>使用日期作为日志轮替文件的后缀</td></tr></tbody></table><ul><li><p>dateext参数</p><p>如果 配置文件中拥有dateext参数，那么轮替日志文件就会以日期做后缀；如果没有，将以数字123…代替。</p></li></ul></li><li><p>logrotate [选项] [配置文件名]</p><ul><li>-v ：显示日志轮替过程中，会显示轮替过程</li><li>-f ：强制进行日志轮替</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wenjian</title>
      <link href="/2022/04/19/wenjian/"/>
      <url>/2022/04/19/wenjian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-system</title>
      <link href="/2022/04/18/linux-system/"/>
      <url>/2022/04/18/linux-system/</url>
      
        <content type="html"><![CDATA[<h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><h4 id="1-1-ps-aux"><a href="#1-1-ps-aux" class="headerlink" title="1.1.ps aux"></a>1.1.ps aux</h4><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ps auxUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot         1  0.0  0.3 193832  6984 ?        Ss   03:02   0:38 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;systemd --switched-root --sysroot         2  0.0  0.0      0     0 ?        S    03:02   0:00 [kthreadd]root         3  0.0  0.0      0     0 ?        S    03:02   0:00 [ksoftirqd&#x2F;0]....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>USER</td><td>该进程由哪个用户产生</td></tr><tr><td>PID</td><td>进程ID号</td></tr><tr><td>%CPU</td><td>该进程占用CPU资源的百分比，占用越高，进程越耗费资源</td></tr><tr><td>%MEM</td><td>该进程占物理内存的百分比，占用越高，进程越耗费资源</td></tr><tr><td>VSZ</td><td>该进程占用虚拟机内存大小，单位KB</td></tr><tr><td>RSS</td><td>该进程占用实际物理内存的大小，单位KB</td></tr><tr><td>TTY</td><td>该进程是在哪个终端中运行。tty1-tty7代表本地控制台终端， tty1-tty6是本地字符界面终端，tty7是图形终端。pts/0-256代表虚拟终端。</td></tr><tr><td>STAT</td><td>进程状态。R：运行；S：睡眠；T：停止状态；s：包含子进程；+：位于后台</td></tr><tr><td>START</td><td>进程启动时间</td></tr><tr><td>TIME</td><td>该进程占用CPU的运算时间</td></tr><tr><td>COMMAND</td><td>产生此进程的命令名</td></tr></tbody></table><h4 id="1-2-ps-le"><a href="#1-2-ps-le" class="headerlink" title="1.2.ps -le"></a>1.2.ps -le</h4><h3 id="查看系统状态"><a href="#查看系统状态" class="headerlink" title="查看系统状态"></a>查看系统状态</h3><h4 id="2-1-top"><a href="#2-1-top" class="headerlink" title="2.1.top"></a>2.1.top</h4><ul><li><p>top [选项]</p><ul><li>-d 秒数:指定top命令每个几秒更新，默认是3秒。</li><li>top命令的交互模式可以执行的命令：<ul><li>？或h:显示交互模式的帮助</li><li>P:以CPU使用率排序，默认此项</li><li>M:以内存的使用率排序</li><li>N:以PID排序</li><li>q:退出</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# top top - 16:46:16 up 13:43,  1 user,  load average: 0.00, 0.01, 0.05Tasks: 160 total,   1 running, 159 sleeping,   0 stopped,   0 zombie%Cpu(s):  0.8 us,  0.0 sy,  0.0 ni, 99.2 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 stKiB Mem :  1882892 total,  1378200 free,   180652 used,   324040 buff&#x2F;cacheKiB Swap:  1023996 total,  1023996 free,        0 used.  1453248 avail Mem   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                   11139 root      20   0  157716   2164   1496 R   6.7  0.1   0:00.02 top                                           1 root      20   0  193832   6984   4052 S   0.0  0.4   0:40.67 systemd                                   2 root      20   0       0      0      0 S   0.0  0.0   0:00.07 kthreadd                                 3 root      20   0       0      0      0 S   0.0  0.0   0:00.75 ksoftirqd&#x2F;0                               5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker&#x2F;0:0H                             6 root      20   0       0      0      0 S   0.0  0.0   0:01.45 kworker&#x2F;u16:0                             7 root      rt   0       0      0      0 S   0.0  0.0   0:00.11 migration&#x2F;0                               8 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="停止进程"><a href="#停止进程" class="headerlink" title="停止进程"></a>停止进程</h3><h4 id="3-1-kill"><a href="#3-1-kill" class="headerlink" title="3.1.kill"></a>3.1.kill</h4><ul><li><p>kill -l 查看进程代号</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# kill -l 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL10) SIGUSR111) SIGSEGV12) SIGUSR213) SIGPIPE14) SIGALRM15) SIGTERM16) SIGSTKFLT17) SIGCHLD18) SIGCONT19) SIGSTOP20) SIGTSTP21) SIGTTIN22) SIGTTOU23) SIGURG24) SIGXCPU25) SIGXFSZ26) SIGVTALRM27) SIGPROF28) SIGWINCH29) SIGIO30) SIGPWR31) SIGSYS34) SIGRTMIN35) SIGRTMIN+136) SIGRTMIN+237) SIGRTMIN+338) SIGRTMIN+439) SIGRTMIN+540) SIGRTMIN+641) SIGRTMIN+742) SIGRTMIN+843) SIGRTMIN+944) SIGRTMIN+1045) SIGRTMIN+1146) SIGRTMIN+1247) SIGRTMIN+1348) SIGRTMIN+1449) SIGRTMIN+1550) SIGRTMAX-1451) SIGRTMAX-1352) SIGRTMAX-1253) SIGRTMAX-1154) SIGRTMAX-1055) SIGRTMAX-956) SIGRTMAX-857) SIGRTMAX-758) SIGRTMAX-659) SIGRTMAX-560) SIGRTMAX-461) SIGRTMAX-362) SIGRTMAX-263) SIGRTMAX-164) SIGRTMAX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><img src="/2022/04/18/linux-system/image-20220419202552850.png" class="" title="image-20220419202552850"><ul><li>kill 信号代号 进程PID<ul><li>根据不同的需求kill进程</li><li>kill 9 PID</li></ul></li></ul><h3 id="后台进程"><a href="#后台进程" class="headerlink" title="后台进程"></a>后台进程</h3><h4 id="4-1-把进程放到后台"><a href="#4-1-把进程放到后台" class="headerlink" title="4.1.把进程放到后台"></a>4.1.把进程放到后台</h4><ul><li>命令 + &amp;<ul><li>tar -zcf a.tar.gz / &amp;  :  tar -zcf a.tar.gz /命令会到后台执行</li><li>命令 + ctrlZ</li><li>&amp;是放到后台继续执行；CtrlZ是放到后台暂停执行 </li></ul></li></ul><h4 id="4-2-查看进程"><a href="#4-2-查看进程" class="headerlink" title="4.2.查看进程"></a>4.2.查看进程</h4><ul><li><p>jobs [-l]</p><p>-l : 显示工作的PID</p></li><li><p>+号代表最近一个放入后台的工作，也是工作恢复时，默认恢复的工作。-号代表倒数第二个放入后台的工作。</p></li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ping -c 100 baidu.com &gt; baidulog.txt^Z[1]+  已停止               ping -c 100 baidu.com &gt; baidulog.txt[root@localhost ~]# ping -c 100 jd.com &gt; jdlog.txt &amp;[2] 12202[root@localhost ~]# jobs[1]+  已停止               ping -c 100 baidu.com &gt; baidulog.txt[2]-  运行中               ping -c 100 jd.com &gt; jdlog.txt &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-恢复执行"><a href="#4-3-恢复执行" class="headerlink" title="4.3.恢复执行"></a>4.3.恢复执行</h4><ul><li>fg %工作号<ul><li>将后台的工作恢复到前台执行，%可以省略</li></ul></li><li>bg %工作号<ul><li>将后台暂停的工作恢复到后台执行</li><li>后台恢复执行的命令是不能和前台有交互的，否则不能恢复到后台执行</li></ul></li></ul><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="5-1-vmstat命令监控系统资源"><a href="#5-1-vmstat命令监控系统资源" class="headerlink" title="5.1.vmstat命令监控系统资源"></a>5.1.vmstat命令监控系统资源</h4><p>vmstat [刷新延时 刷新次数]</p><p>查看系统资源</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# vmstat 3 3procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st 1  0      0 1152632   2088 544716    0    0     1     1   16   15  0  0 100  0  0 0  0      0 1152492   2088 544716    0    0     0     0   65   51  0  0 100  0  0 0  0      0 1152492   2088 544716    0    0     0     0   50   41  0  0 100  0  0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-dmesg开机时内核检测信息"><a href="#5-2-dmesg开机时内核检测信息" class="headerlink" title="5.2.dmesg开机时内核检测信息"></a>5.2.dmesg开机时内核检测信息</h4><ul><li>dmeag</li><li>dmeag | grep CPU  (结合管道符应用)</li></ul><h4 id="5-3-free命令查看内存使用状态"><a href="#5-3-free命令查看内存使用状态" class="headerlink" title="5.3.free命令查看内存使用状态"></a>5.3.free命令查看内存使用状态</h4><ul><li><p>free [选项]</p><ul><li>-b：以字节为单位显示</li><li>-k：以KB为单位显示</li><li>-m：以MB显示</li><li>-g：以GB显示</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# free -m              total        used        free      shared  buff&#x2F;cache   availableMem:           1838         179        1125           8         534        1415Swap:           999           0         999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内存中的缓存和缓冲</p><p>缓存cache用来加速数据从硬盘中读取的</p><p>缓冲buffer是用来加速数据写入硬盘的</p></li></ul><h4 id="5-4-查看CPU信息"><a href="#5-4-查看CPU信息" class="headerlink" title="5.4.查看CPU信息"></a>5.4.查看CPU信息</h4><ul><li>cat /proc/cpuinfo</li></ul><h4 id="5-5-uptime命令"><a href="#5-5-uptime命令" class="headerlink" title="5.5.uptime命令"></a>5.5.uptime命令</h4><ul><li>显示系统的启动时间和平均负载</li></ul><h4 id="5-6-查看系统与内核相关信息"><a href="#5-6-查看系统与内核相关信息" class="headerlink" title="5.6.查看系统与内核相关信息"></a>5.6.查看系统与内核相关信息</h4><ul><li>uname [选项]<ul><li>-a：查看系统所有相关信息</li><li>-r：查看内核版本</li><li>-s：查看内核名称</li></ul></li></ul><h4 id="5-7-判断当前系统的位数"><a href="#5-7-判断当前系统的位数" class="headerlink" title="5.7.判断当前系统的位数"></a>5.7.判断当前系统的位数</h4><ul><li><p>file /bin/ls</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# file &#x2F;bin&#x2F;ls&#x2F;bin&#x2F;ls: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU&#x2F;Linux 2.6.32, BuildID[sha1]&#x3D;3d705971a4c4544545cb78fd890d27bf792af6d4, stripped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="5-8-查询当前Linux系统发行版本"><a href="#5-8-查询当前Linux系统发行版本" class="headerlink" title="5.8.查询当前Linux系统发行版本"></a>5.8.查询当前Linux系统发行版本</h4><ul><li>lsb_release -a</li></ul><h4 id="5-9-列出进程打开或使用的文件信息"><a href="#5-9-列出进程打开或使用的文件信息" class="headerlink" title="5.9.列出进程打开或使用的文件信息"></a>5.9.列出进程打开或使用的文件信息</h4><ul><li>lsof [选项]<ul><li>-c 字符串：只列出以字符串开头的进程打开的文件</li><li>-u 用户名：只列出某个用户的进程打开的文件</li><li>-p pid：列出某个PID进程打开的文件</li></ul></li></ul><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><ul><li><p>crond服务管理与访问控制</p><ul><li><p>开启crond服务</p></li><li><p>service crond restart</p></li><li><p>chkconfig crond on</p></li></ul></li><li><p>crontab [选项]</p><ul><li>-e ：编辑crontab定时任务</li><li>-l：查询crontab任务</li><li>-r ：删除当前用户所有的crontab任务</li></ul></li><li><p>crontab -e</p><ul><li><p>进入crontab编辑页面。打开vim编辑工作。</p><pre class="line-numbers language-none"><code class="language-none">* * * * * command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个*</td><td>一小时当中的第几分钟</td><td>0-59</td></tr><tr><td>第二个</td><td>一天当中的第几小时</td><td>0-23</td></tr><tr><td>第三个</td><td>一个月当中的第几天</td><td>1-31</td></tr><tr><td>第四个</td><td>一年当中的第几月</td><td>1-12</td></tr><tr><td>第五个</td><td>一周当中的星期几</td><td>0-7</td></tr><tr><td></td><td>45 22 * * *</td><td>在22点45分执行命令</td></tr><tr><td></td><td>0 17 * * 1</td><td>每周一的17点0分执行命令</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-shell-bash</title>
      <link href="/2022/04/16/linux-shell-bash/"/>
      <url>/2022/04/16/linux-shell-bash/</url>
      
        <content type="html"><![CDATA[<h3 id="bash-基本功能"><a href="#bash-基本功能" class="headerlink" title="bash 基本功能"></a>bash 基本功能</h3><h4 id="1-1-history-历史命令"><a href="#1-1-history-历史命令" class="headerlink" title="1.1.history-历史命令"></a>1.1.history-历史命令</h4><ul><li><p>语法：history [选项] [历史命令保存文件]</p></li><li><p><strong>history -c ~/.bash_history</strong> : 清除历史命令</p></li><li><p><strong>history -w /root/.bash_history</strong> : 将缓存中的命令写入保存文件 ~/.bash_history(默认历史命令保存文件)</p></li><li><p>默认保存1000条 ；在/etc/profile中的HISTSIZE值进行修改</p></li><li><p>历史命令的调用</p><ul><li>上下箭头</li><li>!n：执行第n条历史命令</li><li>!!：执行上一条命令</li><li>!string：执行最后一次执行的包含string的命令</li></ul></li></ul><h4 id="1-2-tab键"><a href="#1-2-tab键" class="headerlink" title="1.2.tab键"></a>1.2.tab键</h4><ul><li>补全功能</li></ul><h4 id="1-3-alias-别名"><a href="#1-3-alias-别名" class="headerlink" title="1.3.alias-别名"></a>1.3.alias-别名</h4><ul><li><p>alias 别名=’原命令’</p><p>alias ls=’ls –color=auto’</p></li><li><p>alias 查询命令别名</p></li><li><p>命令执行顺序</p><ul><li>第一先执行绝对路径或相对路径的命令，~/bin/ls</li><li>第二执行别名</li><li>第三执行Bash内部命令，cd</li><li>第四执行$PATH环境变量找到的第一个命令</li></ul></li><li><p>别名永久生效</p><ul><li>/root/.bashrc</li></ul></li><li><p>删除别名</p><ul><li>unalias  别名</li></ul></li></ul><h4 id="1-4-linux中的快捷键"><a href="#1-4-linux中的快捷键" class="headerlink" title="1.4.linux中的快捷键"></a>1.4.linux中的快捷键</h4><img src="/2022/04/16/linux-shell-bash/%E5%BF%AB%E6%8D%B7%E9%94%AE.png" class=""><h4 id="1-5-输入输出重定向"><a href="#1-5-输入输出重定向" class="headerlink" title="1.5. 输入输出重定向"></a>1.5. 输入输出重定向</h4><ul><li>标准输出重定向<ul><li><p>命令 &gt; 文件</p><p>将命令输入到指定文件中，如果文件不存在则创建文件，输入内容将文件原内容覆盖。</p></li><li><p>命令 &gt;&gt; 文件 </p><p>将命令输入到指定文件中，如果文件不存在则创建文件，输入内容将输入到文件末尾；</p></li><li><p>如果操作失误将两个&gt;输成一个，那将会覆盖不需覆盖的文件</p><ul><li><p>set -C 禁止覆盖命令</p></li><li><p>set +C 解除覆盖命令</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# set -C [root@localhost ~]# echo 789 &gt; a.txt-bash: a.txt: 无法覆盖已存在的文件[root@localhost ~]# set +C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li>标准错误输出重定向<ul><li>错误命令 2&gt; 文件 </li><li>错误命令 2&gt;&gt; 文件</li></ul></li></ul><h4 id="1-6-多命令执行顺序"><a href="#1-6-多命令执行顺序" class="headerlink" title="1.6.多命令执行顺序"></a>1.6.多命令执行顺序</h4><ul><li><p>; </p><ul><li>命令1;命令2；命令3</li><li>命令顺序执行</li><li>命令出现错误互不影响</li></ul></li><li><p>&amp;&amp; ：</p><ul><li>命令1;命令2；命令3</li><li>命令1正确命令2才能执行</li></ul></li><li><p>||：</p><ul><li>命令1;命令2；命令3</li><li>命令1执行，命令2不执行</li><li>命令1不执行，命令2执行</li></ul></li></ul><h4 id="1-7-管道符"><a href="#1-7-管道符" class="headerlink" title="1.7.管道符|"></a>1.7.管道符|</h4><ul><li><p>命令1 | 命令2</p></li><li><p>命令1的执行结果作为命令2的操作对象</p></li><li><p>和grep使用举例</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# ifconfig | grep netmask          inet 192.168.20.128  netmask 255.255.255.0  broadcast 192.168.20.255        inet 127.0.0.1  netmask 255.0.0.0&#x2F;&#x2F;ifconfig的内容作为grep命令的操作对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="1-8-通配符"><a href="#1-8-通配符" class="headerlink" title="1.8.通配符"></a>1.8.通配符</h4><img src="/2022/04/16/linux-shell-bash/%E9%80%9A%E9%85%8D%E7%AC%A61.png" class=""><img src="/2022/04/16/linux-shell-bash/%E9%80%9A%E9%85%8D%E7%AC%A62.png" class="">]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-变量</title>
      <link href="/2022/04/16/linux-bash-bianliang/"/>
      <url>/2022/04/16/linux-bash-bianliang/</url>
      
        <content type="html"><![CDATA[<h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h3><h4 id="1-1-bash-变量"><a href="#1-1-bash-变量" class="headerlink" title="1.1.bash 变量"></a>1.1.bash 变量</h4><ul><li><p>什么是变量</p><p>变量是计算内存的单元，其中存放的值可以改变，当Shell脚本需要保存一些信息时，如一个文件名或是一个数字，就把它存放在一个变量中。每个变量有一个名字，所以很容易引用它。使用变量可以保存有用的信息，是系统获知用户相关设置，变量也可以用于保存暂时信息。</p></li><li><p>变量分类</p><ul><li>用户自定义变量</li><li>环境变量</li><li>位置参数变量</li><li>预定义变量</li></ul></li></ul><h4 id="1-2-变量命名规则"><a href="#1-2-变量命名规则" class="headerlink" title="1.2.变量命名规则"></a>1.2.变量命名规则</h4><ul><li>由字母、数字和下划线组成，不能以数字开头</li><li>变量默认是字符串类型，如果要需要其他类型，需要指定</li></ul><h4 id="1-3-设置变量"><a href="#1-3-设置变量" class="headerlink" title="1.3.设置变量"></a>1.3.设置变量</h4><ul><li>变量和值之间由等号连接，等号两侧不能有空格，如果变量的值有空格，需要用双或单引号引住</li><li>变量中的值可以用 \ 转义</li><li>变量叠加<ul><li>对变量值叠加，变量需要 ”$变量名”或${变量名}引用</li><li>name=lz ; 叠加：name=”$name”p</li><li>name=lz ；叠加： name=${name}p</li><li>结果： neme=lzp</li></ul></li><li> 把命令的值作为变量值赋予给变量，则命令需要用反引号或$()包含命令；</li><li>建议将环境变量大写；</li></ul><h3 id="2-用户自定义变量"><a href="#2-用户自定义变量" class="headerlink" title="2.用户自定义变量"></a>2.用户自定义变量</h3><ul><li>变量定义<ul><li>name=lzp</li></ul></li><li>变量引用<ul><li>echo $name</li></ul></li><li>变量查看<ul><li>set</li></ul></li><li>变量删除<ul><li>unset 变量名</li></ul></li></ul><h3 id="3-环境变量"><a href="#3-环境变量" class="headerlink" title="3.环境变量"></a>3.环境变量</h3><p>变量中主要保存的是和系统操作环境相关的数据</p><p>用户变量只在当前shell中执行，环境变量在当前shell及其子shell都可执行，如果将环境变量写入配置文件中，则全部shell均可使用</p><ol><li>父shell与子shell</li></ol>  <pre class="line-numbers language-none"><code class="language-none">进入命令界面，即进入标准bash shell [root@~]#bash 输入bash,代表在当前shell中，再进入一个shell[root@~]#csh 再次进入[root@~]#yum install psmisc; 下载pstree命令包[root@~]#pstree 查询结果：login-bash-bash-csh-pstree则刚进入的界面为父shell,每个接下来的shell,均是传承关系；[root@~]:exit ：退出最后一个shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>定义环境变量</li></ol><ul><li>export 变量=变量值</li><li>env ；查询环境变量</li><li>unset 变量名 ；删除变量</li></ul><ol start="3"><li>系统常见环境变量</li></ol><ul><li>$PATH<ul><li>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</li><li>PATH存放的是系统查找命令的路径，输入ls命令，系统会在PATH变量中的路径中依次搜索；</li><li>PATH=”$PATH”:/root (PATH变量叠加)</li></ul></li></ul><ol start="4"><li>环境变量配置文件</li></ol><ul><li><p>写入环境变量配置文件中的变量才会永久生效</p></li><li><p>source命令</p><ul><li>source 配置文件  或   .配置文件 都会让配置文件不用重启就能生效</li></ul></li><li><p>常见的环境变量配置文件</p><ul><li>学完shell编程之后，再来学习配置文件内具体内容</li></ul></li></ul><h3 id="4-位置参数变量"><a href="#4-位置参数变量" class="headerlink" title="4.位置参数变量"></a>4.位置参数变量</h3><img src="/2022/04/16/linux-bash-bianliang/%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%8F%98%E9%87%8F.png" class=""><ul><li>相当于形参的作用，在调用脚本的时候输入变量值，传到脚本之中</li></ul><pre class="line-numbers language-none"><code class="language-none">#脚本文件：#!&#x2F;#!&#x2F;bin&#x2F;bashecho $0  #代表命令本身echo $1 #代表第一个参数echo $2 #代表第二个参数执行脚本：[root@~]# chomd 755 &#x2F;sh&#x2F;test.sh hello world &#x2F;&#x2F;传入两个参数： hello 和 world[root@~]# .&#x2F;test.sh执行结果:.&#x2F;test.shhelloworld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>$@和$#</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bashfor i in &quot;$*&quot;doecho $idonefor y in &quot;$@&quot;do echo $ydone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">输入命令： [root@~].&#x2F;test.sh hello world执行结果：hello worldhelloworld <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-预定义变量"><a href="#5-预定义变量" class="headerlink" title="5.预定义变量"></a>5.预定义变量</h3><img src="/2022/04/16/linux-bash-bianliang/%E9%A2%84%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F.png" class=""><ul><li>命令执行的 || 和 &amp;&amp; 正确与否，就是以$?命令判定的</li></ul><h4 id="6-接受键盘输入"><a href="#6-接受键盘输入" class="headerlink" title="6.接受键盘输入"></a>6.接受键盘输入</h4><ul><li>read [选项] [变量名]<ul><li>-p “提示消息” ：在等待read输入时，输出提示信息</li><li>-t 秒数 ：指定输入的等待时间</li><li>-n 字符数：read命令就会只接受n个字符</li><li> -s : 隐藏输入的数据，适于机密信息的输入</li></ul></li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#!&#x2F;bin&#x2F;bashread -t 20 -p &quot;please input your name &quot; name  #将键盘键入的变量赋值给nameecho &quot;Name is $name&quot;read -t 10 -p &quot;please input your age &quot; -s age #将键盘键入的变量赋值给ageecho &quot;Age is $age&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-数值运算和运算符"><a href="#7-数值运算和运算符" class="headerlink" title="7.数值运算和运算符"></a>7.数值运算和运算符</h4><ul><li><p>声明变量类型</p><ul><li><p>declare [+/-] [选项]  变量名</p><p>-：给变量设定类型属性</p><p>+：取消变量的类型属性</p><p>-i：将变量声明为整数型</p><p>-x：将变量声明为环境变量</p><p>-p：显示指定变量的被声明的类型</p></li></ul></li><li><p>数值运算</p><ul><li><p>方法一: 将代表结果的变量定义为数值类型</p><pre class="line-numbers language-none"><code class="language-none">[root@~]#a&#x3D;1[root@~]#b&#x3D;2[root@~]#declare -i c&#x3D;$a+$b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>方法二：运算工具</p></li><li><p>方法三：运算符</p><ul><li>$((运算式))</li><li>$[运算式]</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>log</title>
      <link href="/2022/04/15/log/"/>
      <url>/2022/04/15/log/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux-wenjian</title>
      <link href="/2022/04/15/linux-wenjian/"/>
      <url>/2022/04/15/linux-wenjian/</url>
      
        <content type="html"><![CDATA[<h2 id="分区与文件系统"><a href="#分区与文件系统" class="headerlink" title="分区与文件系统"></a>分区与文件系统</h2><ul><li><p>在Linux系统中，每个设备都被当做一个文件来对待；在linux系统中，磁盘名为 /dev/sd[a-p]</p></li><li><p>linux目录树</p><img src="/2022/04/15/linux-wenjian/%E7%9B%AE%E5%BD%95%E6%A0%91.png" class=""></li><li><p>系统分区</p><img src="/2022/04/15/linux-wenjian/%E5%88%86%E5%8C%BA%E5%9B%BE.png" class=""><ul><li>系统分区可分为主分区和扩展分区，其中主分区和扩展分区数量总和不超过4；扩展分区又可分为多个逻辑分区。</li><li>分区完毕后要进行格式化，其中扩展分区不能格式化和放入数据，逻辑分区可以；</li></ul></li><li><p>磁盘格式化</p><p>磁盘格式化就是为分区结束的磁盘创建文件系统；</p></li><li><p>挂载</p><img src="/2022/04/15/linux-wenjian/%E6%8C%82%E8%BD%BD%E5%9B%BE.png" class=""><p>挂载就是利用一个目录当成进入点，将磁盘内的内容放置该目录下，进入该目录可以读取分区内容；</p><p>如上图，磁盘1挂载在根目录下，磁盘2挂载在/home下，则/home下的数据存在分区2中，其余的存在分区1中；</p><p>挂载命令</p><ul><li>mount [-t 文件系统] [-L 卷标名] [-o 特殊选项] 设备文件名 挂载点</li><li>-t 文件系统 ：加入文件系统来指定挂载的类型</li><li>-L 卷标名 ：挂载指定卷标的分区</li><li>-o ：可以指定改在的额外选型</li></ul></li></ul><h3 id="文件系统命令"><a href="#文件系统命令" class="headerlink" title="文件系统命令"></a>文件系统命令</h3><h4 id="文件系统查看"><a href="#文件系统查看" class="headerlink" title="文件系统查看"></a>文件系统查看</h4><ul><li><p>df [选项] [挂载点]</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# df文件系统          1K-块    已用     可用 已用% 挂载点&#x2F;dev&#x2F;sda5      18706432 1621312 17085120    9% &#x2F;devtmpfs         931624       0   931624    0% &#x2F;devtmpfs            941444       0   941444    0% &#x2F;dev&#x2F;shmtmpfs            941444    8812   932632    1% &#x2F;runtmpfs            941444       0   941444    0% &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;dev&#x2F;sda3       1020580   33128   987452    4% &#x2F;home&#x2F;dev&#x2F;sda1        201380  120632    80748   60% &#x2F;boottmpfs            188292       0   188292    0% &#x2F;run&#x2F;user&#x2F;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>-a：显示所有文件系统信息</p></li><li><p>-h：人性化显示</p></li><li><p>-k：kb显示</p></li><li><p>-m：m显示</p></li><li><p>-T：显示文件系统类型</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# df -T文件系统       类型        1K-块    已用     可用 已用% 挂载点&#x2F;dev&#x2F;sda5      xfs      18706432 1621484 17084948    9% &#x2F;devtmpfs       devtmpfs   931624       0   931624    0% &#x2F;devtmpfs          tmpfs      941444       0   941444    0% &#x2F;dev&#x2F;shmtmpfs          tmpfs      941444    8812   932632    1% &#x2F;runtmpfs          tmpfs      941444       0   941444    0% &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;dev&#x2F;sda3      xfs       1020580   33128   987452    4% &#x2F;home&#x2F;dev&#x2F;sda1      xfs        201380  120632    80748   60% &#x2F;boottmpfs          tmpfs      188292       0   188292    0% &#x2F;run&#x2F;user&#x2F;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="目录文件大小"><a href="#目录文件大小" class="headerlink" title="目录文件大小"></a>目录文件大小</h4></li><li><p>du [选项] [目录或文件名]</p><ul><li>-a ：显示每个子文件的磁盘占用情况；默认只显示子目录。</li><li>-h ：人性化显示</li><li>-s ：统计总用量，不列出子目录和文件</li></ul><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# du -sh &#x2F;usr1.3G&#x2F;usr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-service</title>
      <link href="/2022/04/15/linux-service/"/>
      <url>/2022/04/15/linux-service/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux服务的分类"><a href="#Linux服务的分类" class="headerlink" title="Linux服务的分类"></a>Linux服务的分类</h3><ul><li>RPM包默认安装的服务<ul><li>独立的服务</li><li>基于xinetd服务</li></ul></li><li>源码包安装的服务</li></ul><h3 id="RPM独立服务"><a href="#RPM独立服务" class="headerlink" title="RPM独立服务"></a>RPM独立服务</h3><h4 id="1-查询已安装的服务"><a href="#1-查询已安装的服务" class="headerlink" title="1.查询已安装的服务"></a>1.查询已安装的服务</h4><ul><li>RPM包安装的服务<ul><li>chkconfig –list ：列出chkconfig 所知道的所有服务情况</li></ul></li><li>源码包安装的服务<ul><li>查看服务安装的位置，一般在/usr/local/下</li></ul></li></ul><h4 id="2-RMP服务文件通常位置"><a href="#2-RMP服务文件通常位置" class="headerlink" title="2.RMP服务文件通常位置"></a>2.RMP服务文件通常位置</h4><ul><li>/etc/init.d/：启动脚本位置</li><li>/etc/sysconfig/：初始化环境配置文件位置</li><li>/etc/：配置文件位置</li><li>/etc/xinetd.config：xinetd配置文件</li><li>/etc/xinetd.d/：xinetd服务启动文本</li><li>/var/lib/：服务产生的数据</li><li>/var/log/：日志</li></ul><h4 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3.启动服务"></a>3.启动服务</h4><ul><li>通过服务绝对路径 + start|stop|status|restart</li><li>service 独立服务名 + start|stop|status|restart  （service命令为Redhat专有）</li></ul><h4 id="4-自启动"><a href="#4-自启动" class="headerlink" title="4.自启动"></a>4.自启动</h4><ul><li>chkconfig [–level 运行级别] [独立服务名] [on|off]</li><li>修改/etc/rc.d/rc.local文件 (推荐)<ul><li>Linux启动后会执行这个配置文件里的命令，将服务启动命令写入这个配置文件即可自启</li></ul></li><li>使用ntsysv管理 (Redhat专属)</li></ul><h3 id="源码包安装服务"><a href="#源码包安装服务" class="headerlink" title="源码包安装服务"></a>源码包安装服务</h3><ul><li>绝对路径 + start|stop</li><li>通过修改/etc/rc.d/rc.local自启动</li></ul><h3 id="chkconfig和systemctl命令"><a href="#chkconfig和systemctl命令" class="headerlink" title="chkconfig和systemctl命令"></a>chkconfig和systemctl命令</h3><p>chkconfig是centos6的管理服务命令</p><h4 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h4><p>systemctl命令是centos7的命令，是chkconfig和service的结合</p><ul><li>systemctl start name.service：启动服务</li><li>systemctl stop name.service ：停止服务</li><li>systemctl restart name.service ：重启服务</li><li>systemctl reload name.service：重载服务</li><li>systemctl status name.service：查看服务状态</li><li>systemctl enable name.service：服务自启动激活</li><li>systemctl disabel httpd.service：服务自启动禁止</li><li>systemctl kill httpd：杀死服务</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-权限</title>
      <link href="/2022/04/13/linux-quanxian/"/>
      <url>/2022/04/13/linux-quanxian/</url>
      
        <content type="html"><![CDATA[<h3 id="一、ACL权限-访问控制列表"><a href="#一、ACL权限-访问控制列表" class="headerlink" title="一、ACL权限:访问控制列表"></a>一、ACL权限:访问控制列表</h3><img src="/2022/04/13/linux-quanxian/acl.png" class=""><h4 id="查看ACL命令"><a href="#查看ACL命令" class="headerlink" title="查看ACL命令"></a>查看ACL命令</h4><ul><li><p>getfacl 文件名：查看ACL权限</p><p>getfacl a.txt</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#file: a.txt</span><span class="token comment">#owner: root</span><span class="token comment">#group: root</span>user::rw-user:zhr:r-xgroup::r--mask::r-xother::r--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="设定ACL命令"><a href="#设定ACL命令" class="headerlink" title="设定ACL命令"></a>设定ACL命令</h4><ul><li>setfacl [选项] [文件名]<ul><li>-m：设定ACL权限</li><li>-x：删除指定的ACL权限</li><li>-b：删除所有的ACL权限</li><li>d：设定默认ACL权限</li><li>-k：删除默认ACL权限</li><li>-R：递归设定ACL权限</li></ul></li></ul><h4 id="给用户和用户组添加ACL权限"><a href="#给用户和用户组添加ACL权限" class="headerlink" title="给用户和用户组添加ACL权限"></a>给用户和用户组添加ACL权限</h4><ul><li>setfacl -m <strong>u:user_name:rx</strong> /project<ul><li>以  u:需要分配权限的用户名:权限  的格式分配</li></ul></li><li>setfacl -m <strong>g:group_name:rx</strong> /project</li></ul><h4 id="最大有效权限值"><a href="#最大有效权限值" class="headerlink" title="最大有效权限值"></a>最大有效权限值</h4><ul><li>mask:rwx<ul><li>我们赋予用户的ACL权限需要与mask权限”相与”得到用户真正的权限</li><li>r | r = r  </li><li>r | - = -</li><li>-| - = -</li></ul></li><li>修改最大有效权限<ul><li>setfacl -m m:rx 文件名</li></ul></li></ul><h4 id="删除ACL权限"><a href="#删除ACL权限" class="headerlink" title="删除ACL权限"></a>删除ACL权限</h4><ul><li>setfacl -x u:用户名 文件名<ul><li>删除用户的ACL权限</li></ul></li><li>setfacl -x g:组名 文件名1<ul><li>删除用户组的ACL权限</li></ul></li><li>setfacl -b 文件名<ul><li>删除文件的所有ACL权限</li></ul></li></ul><h4 id="递归ACL权限"><a href="#递归ACL权限" class="headerlink" title="递归ACL权限"></a>递归ACL权限</h4><ul><li>给父目录设定ACL权限时，其所有子目录及子文件拥有相同的ACL权限</li><li>setfacl -m u:user_name:rx -R 文件名</li></ul><h4 id="默认ACL权限"><a href="#默认ACL权限" class="headerlink" title="默认ACL权限"></a>默认ACL权限</h4><ul><li><p>默认ACL权限的作用是给父目录设定默认的ACL权限，父目录中新建的子文件都会继承父目录的ACL权限，原来的文件不受影响。</p></li><li><p>setfacl -m d:u:用户名:权限 目录名</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost ~]# setfacl -m d:u:zhr:rw japan  &#x2F;&#x2F;设置zhr对目录Japan的默认权限[root@localhost ~]# setfacl -m d:u:chy:w japan  &#x2F;&#x2F;设置chy对目录Japan的默认权限[root@localhost ~]# mkdir japan&#x2F;cjk  &#x2F;&#x2F;新建文件夹[root@localhost ~]# touch japan&#x2F;cls.av &#x2F;&#x2F;新建文件[root@localhost ~]# getfacl japan&#x2F;cjk &#x2F;&#x2F;查看新建的文件ACL权限# file: japan&#x2F;cjk# owner: root# group: rootuser::rwxuser:zhr:rw-  user:chy:-w-group::r-xmask::rwxother::r-xdefault:user::rwxdefault:user:zhr:rw- &#x2F;&#x2F;继承默认权限default:user:chy:-w- default:group::r-xdefault:mask::rwxdefault:other::r-x[root@localhost ~]# getfacl japan&#x2F;cls.av# file: japan&#x2F;cls.av# owner: root# group: rootuser::rw-user:zhr:rw- &#x2F;&#x2F;继承权限user:chy:-w- &#x2F;&#x2F;继承权限group::r-xmask::rw-other::r--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、文件特殊权限"><a href="#二、文件特殊权限" class="headerlink" title="二、文件特殊权限"></a>二、文件特殊权限</h3><h4 id="SetUID"><a href="#SetUID" class="headerlink" title="SetUID"></a>SetUID</h4><ul><li><p>只有可以执行的二进制程序才能设定SUID权限</p></li><li><p>命令执行者要对该程序拥有x执行权限</p></li><li><p>命令执行者在执行该程序时获得该程序文件属主的身份</p></li><li><p>SetUID权限只在该程序执行过程中有效</p></li><li><p>例如修改密码要修改/etc/shadow,但普通用户没有权限，但/usr/bin/passwd拥有SUID权限，当普通用户执行passwd命令时普通用户获得root身份。</p></li><li><p>/usr/bin/passwd权限 ：-rwsr-xr-x</p></li><li><p>设置SUID</p><ul><li>chmod 4755 文件名</li><li>chmod u+s 文件名</li></ul></li><li><p>取消</p><ul><li>chmod 755 文件名  重新指回来</li><li>chmod u-s 文件名</li></ul></li></ul><h4 id="SetGID"><a href="#SetGID" class="headerlink" title="SetGID"></a>SetGID</h4><ul><li><p>针对文件的作用</p><ul><li>只有可执行的二进制程序才能设置SGID权限</li><li>命令执行者对该程序有x权限</li><li>命令执行者在执行程序的时候，组身份升级为该二进制文件的所属组</li><li>SGID只在程序执行过程中有效</li><li>示例：普通用户执行locate命令需要查询mlocate.db,但普通用户对mloacate.db无任何权限，但locate有SGID权限，普通用户在执行这个命令的时候会获得组身份。</li></ul></li><li><p>针对目录的作用</p><ul><li>普通用户必须对此目录拥有r和x权限，才能进入该目录</li><li>普通用户在此目录中的有效组会变成此目录的属组</li><li>若普通用户对此目录拥有w权限时，新建的文件的默认数组是这个目录的数组</li></ul></li><li><p>设置</p><ul><li>chmod 2755 文件</li><li>chmod g+s 文件</li></ul></li><li><p>取消</p><ul><li>chmod 755 文件</li><li>chmod g-s 文件</li></ul></li></ul><h4 id="Sticky-BIT"><a href="#Sticky-BIT" class="headerlink" title="Sticky BIT"></a>Sticky BIT</h4><ul><li><p>作用</p><ul><li>只对目录有效</li><li>普通用户对目录有w和x权限</li><li>对目录赋予SBIT，除了root可以删除所有文件，普通用户就算有w权限，也只可以删除自己创建的文件，不能删除其他用户的文件</li></ul></li><li><p>设置SBIT</p><ul><li>chmod  1755 目录名</li><li>chmod  o+t 目录名 </li></ul></li><li><p>取消SBIT</p><ul><li>chmod 755 目录名</li><li>chmod o-t 目录名</li></ul></li></ul><h3 id="chattr-文件系统属性权限"><a href="#chattr-文件系统属性权限" class="headerlink" title="chattr  文件系统属性权限"></a>chattr  文件系统属性权限</h3><ul><li>命令格式<ul><li>chattr [+-=] [选项] 文件或目录名</li><li>+：增加；-：删除；=：等于；</li></ul></li><li>选项<ul><li>i：对文件设置i属性，即不可对文件删除改名不能添加和修改数据；对目录设置，只能修改目录下的文件的数据，但不允许建立和删除文件。</li><li>a：对文件只能增加数据，不能删除和修改数据；对目录设置，只允许在目录中建立和修改文件，不允许删除。</li></ul></li></ul><p>查看文件系统属性</p><ul><li>lsattr  [选项]  文件名<ul><li>-a : 显示所有文件和目录</li><li>-d : 若目标是目录，仅列出目录本身的属性，而不是子文件的</li></ul></li></ul><h4 id="sudo权限"><a href="#sudo权限" class="headerlink" title="sudo权限"></a>sudo权限</h4><ul><li><p>root将一些只有root用户执行的命令赋予给普通用户执行</p></li><li><p>visudo-赋予用户权限命令</p><ul><li>实际修改的是 /etc/sudoers 文件</li><li>/etc/sudoers文件不能用vim修改，只能用visudo命令修改</li><li>visudo是修改这个文件的专属命令</li></ul></li><li><p>文件修改规则</p><p>root ALL=(ALL)  ALL</p><p>被授权用户 被管理主机的地址 授权命令</p><p>%wheel ALL=(ALL) ALL</p><p>%组名 被管理主机的地址=(可使用的身份) 授权命令</p><pre class="line-numbers language-none"><code class="language-none">zhr ALL&#x3D;(ALL) &#x2F;sbin&#x2F;shutdown -r now<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>普通用户执行</p><ul><li>sudo -l：查看可以执行的sudo命令 </li></ul><pre class="line-numbers language-none"><code class="language-none">用户 zhr 可以在 localhost 上运行以下命令：    (ALL) &#x2F;sbin&#x2F;shutdown -r now<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>命令执行<ul><li>sudo /sbin/shutdown -r now</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell-biancheng</title>
      <link href="/2022/04/12/shell-biancheng/"/>
      <url>/2022/04/12/shell-biancheng/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用户相关配置文件</title>
      <link href="/2022/04/12/linux-userdocument/"/>
      <url>/2022/04/12/linux-userdocument/</url>
      
        <content type="html"><![CDATA[<h3 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h3><ul><li><p>字段</p><p>root:×:0:0:root:/root:/bin/bash</p><ul><li>用户名称 </li><li>密码标识；是否有密码</li><li>UID<ul><li> 超级用户 ：0</li><li>系统伪用户 ：1-499</li><li>普通用户：500-65535</li></ul></li><li>GID 初始组ID<ul><li>初始组：添加一个用户则默认添加一个初始组，每个用户只能有一个初始组，一般以一个和用户名相同的组名为初始组，不建议修改。</li><li>附加组：除初始组之外加入的其他的组</li></ul></li><li>用户说明</li><li>家目录<ul><li>超级用户：/root</li><li>普通用户：/home/用户名</li></ul></li><li>登入之后的shell</li></ul></li></ul><h3 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h3><ul><li><p>字段</p><p>root:$6$l8KBXZI3oPSd1XTs$cLz3.ZLPUucB67pG87MbOpPjzUumLLt3PbFhdz.IiN6ETB5OeaOxvphCl1Xmwr/aJODWlId3tlGxlgc3/GusJ1::0:99999:7:::</p><ul><li>用户名</li><li>加密密码<ul><li>采用SHA512散列加密算法</li><li>!!或*代表没有密码，不能登入</li></ul></li><li>最后一次修改日期<ul><li>1970年1月1日为标准时间，每过一天时间戳加一；</li></ul></li><li>两次密码的修改间隔时间</li><li>密码有效期</li><li>密码修改到期前的警告天数</li><li>密码过期后的宽限天数<ul><li>0：立即失效</li><li>-1：永久不会失效</li></ul></li><li>账号失效时间<ul><li>用时间戳表示</li></ul></li><li>保留字段</li></ul></li></ul><h3 id="etc-group-组信息文件"><a href="#etc-group-组信息文件" class="headerlink" title="/etc/group 组信息文件"></a>/etc/group 组信息文件</h3><ul><li>字段<ul><li>root:×:0:</li><li>组名</li><li>组密码标志</li><li>GID</li><li>组中附加用户</li></ul></li></ul><h3 id="etc-gshadow-组密码信息"><a href="#etc-gshadow-组密码信息" class="headerlink" title="/etc/gshadow 组密码信息"></a>/etc/gshadow 组密码信息</h3><ul><li>字段<ul><li>root:::</li><li>组名</li><li>组密码</li><li>组管理员成员</li><li>组中附加成员</li></ul></li></ul><h3 id="用户家目录"><a href="#用户家目录" class="headerlink" title="用户家目录"></a>用户家目录</h3><ul><li>/home/user_name<ul><li>普通用户</li></ul></li><li>/root/ <ul><li>超级用户</li></ul></li><li>将普通用户升级为超级用户家目录不变。</li></ul><h3 id="用户邮箱目录"><a href="#用户邮箱目录" class="headerlink" title="用户邮箱目录"></a>用户邮箱目录</h3><ul><li>/var/spool/mail/user_name</li></ul><h3 id="用户模板"><a href="#用户模板" class="headerlink" title="用户模板"></a>用户模板</h3><ul><li>etc/skel</li><li>模板文件将会创建在新用户的家目录下</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户和用户组管理</title>
      <link href="/2022/04/12/linux-user-command/"/>
      <url>/2022/04/12/linux-user-command/</url>
      
        <content type="html"><![CDATA[<h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h3 id="1、useradd"><a href="#1、useradd" class="headerlink" title="1、useradd"></a>1、useradd</h3><ul><li>useradd [选项] [user_name]<ul><li>-u UID ：指定UID</li><li>-d 家目录 ：指定家目录</li><li>-c 用户说明 ：指定用户说明</li><li>-g 组名 ：指定用户初始组</li><li>-G 组名 ：指定用户附加组</li><li>-s shell ：指定登入shell</li></ul></li></ul><h3 id="2、passwd"><a href="#2、passwd" class="headerlink" title="2、passwd"></a>2、passwd</h3><ul><li>passwd [选项] [user_name]<ul><li>-S：查询用户密码状态，仅root用户；</li><li>-l：暂时锁定用户，仅root</li><li>-u：解锁用户，仅root</li><li>–stdin：通过管道符输出的数据作为用户的密码<ul><li>用于shell编程</li></ul></li></ul></li></ul><h3 id="3、usermod-修改用户信息"><a href="#3、usermod-修改用户信息" class="headerlink" title="3、usermod-修改用户信息"></a>3、usermod-修改用户信息</h3><ul><li>usermod [选项] [user_name]<ul><li>-u UID :修改用户的UID</li><li>-c 用户说明：修改用户的说明信息</li><li>-G 组名 ：修改用户附加组</li><li>-L ：临时锁定用户</li><li>-U：解锁用户锁定</li></ul></li></ul><h3 id="4、chage-修改用户密码状态"><a href="#4、chage-修改用户密码状态" class="headerlink" title="4、chage-修改用户密码状态"></a>4、chage-修改用户密码状态</h3><ul><li>chage [选项] 用户名<ul><li>-l ：列出用户的详细密码状态</li><li>-d 日期 ：修改密码最后一次更改日期</li><li>-m 天数 ：两次密码修改时间间隔</li><li>-M 天数 ：密码有效天数</li><li>-W 天数 ：密码过期前警告天数</li><li>-I 天数 ：密码过后宽限天数</li><li>-E 日期 ：账号失效时间</li></ul></li></ul><h3 id="5、userdel-删除用户"><a href="#5、userdel-删除用户" class="headerlink" title="5、userdel-删除用户"></a>5、userdel-删除用户</h3><ul><li><p>userdel -r 用户名 </p><p>-r : 删除用户组及其家目录</p></li></ul><h3 id="6、su-切换用户"><a href="#6、su-切换用户" class="headerlink" title="6、su-切换用户"></a>6、su-切换用户</h3><ul><li>su<ul><li>-：代表连带用户的环境变量一起切换</li><li>-c：仅执行一次命令，不切换身份</li></ul></li></ul><h3 id="7、id-查看UID"><a href="#7、id-查看UID" class="headerlink" title="7、id -查看UID"></a>7、id -查看UID</h3><ul><li>id 用户名</li></ul><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h3><h3 id="1、groupadd"><a href="#1、groupadd" class="headerlink" title="1、groupadd"></a>1、groupadd</h3><ul><li>groupadd [选项] 组名<ul><li>-g GID ：指定组ID</li></ul></li></ul><h3 id="2、groupmod"><a href="#2、groupmod" class="headerlink" title="2、groupmod"></a>2、groupmod</h3><ul><li>groupadd [选项]  原组名<ul><li>-g GID ：修改组ID</li><li>-n 新组名 ：修改组名</li></ul></li></ul><h3 id="3-groupdel"><a href="#3-groupdel" class="headerlink" title="3.groupdel"></a>3.groupdel</h3><ul><li>groupdel 组名</li><li>用户存在，则不能删除其初始组</li></ul><h3 id="4-gpasswd"><a href="#4-gpasswd" class="headerlink" title="4.gpasswd"></a>4.gpasswd</h3><ul><li>gpasswd 选项 组名</li><li>把用户加入组或从组中删除</li><li>-a 用户名：把用户加入组</li><li>-d 用户名：把用户从组中删除</li><li>可以直接修改配置文件来添加删除用户</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-rpm和yum</title>
      <link href="/2022/04/11/linux-rpm/"/>
      <url>/2022/04/11/linux-rpm/</url>
      
        <content type="html"><![CDATA[<p>linux的安装包主要包括源码包和二进制包(RPM包)</p><h3 id="rpm命令"><a href="#rpm命令" class="headerlink" title="rpm命令"></a>rpm命令</h3><h4 id="1-1-RPM包命名原则"><a href="#1-1-RPM包命名原则" class="headerlink" title="1.1.RPM包命名原则"></a>1.1.RPM包命名原则</h4><p>httpd-2.2.15-15.el6.centos. 1.i686.rpm</p><ul><li>httpd    软件包名</li><li>2.2.15.    软件版本</li><li>15    软件发布的次数</li><li>el6. centos    适合的Linux平台 </li><li>i686    适合的硬件平台</li><li>rpm    rpm包扩展名</li></ul><h4 id="1-2-依赖性"><a href="#1-2-依赖性" class="headerlink" title="1.2.依赖性"></a><strong>1.2.依赖性</strong></h4><ul><li>树形依赖 ：a-b-c </li><li>环形依赖 ：a-b-c-a</li><li>模块依赖 ：查询网站 <a href="http://www.rpmfind.net/">www.rpmfind.net</a></li></ul><h4 id="1-3-包名和包全名"><a href="#1-3-包名和包全名" class="headerlink" title="1.3.包名和包全名"></a><strong>1.3.包名和包全名</strong></h4><ul><li>包全名 ：httpd-2.2.15-15.el6.centos. 1.i686.rpm ；用于对未安装包的命令</li><li>包名 ：httpd ；用于对已安装包的命令</li></ul><h4 id="1-4-命令"><a href="#1-4-命令" class="headerlink" title="1.4.命令"></a>1.4.命令</h4><ul><li>安装 安装时需要的rpm包，可用linux光盘镜像iso文件使用(cd源)；读取光盘文件要将光盘挂载mount /dev/sr0 /mnt/cdrom;将光盘设备/dev/sr0挂载到/mnt/cdrom下<ul><li>rpm  -ivh 包全名</li><li>-i : 安装</li><li>-v : 显示详细信息</li><li>-h : 显示进度 </li></ul>rpm安装包之间的依赖需要手动安装解决，所以不建议以此法安装。</li><li>更新<ul><li>rpm -Uvh 包全名</li><li>-U：update</li></ul></li><li>卸载<ul><li>rpm -e 包名</li></ul></li><li>查询(常用)<ul><li>rpm -q 包名 ：查询是否安装 </li><li>rpm -qa ：all</li><li>rpm -qi 包名 ：查看软件信息</li><li>rpm -qip 包全名 ：查询未安装包的详细信息</li><li>rpm -ql 包名 ：文件安装位置</li><li>rpm -qlp 包全名 ： 文件应当安装位置，linux的文件安装位置通常是默认的；</li><li>rpm -qf 系统文件名 ：查询一个安装系统文件为哪个安装包</li><li>rpm -qR  包名 ：查询依赖性</li><li>rpm -qRp 包名 ：查询未安装包的依赖性</li></ul></li></ul><h3 id="yum网络源和cd源"><a href="#yum网络源和cd源" class="headerlink" title="yum网络源和cd源"></a>yum网络源和cd源</h3><ul><li><p>yum网络源</p><ul><li><p>只要可以连接公网，即默认连接官网yum网络源</p></li><li><p>所有的网络源</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost yum.repos.d]# ls &#x2F;etc&#x2F;yum.repos.dCentOS-Base.repo  CentOS-Debuginfo.repo  CentOS-Media.repo    CentOS-Vault.repoCentOS-CR.repo    CentOS-fasttrack.repo  CentOS-Sources.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>网络源文件</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost yum.repos.d]# vim CentOS-Base.repo # CentOS-Base.repo## The mirror system uses the connecting IP address of the client and the# update status of each mirror to pick mirrors that are updated to and# geographically close to the client.  You should use this for CentOS updates# unless you are manually picking other mirrors.## If the mirrorlist&#x3D; does not work for you, as a fall back you can try the # remarked out baseurl&#x3D; line instead.##[base]name&#x3D;CentOS-$releasever - Basemirrorlist&#x3D;http:&#x2F;&#x2F;mirrorlist.centos.org&#x2F;?release&#x3D;$releasever&amp;arch&#x3D;$basearch&amp;repo&#x3D;os&amp;infra&#x3D;$infra#baseurl&#x3D;http:&#x2F;&#x2F;mirror.centos.org&#x2F;centos&#x2F;$releasever&#x2F;os&#x2F;$basearch&#x2F;gpgcheck&#x3D;1gpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-CentOS-7#released updates [updates]name&#x3D;CentOS-$releasever - Updates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>[base]：容器名称，放在[]中</li><li>name：容器说明，可更改</li><li>mirrorlist：镜像站点</li><li>baseurl：yum源服务器地址</li><li>enabled：此容器是否生效，不写或enabled=1都是生效，enabled=0就是不生效</li><li>gpgcheck：如果是1指RPM的数字证书生效，如果是0则不生效</li><li>gpgkey：数字证书的公钥文件把偶保存位置。不用修改</li></ul></li><li><p>cd源</p><ul><li><p>使用cdyum源，首先让除了CentOS-Media.repo之外的网络源失效；可以将其他网络yum源的名字更改；</p></li><li><p>使用cd源，如上rpmcd源配置</p></li><li><p>配置CentOS-Media.repo</p><pre class="line-numbers language-none"><code class="language-none">[root@localhost yum.repos.d]# vim CentOS-Media.repo # CentOS-Media.repo##  This repo can be used with mounted DVD media, verify the mount point for#  CentOS-7.  You can use this repo and yum to install items directly off the#  DVD ISO that we release.## To use this repo, put in your DVD and use it with the other repos too:#  yum --enablerepo&#x3D;c7-media [command]#  # or for ONLY the media repo, do this:##  yum --disablerepo&#x3D;\* --enablerepo&#x3D;c7-media [command][c7-media]name&#x3D;CentOS-$releasever - Mediabaseurl&#x3D;file:&#x2F;&#x2F;&#x2F;mnt&#x2F;cdrom&#x2F;   #地址为你挂载的光盘目录       # file:&#x2F;&#x2F;&#x2F;media&#x2F;cdrom&#x2F;       # file:&#x2F;&#x2F;&#x2F;media&#x2F;cdrecorder&#x2F;gpgcheck&#x3D;1enabled&#x3D;0gpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-CentOS-7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h3 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h3><ul><li><p>yum list</p></li><li><p>yum search “关键词”</p></li><li><p>yum -y install 包名</p><ul><li>-y 自动回答yes</li></ul></li><li><p>yum -y update 包名 一定要跟包名，否则所有包都更新</p></li><li><p>yum -y remove 包名  尽量不要用，所有依赖自动卸载</p></li><li><p>yum grouplist</p></li><li><p>yum groupinstall 软件组名</p></li><li><p>yum groupremove 软件组名    </p></li></ul><h3 id="源码包"><a href="#源码包" class="headerlink" title="源码包"></a>源码包</h3><ul><li>安装C语言编译器</li><li>下载源码包</li><li>源码保存位置/usr/local/src;软件保存位置/usr/local</li><li>源码包解压缩，进入解压缩目录</li><li>执行./configure命令<ul><li>定义需要的功能选项 如：./configure –prefix=/usr/local/xxx</li><li>检测系统环境是否符合安装要求</li><li>把定义好的功能选型和检测环境信息都写入Makefile文件</li></ul></li><li>执行make</li><li>执行make install</li><li>启动 绝对路径 + start</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum</title>
      <link href="/2022/04/10/yum/"/>
      <url>/2022/04/10/yum/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux_vim</title>
      <link href="/2022/04/10/linux-vim/"/>
      <url>/2022/04/10/linux-vim/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-vim"><a href="#Linux-vim" class="headerlink" title="Linux-vim"></a>Linux-vim</h2><p>Vim是一个类似于 Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性。</p><p>基本上vi可以分为三种状态，一般模式，编辑模式，命令行模式，各模式的功能区分如下：</p><ul><li>一般命令模式：控制光标的移动，字符或行的删除，查找，复制粘贴。进入vim时，即为一般命令模式。</li></ul><ul><li><p>编辑模式：文字输入。由一般命令模式切换而来。</p></li><li><p>命令行模式：将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号。</p><img src="/2022/04/10/linux-vim/%E4%B8%89%E4%B8%AA%E6%A8%A1%E5%BC%8F.png" class=""><h3 id="一、一般命令模式"><a href="#一、一般命令模式" class="headerlink" title="一、一般命令模式"></a>一、一般命令模式</h3><h4 id="1-1-删除命令"><a href="#1-1-删除命令" class="headerlink" title="1.1.删除命令"></a>1.1.删除命令</h4><ul><li><strong>x</strong> : del ;<strong>X</strong> : Backspace ; </li><li><strong>dd</strong> : 删除(剪切)光标所在行 ； <strong>ndd</strong> ： 删除(剪切)光标(包括光标)下n行 ；</li><li><strong>dG</strong> : 删除(剪切)光标所在行到文件末尾内容 ；</li><li><strong>D</strong> : 删除(剪切)光标处到行尾的内容 ；</li><li><strong>:n1,n2d</strong> : 删除(剪切)行号n1至n2之间的内容 ；（命令行模式下）</li></ul><h4 id="1-2-复制、剪切和粘贴命令"><a href="#1-2-复制、剪切和粘贴命令" class="headerlink" title="1.2.复制、剪切和粘贴命令"></a>1.2.复制、剪切和粘贴命令</h4><ul><li><strong>yy</strong> : 复制光标所在行 ； nyy : 复制光标所在行向下n行 ；</li><li><strong>p</strong> : 将复制内容复制到光标下一行 ； <strong>P</strong> ： 将复制内容复制到光标上一行 ；</li><li>剪切命令如上删除命令 ；</li></ul><h4 id="1-3-转换为编辑模式命令"><a href="#1-3-转换为编辑模式命令" class="headerlink" title="1.3.转换为编辑模式命令"></a>1.3.转换为编辑模式命令</h4><ul><li><strong>a</strong> : 在光标所在字符后插入 ； <strong>A</strong> ：在光标所在行行尾插入 ；</li><li><strong>i</strong> : 在光标所在字符前插入 ； <strong>I</strong> ：在光标所在行行首插入 ；</li><li><strong>o</strong> : 在光标所在行下一行插入 ； <strong>O</strong> : 在光标所在行上一行插入 ；</li><li><strong>r</strong> : 进入替换模式，替换光标所在字符一次 ； <strong>R</strong> : 一直替换 ；</li></ul><h4 id="1-4-撤销"><a href="#1-4-撤销" class="headerlink" title="1.4.撤销"></a>1.4.撤销</h4><ul><li><strong>u</strong> : 撤销；</li></ul><h4 id="1-5-定位命令"><a href="#1-5-定位命令" class="headerlink" title="1.5.定位命令"></a>1.5.定位命令</h4><ul><li><strong>gg</strong> :  定位到第一行 ；</li><li><strong>G</strong> ：定位到最后一行 ；</li><li><strong>0</strong> ：移至行首 ；</li><li><strong>$</strong> ：移至行尾 ；</li><li><strong>n[Enter]</strong> :  向下移动n行 ； </li></ul><h4 id="1-6-查找替换命令"><a href="#1-6-查找替换命令" class="headerlink" title="1.6.查找替换命令"></a>1.6.查找替换命令</h4><ul><li><strong>/</strong> :  光标向下查找某字符 ；<strong>？</strong> ：光标向上查找某字符 ；<strong>n</strong> :  重复上一个查找命令 ；</li><li><strong>:%S/old/new/g</strong> :  全文查找old并全部替换为new ；**:n1,n2s/old/new/c** :  将n1至n2行内的old换成new ,并进行询问 ;</li></ul><h3 id="二、命令行模式"><a href="#二、命令行模式" class="headerlink" title="二、命令行模式"></a>二、命令行模式</h3><h4 id="2-1-保存及退出命令"><a href="#2-1-保存及退出命令" class="headerlink" title="2.1.保存及退出命令"></a>2.1.保存及退出命令</h4><ul><li><strong>:w</strong> ：保存 ； <strong>:w!</strong> ：只读状态下，强制保存，需要一定权限；</li><li><strong>:w new_fileName</strong> : 另存为新文件；对原文件无影响，**:w new_fileName** 无 <strong>:w</strong> 效果；</li><li><strong>:q</strong> :  退出 ；  <strong>:q!</strong> :  强制退出，不保存；</li><li><strong>:wq</strong> ：保存退出； <strong>:wq!</strong> ：强制保存退出；</li><li><strong>ZZ</strong> ：保存并退出；(一般命令模式下)</li></ul><h4 id="2-2-其他设置命令"><a href="#2-2-其他设置命令" class="headerlink" title="2.2.其他设置命令"></a>2.2.其他设置命令</h4><ul><li><strong>:set nu</strong> :  设置行号 ； <strong>:set nonu</strong> :  取消行号</li><li><strong>:n</strong> ：光标跳至第n行 ；</li></ul><h3 id="三、应用小技巧"><a href="#三、应用小技巧" class="headerlink" title="三、应用小技巧"></a>三、应用小技巧</h3><h4 id="3-1-导入命令"><a href="#3-1-导入命令" class="headerlink" title="3.1.导入命令"></a>3.1.导入命令</h4><ul><li><p>:r  file_name :  </p></li><li><p>:!  命令 ：不退出vim，执行某命令 ；</p></li><li><p>:r! :  将执行某命令的结果，导入文件中 ；</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">[</span>root@<span class="token operator">~</span><span class="token punctuation">]</span># vim text<span class="token punctuation">.</span>txt    Hello<span class="token punctuation">,</span>World<span class="token operator">!</span>        <span class="token operator">:</span>r<span class="token operator">!</span> date 结果：    Hello<span class="token punctuation">,</span>World<span class="token operator">!</span>    <span class="token number">2022</span>年 <span class="token number">04</span>月 <span class="token number">09</span>日 星期六 <span class="token number">14</span><span class="token operator">:</span><span class="token number">51</span><span class="token operator">:</span><span class="token number">45</span> CST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-2-连续行注释"><a href="#3-2-连续行注释" class="headerlink" title="3.2.连续行注释"></a>3.2.连续行注释</h4><ul><li><strong>:n1,n2s/^/#/g</strong> ：利用查找替换命令，将行首加入#，完成注释</li><li><strong>:n1,n2s/^#//g</strong> ：取消注释，</li><li><strong>:n1,n2s/^////g</strong> ：\为转义符，将/转义，避免冲突 ； 在行首加入// </li></ul><h4 id="3-3-设置快捷键"><a href="#3-3-设置快捷键" class="headerlink" title="3.3.设置快捷键"></a>3.3.设置快捷键</h4><ul><li><p>:map 快捷键  实现命令 :  通过map命令实现快捷键，但不能长久设置保存 ；</p></li><li><p>:map ^z  I#&lt;ESC&gt;  一般命令模式下，注释光标所在行 快捷键为Ctrl+p;  (^为Ctrl，通过Ctrl+v打出带颜色的^代表Ctrl)</p></li><li><p>要永久保存快捷键就要更改设置</p><ul><li>root用户将快捷键命令(:map 快捷键  实现命令)写入 /root/.vimrc</li><li>一般用户写入 /home/user_name/.vimrc</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令(二)</title>
      <link href="/2022/04/09/linux-commoncommands2/"/>
      <url>/2022/04/09/linux-commoncommands2/</url>
      
        <content type="html"><![CDATA[<h3 id="一、用户管理命令"><a href="#一、用户管理命令" class="headerlink" title="一、用户管理命令"></a>一、用户管理命令</h3><h4 id="1-1-useradd-创建用户"><a href="#1-1-useradd-创建用户" class="headerlink" title="1.1.useradd-创建用户"></a>1.1.useradd-创建用户</h4><ul><li>useradd 用户名</li></ul><h4 id="1-2-passwd-修改用户密码"><a href="#1-2-passwd-修改用户密码" class="headerlink" title="1.2.passwd-修改用户密码"></a>1.2.passwd-修改用户密码</h4><ul><li>passwd 用户名</li></ul><h4 id="1-3-who-显示正在"><a href="#1-3-who-显示正在" class="headerlink" title="1.3.who-显示正在"></a>1.3.who-显示正在</h4><ul><li>who 查看正在登入的用户</li></ul><h4 id="1-4-w"><a href="#1-4-w" class="headerlink" title="1.4.w"></a>1.4.w</h4><ul><li>查看正在登入的用户详细信息</li></ul><h3 id="二、压缩命令"><a href="#二、压缩命令" class="headerlink" title="二、压缩命令"></a>二、压缩命令</h3><h4 id="2-1-gzip-压缩格式-gz"><a href="#2-1-gzip-压缩格式-gz" class="headerlink" title="2.1.gzip-压缩格式.gz"></a>2.1.gzip-压缩格式.gz</h4><ul><li>gzip 文件名  ：压缩</li><li>gunzip 文件名  ：解压缩</li><li>只能压缩文件，不能保存原文件；</li></ul><h4 id="2-2-tar-打包压缩命令"><a href="#2-2-tar-打包压缩命令" class="headerlink" title="2.2.tar-打包压缩命令"></a>2.2.tar-打包压缩命令</h4><ul><li>tar(压缩)<ul><li>语法：tar [-cvfz] [压缩后的文件名] [要压缩的文件/目录]</li><li>打包：将文件目录的集合存储为一个文件，大小不变；压缩会是文件大小变小；</li><li>解压和压缩后文件都不会消失</li></ul></li><li><strong>tar -zcf a.tar.gz a</strong><ul><li> -c：打包</li><li>-z：打包的同时压缩</li><li>-f：指定压缩后的文件名</li><li>-v：显示详细信息</li></ul></li><li>tar(解压缩)<ul><li>语法：tar [-xvfz] [要解压的压缩包]</li></ul></li><li><strong>tar -zxf a.tar.gz</strong><ul><li>-x ：解包</li><li>-v ：显示详细信息</li><li>-f ：指定解压的文件名</li><li>-z ：解压</li></ul></li><li>压缩格式<ul><li>-z：gzip</li><li>-j：bzip2<ul><li><strong>tar -jcf a.tar.gz a</strong></li><li><strong>tar -jxf a.tar.gz</strong></li></ul></li><li>-J：xz<ul><li><strong>tar -Jcf a.tar.gz a</strong></li><li><strong>tar -Jxf a.tar.gz</strong></li></ul></li></ul></li></ul><h4 id="2-3-zip-windows和linux均兼容"><a href="#2-3-zip-windows和linux均兼容" class="headerlink" title="2.3.zip-windows和linux均兼容"></a>2.3.zip-windows和linux均兼容</h4><ul><li>zip -r [压缩后的文件名] [文件或目录]<ul><li>-r ：压缩目录</li></ul></li><li>unzip 解压</li></ul><h3 id="三、网络命令"><a href="#三、网络命令" class="headerlink" title="三、网络命令"></a>三、网络命令</h3><h4 id="3-1-write-给其他用户发信息"><a href="#3-1-write-给其他用户发信息" class="headerlink" title="3.1.write 给其他用户发信息"></a>3.1.write 给其他用户发信息</h4><ul><li>write 用户名 [Enter] 内容 Ctrl+D结束</li><li>wall 给所有用户发信息</li></ul><h4 id="3-2-ping"><a href="#3-2-ping" class="headerlink" title="3.2.ping"></a>3.2.ping</h4><ul><li>ping -c 次数  ip地址   指定发送次数</li></ul><h4 id="3-3-ifconfig-查看网络详细信息"><a href="#3-3-ifconfig-查看网络详细信息" class="headerlink" title="3.3.ifconfig-查看网络详细信息"></a>3.3.ifconfig-查看网络详细信息</h4><h4 id="3-4-mail-邮件命令"><a href="#3-4-mail-邮件命令" class="headerlink" title="3.4.mail-邮件命令"></a>3.4.mail-邮件命令</h4><ul><li><p>mail </p><ul><li>每个用户的邮箱地址：/var/spod/mail/用户名</li></ul></li><li><p>mail user_name 发送邮件</p><ul><li><p>mail xxx [Enter]</p><p>Subject:</p><p>内容：xxx</p><p><strong>.</strong> [Enter]</p></li><li><p><strong>.</strong> 代表邮件内容结束</p></li></ul></li><li><p>mail -s “zhr” zhr &lt;/etc/sysctl.d</p><ul><li>-s ：定义标题</li><li>&lt;文件路径 ：发送文件</li></ul></li><li><p>mail -查看邮件</p><ul><li><p>“/var/spool/mail/zhr”: 1 message 1 new</p><p>N  1 root                  Sun Apr 17 16:38  18/601   “hello”</p></li><li><p>N 表示未读</p></li><li><p>输入邮件前的编号即可查看</p></li></ul></li></ul><h4 id="3-5-last-查看用户登入信息"><a href="#3-5-last-查看用户登入信息" class="headerlink" title="3.5.last-查看用户登入信息"></a>3.5.last-查看用户登入信息</h4><h4 id="3-6-traceroute-显示数据包到主机之间的路径"><a href="#3-6-traceroute-显示数据包到主机之间的路径" class="headerlink" title="3.6.traceroute-显示数据包到主机之间的路径"></a>3.6.traceroute-显示数据包到主机之间的路径</h4><ul><li>traceroute <a href="http://www.baidu.com/">www.baidu.com</a></li></ul><h4 id="3-7-netstat-查看网络相关信息"><a href="#3-7-netstat-查看网络相关信息" class="headerlink" title="3.7. netstat-查看网络相关信息"></a>3.7. netstat-查看网络相关信息</h4><ul><li>-t：</li><li>-u：</li><li>-l：</li><li>-r：</li><li>-n：</li></ul><h4 id="3-8-setup-配置网络"><a href="#3-8-setup-配置网络" class="headerlink" title="3.8.setup-配置网络"></a>3.8.setup-配置网络</h4><ul><li>界面化配置网络</li></ul><h3 id="四、关机重启命令"><a href="#四、关机重启命令" class="headerlink" title="四、关机重启命令"></a>四、关机重启命令</h3><h4 id="4-1-shutdown-关机重启-常用"><a href="#4-1-shutdown-关机重启-常用" class="headerlink" title="4.1.shutdown-关机重启(常用)"></a>4.1.shutdown-关机重启(常用)</h4><ul><li>shutdowm -h now :  马上关机</li><li>shutdowm -h 20:30 :  定时关机</li><li>shutdown -c :  取消上一个关机命令</li><li>shutdown -r :  重启</li></ul><h4 id="4-2-其他命令"><a href="#4-2-其他命令" class="headerlink" title="4.2.其他命令"></a>4.2.其他命令</h4><ul><li>halt :  马上关机</li><li>poweroff ：强制关机</li><li>init 0 ：关机</li><li>reboot ：重启</li><li>init 6 ：重启</li></ul><h4 id="4-3-init系统运行级别0-6"><a href="#4-3-init系统运行级别0-6" class="headerlink" title="4.3.init系统运行级别0-6"></a>4.3.init系统运行级别0-6</h4><ul><li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动。其实就是关机。</li><li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆；忘记root密码时可用此级别，修改root密码。</li><li>运行级别2：多用户状态(没有NFS)，没有网络连接。</li><li>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式。 linux很常见的运行级别。</li><li>运行级别4：系统未使用，保留。</li><li>运行级别5：X11控制台，登陆后进入图形GUI模式。就是图形模式。</li><li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动。</li></ul><h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><ul><li>runlevel</li><li>init 运行级别</li><li>系统默认运行级别<ul><li>etc/inittab中修改(centos6中可用，centos7中已经弱化init功能)</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令(一)</title>
      <link href="/2022/04/09/linux-commoncommands/"/>
      <url>/2022/04/09/linux-commoncommands/</url>
      
        <content type="html"><![CDATA[<h3 id="一、文件处理命令"><a href="#一、文件处理命令" class="headerlink" title="一、文件处理命令"></a>一、文件处理命令</h3><h4 id="1-1-ls-查看目录文件命令"><a href="#1-1-ls-查看目录文件命令" class="headerlink" title="1.1. ls-查看目录文件命令"></a>1.1. ls-查看目录文件命令</h4><ul><li><p> <strong>ls</strong></p></li><li><p>命令路径 ：/usr/bin/ls</p></li><li><p>执行权限 ：rwxr-xr-x</p></li><li><p><strong>ls -a</strong> ：显示包括隐藏文件在内的所有文件 ；</p></li><li><p><strong>ls -l</strong> ：显示文件的详细信息</p></li><li><p><strong>ls -lh</strong> ：人性化的显示文件的信息</p></li><li><p><strong>ls -d</strong> ：只显示目录的信息，不显示目录下的文件的信息</p></li><li><p><strong>ls -i</strong> ：显示文件的i节点</p><img src="/2022/04/09/linux-commoncommands/ls.png" class=""></li></ul><h4 id="1-2-mkdir-创建目录"><a href="#1-2-mkdir-创建目录" class="headerlink" title="1.2.mkdir-创建目录"></a>1.2.mkdir-创建目录</h4><ul><li><strong>mkdir -p</strong> :  递归创建目录</li><li>命令路径 ：/usr/bin/mkdir</li><li>执行权限 ：rwxr-xr-x</li></ul><h4 id="1-3-cd-切换目录"><a href="#1-3-cd-切换目录" class="headerlink" title="1.3.cd-切换目录"></a>1.3.cd-切换目录</h4><ul><li><strong>cd ..</strong> :  上一级目录</li><li><strong>cd .</strong> :  当前目录</li><li>命令路径 ：/usr/bin/cd</li><li>执行权限 ：rwxr-xr-x</li></ul><h4 id="1-4-pwd-print-working-directory"><a href="#1-4-pwd-print-working-directory" class="headerlink" title="1.4.pwd-print working directory"></a>1.4.pwd-print working directory</h4><ul><li><strong>pwd</strong></li><li>命令路径 ：/usr/bin/pwd</li><li>执行权限 ：rwxr-xr-x</li></ul><h4 id="1-5-cp-复制目录-文件"><a href="#1-5-cp-复制目录-文件" class="headerlink" title="1.5.cp-复制目录/文件"></a>1.5.cp-复制目录/文件</h4><ul><li>cp<ul><li>语法 ：cp -rp [原文件/目录]  [目标目录]</li><li>命令路径 ：/usr/bin/cp</li><li>执行权限 ：rwxr-xr-x</li></ul></li><li><strong>cp -r</strong> : 复制目录</li><li><strong>cp -p</strong> :  保持原文件的文件属性</li><li><strong>cp  /etc/old_name.file /root/new_name.file</strong> :  在目标目录上实现重命名</li></ul><h4 id="1-6-mv-重命名-剪切"><a href="#1-6-mv-重命名-剪切" class="headerlink" title="1.6.mv-重命名/剪切"></a>1.6.mv-重命名/剪切</h4><ul><li><strong>mv</strong><ul><li>语法 ：mv [原文件/目录] [目标目录] ；mv [原文件名] [新文件名]</li><li>命令路径 ：/usr/bin/mv</li><li>执行权限 ：rwxr-xr-x</li></ul></li></ul><h4 id="1-7-rm-删除命令"><a href="#1-7-rm-删除命令" class="headerlink" title="1.7.rm-删除命令"></a>1.7.rm-删除命令</h4><ul><li><strong>rm</strong><ul><li>语法 :  rm -rf  [文件/目录]</li><li>命令路径 ：/usr/bin/rm</li><li>执行权限 ：rwxr-xr-x</li></ul></li><li>rm -r :  删除目录 ；</li><li>rm -f :  强制删除 ；</li></ul><h4 id="1-8-touch-创建新文件"><a href="#1-8-touch-创建新文件" class="headerlink" title="1.8.touch-创建新文件"></a>1.8.touch-创建新文件</h4><ul><li>touch<ul><li>语法 ： touch [文件名]</li><li>命令路径 ：/usr/bin/touch</li><li>执行权限 ：rwxr-xr-x</li><li>touch  /etc/a.txt</li></ul></li><li><strong>touch  a.txt  b.txt</strong>  创建多个文件<ul><li>touch /a/a.txt /a/b.txt</li></ul></li><li><strong>touch “promgram files”</strong>  当文件名中有空格时，以引号规避歧义</li></ul><h4 id="1-9-cat-more-head-查看文件"><a href="#1-9-cat-more-head-查看文件" class="headerlink" title="1.9.cat/more/head-查看文件"></a>1.9.cat/more/head-查看文件</h4><ul><li>命令路径 ：/usr/bin/</li><li>执行权限 ：rwxr-xr-x</li><li><strong>cat</strong><ul><li>cat  -n [文件名] </li><li>cat -n :  显示行号</li><li>tac  [文件名]  ：倒序查看内容</li></ul></li><li><strong>more</strong><ul><li>more [文件名]</li><li>Space 翻页；Enter 换行；Q退出；</li><li>less [文件名] ：倒序查看 ；</li></ul></li><li><strong>head</strong><ul><li>head -n [文件名] :  查看前n 行文件内容</li><li>tail -n [文件名] ：查看倒数n 行内容</li><li>tail  -f [文件名] : 动态显示文件的尾部内容，当文件发生改变时，会动态的显示在控制台；<ul><li>tail -f -n num [文件名]：默认显示10行，通过-n 指定显示的行数。</li></ul></li></ul></li></ul><h4 id="1-10-ln-链接文件"><a href="#1-10-ln-链接文件" class="headerlink" title="1.10.ln-链接文件"></a>1.10.ln-链接文件</h4><ul><li><p>ln</p><ul><li>语法：ln  -s 原文件  目的文件</li><li>命令路径 ：/usr/bin/ln</li><li>执行权限 ：rwxr-xr-x</li></ul></li><li><p><strong>ln -s /etc/issue /etc/issue.sort</strong> : 创建软链接</p></li><li><p><strong>ln  /etc/issue /etc/issue.hard</strong> : 创建硬链接</p></li><li><p>硬链接</p><ul><li>硬链接是通过索引节点进行的链接。在Linux中，多个文件指向同一个索引节点是允许的，这样的链接就是硬链接。硬链接和原文件的i节点相同 ；</li><li>硬链接只能在同一文件系统中的文件之间进行链接，不能对目录进行创建。</li><li>如果删除硬链接对应的源文件，则硬链接文件仍然存在，而且保存了原有的内容；</li></ul></li><li><p>软链接</p><ul><li>软链接（也叫符号链接）与硬链接不同，存放的内容是另一文件的路径名的指向。</li><li>可交叉文件系统创建 ，硬链接不可以。可以对目录进行链接。</li><li>删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接。</li></ul><img src="/2022/04/09/linux-commoncommands/%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5.png" class=""></li></ul><h3 id="二、权限管理命令"><a href="#二、权限管理命令" class="headerlink" title="二、权限管理命令"></a>二、权限管理命令</h3><table><thead><tr><th align="center">权限</th><th></th><th align="center">文件</th><th align="center">目录</th></tr></thead><tbody><tr><td align="center">r</td><td>读权限</td><td align="center">可以查看文件内容</td><td align="center">可以列出目录内容</td></tr><tr><td align="center">w</td><td>写权限</td><td align="center">可以修改文件内容</td><td align="center">可以在目录中创建删除文件</td></tr><tr><td align="center">x</td><td>执行权限</td><td align="center">可以执行问文件</td><td align="center">可以进入目录</td></tr></tbody></table><ul><li>命令路径 ：/usr/bin/</li><li>执行权限 ：rwxr-xr-x</li></ul><h4 id="2-1-chmod-改变权限"><a href="#2-1-chmod-改变权限" class="headerlink" title="2.1.chmod-改变权限"></a>2.1.chmod-改变权限</h4><ul><li><strong>chmod</strong><ul><li>语法：chmod [{ugoa} {+-=} {rwx}] [文件或目录]</li></ul></li><li><strong>chmod u=rwx a.txt</strong><ul><li>u:user,所有者</li><li>g:gruop，所属组</li><li>o:ether，其他</li><li>a:all，全部</li><li>+，加一个权限；-，减一个权限；=，等于</li><li>r,read=4 ；w,write=2 ；x,执行=1 ;</li><li>-R : 递归修改 ；</li></ul></li></ul><h4 id="2-2-chown-改变文件所有者"><a href="#2-2-chown-改变文件所有者" class="headerlink" title="2.2.chown-改变文件所有者"></a>2.2.chown-改变文件所有者</h4><ul><li>chown [用户] [文件或目录]</li></ul><h4 id="2-3-chgrp-改变所属组"><a href="#2-3-chgrp-改变所属组" class="headerlink" title="2.3.chgrp-改变所属组"></a>2.3.chgrp-改变所属组</h4><ul><li>chgrp [用户组] [文件或目录]</li></ul><h3 id="三、文件搜索命令"><a href="#三、文件搜索命令" class="headerlink" title="三、文件搜索命令"></a>三、文件搜索命令</h3><h4 id="3-1-find-遍历搜索"><a href="#3-1-find-遍历搜索" class="headerlink" title="3.1.find-遍历搜索"></a>3.1.find-遍历搜索</h4><ul><li>find<ul><li>语法：find [查找范围] [查找文件]</li><li>命令路径 ：/usr/bin/find</li><li>执行权限 ：rwxr-xr-x</li></ul></li><li><strong>find /etc -name a.txt   find /etc -iname a.txt</strong>(不区分大小写) ：按照名字查找；<ul><li><strong>find /etc -name a.</strong>* (*代表任意字符)</li><li><strong>find /etc -name a.tx?</strong> (?代表字符)</li></ul></li><li>find /etc -size size_number；按照大小查找 ；size_number单位为数据块(一个数据块大小为0.5k)<ul><li><strong>find /etc -size +2000</strong>  (大于)</li><li><strong>find /etc -size -2000</strong>  (小于)</li><li><strong>find /etc -size 2000</strong>  (等于)</li><li><strong>find /etc -size +2000 -a -3000</strong>  : -a 即 and</li><li><strong>find /etc -size +2000 -o -1000</strong> ：-o 即 or</li></ul></li><li><strong>find /etc -user user_name</strong> :  根据所有者查找</li><li><strong>find /etc -group group_name</strong> ：根据所有组查找</li><li><strong>find /etc -amin -5</strong>：查找访问时间改变的文件 ；+n(改变n分钟以上的文件) -n(改变n分钟内以下的文件)<ul><li><strong>find /etc -cmin +5</strong> ：查找属性改变的文件 ；</li><li><strong>find /etc -mmin -n</strong> :  查找内容改变的文件 ；</li></ul></li><li><strong>find /etc -type type_name</strong>;<ul><li><strong>find /etc -type f</strong> ; 文件</li><li><strong>find /etc -type l</strong> ; 链接</li><li><strong>find /etc -type d</strong> ; 目录</li></ul></li><li><strong>find /etc -inum i_number</strong> ：根据i节点查找 </li><li><strong>find /etc -name init -exec [命令] {} ;</strong>  (末尾固定格式 {} ;)<ul><li>find  /tmp -name a -exec ls -1 {} ; 找到/tmp下的a文件夹并执行ls命令 ；</li><li>-ok  : 和exec相同，只不过执行前要询问一下</li></ul></li></ul><h4 id="3-2-locate-对文件资料库搜索"><a href="#3-2-locate-对文件资料库搜索" class="headerlink" title="3.2.locate-对文件资料库搜索"></a>3.2.locate-对文件资料库搜索</h4><ul><li>命令路径 ：/usr/bin/locate</li><li>执行权限 ：rwx–s–x</li><li>locate -i : 不区分大小写  </li><li>语法：locate [选项] 文件名</li><li>文件资料数据库为 mlocate.db</li><li>updatedb 更新数据库</li></ul><h4 id="3-3-which-查找命令所在目录及其别名信息"><a href="#3-3-which-查找命令所在目录及其别名信息" class="headerlink" title="3.3.which-查找命令所在目录及其别名信息"></a>3.3.which-查找命令所在目录及其别名信息</h4><ul><li>which + 命令</li></ul><h4 id="3-4-whereis-命令所在文职及其帮助文档所在位置"><a href="#3-4-whereis-命令所在文职及其帮助文档所在位置" class="headerlink" title="3.4.whereis-命令所在文职及其帮助文档所在位置"></a>3.4.whereis-命令所在文职及其帮助文档所在位置</h4><ul><li>whereis + 命令</li></ul><h4 id="3-5-grep-在文件里搜索内容"><a href="#3-5-grep-在文件里搜索内容" class="headerlink" title="3.5.grep-在文件里搜索内容"></a><strong>3.5.grep-在文件里搜索内容</strong></h4><ul><li>grep “搜索内容” 文件名</li><li><strong>grep -n add /etc/sysctl.conf</strong><ul><li>-i：忽略大小写</li><li>-n：输出行号</li><li>-v：反向查找</li><li>–clolr=auto：搜出的关键字用颜色显示</li></ul></li></ul><h3 id="四、帮助命令"><a href="#四、帮助命令" class="headerlink" title="四、帮助命令"></a>四、帮助命令</h3><h4 id="3-1-man"><a href="#3-1-man" class="headerlink" title="3.1.man"></a>3.1.man</h4><ul><li>man-获得帮助信息<ul><li>语法：man  [命令/配置文件]</li></ul></li><li>man ls</li></ul><h4 id="3-2-help"><a href="#3-2-help" class="headerlink" title="3.2.help"></a>3.2.help</h4><ul><li><p>help + 命令</p></li><li><p>命令路径：shell内置命令</p></li><li><p>获取shell内置命令的帮助信息</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2022/04/08/git/"/>
      <url>/2022/04/08/git/</url>
      
        <content type="html"><![CDATA[<h3 id="git基础"><a href="#git基础" class="headerlink" title="git基础"></a>git基础</h3><h3 id="git原理"><a href="#git原理" class="headerlink" title="git原理"></a>git原理</h3><h4 id="1-git文件布局"><a href="#1-git文件布局" class="headerlink" title="1.git文件布局"></a>1.git文件布局</h4><ul><li><p>Git分为Git仓库、暂存区域、工作目录</p></li><li><p>.git目录用来保存元数据和对象数据库</p></li><li><p>工作目录将数据库中的某个版本提取出来，放到磁盘上供人修改</p></li><li><p>暂存区域是一个文件，保存下次要提交的文件列表信息</p></li></ul><img src="/2022/04/08/git/git%E5%B8%83%E5%B1%80.png" class=""><ul><li><p>git贮藏区</p><p>贮藏区的作用是用来临时保存”集结区”内未提交的内容。</p><p>使用场景：</p><p>当我们通过git add 向暂存区添加代码后，并未通过 commit 提交；此时，我们想创建一条分支，但会提醒有内容未提交；这些内容我们并不想提交；此时，就可以通过git stash命令，将未提交内容存入贮藏区。</p><p>调用 git stash 之后，工作区的文件、暂存区就会被回滚到上次提交 commit 后的状态，我们可以重新修改文件，并向暂存区添加。如果对当前工作不满意，可以使用 git stash apply 命令把前面贮藏的修改恢复到工作区与暂存区。</p></li><li><p>本地仓库文件布局</p><img src="/2022/04/08/git/%E6%9C%AC%E5%9C%B0%E5%BA%93.png" class=""></li></ul><h4 id="2-objects"><a href="#2-objects" class="headerlink" title="2.objects"></a>2.objects</h4><p><strong>.git下的objects储存三种对象：数据对象、树对象、提交对象</strong></p><p>初始化本地库后，添加一个a.txt和一个b目录，b目录下添加一个c.txt文件，如下图</p><img src="/2022/04/08/git/%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1.png" class=""><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看状态李朱鹏@DESKTOP-HAGDVO0 MINGW64 &#x2F;f&#x2F;Git&#x2F;GitSpace (master)$ git statusOn branch masterNo commits yetUntracked files:  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)        a.txt        b&#x2F;nothing added to commit but untracked files present (use &quot;git add&quot; to track)#将文件和目录存到暂存区李朱鹏@DESKTOP-HAGDVO0 MINGW64 &#x2F;f&#x2F;Git&#x2F;GitSpace (master)$ git add a.txt bwarning: LF will be replaced by CRLF in a.txt.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in b&#x2F;c.txt.The file will have its original line endings in your working directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在暂存区后，objects目录下出现两个文件夹，如下图</p><img src="/2022/04/08/git/objects.png" class=""><ul><li><p>数据对象(blob)</p><p><strong>数据对象的产生是在使用git add命令将文件或者目录加入到暂存区时产生的</strong>，Git会把一个文件中要存储的数据和一个头部信息一起做SHA-1散列运算，将得到的散列值作为这个文件的路径。该文件名是由文件原内容加上特定头部信息一起做SHA-1散列值得到的，散列值前两字符用于命名子目录，余下的38个字符则用作文件名。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 通过 git cat-file -p 参看文件内容李朱鹏@DESKTOP-HAGDVO0 MINGW64 &#x2F;f&#x2F;Git&#x2F;GitSpace (master)$ find .git&#x2F;objects.git&#x2F;objects.git&#x2F;objects&#x2F;71.git&#x2F;objects&#x2F;71&#x2F;4d562401e8d66a89d1d100b3dcdc145e9c4258.git&#x2F;objects&#x2F;8b.git&#x2F;objects&#x2F;8b&#x2F;aef1b4abc478178b004d62031cf7fe6db6f903.git&#x2F;objects&#x2F;info.git&#x2F;objects&#x2F;pack李朱鹏@DESKTOP-HAGDVO0 MINGW64 &#x2F;f&#x2F;Git&#x2F;GitSpace (master)$ git cat-file -p 8baef1b4abc478178b004d62031cf7fe6db6f903abc李朱鹏@DESKTOP-HAGDVO0 MINGW64 &#x2F;f&#x2F;Git&#x2F;GitSpace (master)$  git cat-file -p 714d562401e8d66a89d1d100b3dcdc145e9c4258ABC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过参看，显示的内容与加入暂存区之间文件中的内容是一样的，这个散列值路径文件中保存的只是源文件的一种压缩形式。同时，发现提交的目录生成的数据对象，并没有目录相关信息，而是存为目录下文件的数据对象，目录相关信息储存在树对象中。</p></li><li><p>树对象(tree)</p><p>将暂存区中的文件通过git commit -m提交本地库，发现objects中多了三个文件，如下图</p><img src="/2022/04/08/git/objects4.png" class=""><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">李朱鹏@DESKTOP-HAGDVO0 MINGW64 &#x2F;f&#x2F;Git&#x2F;GitSpace (master)$ git commit -m &quot;first&quot;[master (root-commit) 407ee86] first 2 files changed, 2 insertions(+) create mode 100644 a.txt create mode 100644 b&#x2F;c.txt # 通过 git cat-file -p 参看文件内容李朱鹏@DESKTOP-HAGDVO0 MINGW64 &#x2F;f&#x2F;Git&#x2F;GitSpace (master)$ find .git&#x2F;objects.git&#x2F;objects.git&#x2F;objects&#x2F;71.git&#x2F;objects&#x2F;71&#x2F;4d562401e8d66a89d1d100b3dcdc145e9c4258.git&#x2F;objects&#x2F;8b.git&#x2F;objects&#x2F;8b&#x2F;aef1b4abc478178b004d62031cf7fe6db6f903.git&#x2F;objects&#x2F;ae.git&#x2F;objects&#x2F;ae&#x2F;072fa477e9f442e3ada7153a0582e87d4d70cb.git&#x2F;objects&#x2F;fe.git&#x2F;objects&#x2F;fe&#x2F;934b4d33f7cdf81bf7582d6c03558d8fbc741d.git&#x2F;objects&#x2F;info.git&#x2F;objects&#x2F;pack#第一条：该树对象指向一个8b..的数据对象，数据对象的文件名为a.txt，模式为100644(普通文件)#第二条：该树对象指向一个ae..树对象，树对象名称为b,模式为040000(目录)李朱鹏@DESKTOP-HAGDVO0 MINGW64 &#x2F;f&#x2F;Git&#x2F;GitSpace (master)$ git cat-file -p fe934b4d33f7cdf81bf7582d6c03558d8fbc741d100644 blob 8baef1b4abc478178b004d62031cf7fe6db6f903    a.txt040000 tree ae072fa477e9f442e3ada7153a0582e87d4d70cb    b#该树对象指向一个714..的数据对象，树对象的文件名为test.txt，模式为100644李朱鹏@DESKTOP-HAGDVO0 MINGW64 &#x2F;f&#x2F;Git&#x2F;GitSpace (master)$ git cat-file -p ae072fa477e9f442e3ada7153a0582e87d4d70cb100644 blob 714d562401e8d66a89d1d100b3dcdc145e9c4258    c.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次提交的时候都会生成对应的树对象，其中顶层树对象成为本次提交的快照。 </p><p>树对象的结构：</p><img src="/2022/04/08/git/objects5.png" class=""><p>我们上述的例子对应的树对象如下：</p><img src="/2022/04/08/git/objects6.png" class=""></li><li><p>提交对象(commit)</p><p>通过分析提交对象的内容，发现提交对象中包含一个树对象条目(顶层树对象)，代表着当前项目快照；还包含其他的提交信息。</p><pre class="line-numbers language-none"><code class="language-none">李朱鹏@DESKTOP-HAGDVO0 MINGW64 &#x2F;f&#x2F;Git&#x2F;GitSpace (master)$ find .git&#x2F;objects.git&#x2F;objects.git&#x2F;objects&#x2F;40.git&#x2F;objects&#x2F;40&#x2F;7ee86e0053f17739040f6481607be4419524ba.git&#x2F;objects&#x2F;71.git&#x2F;objects&#x2F;71&#x2F;4d562401e8d66a89d1d100b3dcdc145e9c4258.git&#x2F;objects&#x2F;8b.git&#x2F;objects&#x2F;8b&#x2F;aef1b4abc478178b004d62031cf7fe6db6f903.git&#x2F;objects&#x2F;ae.git&#x2F;objects&#x2F;ae&#x2F;072fa477e9f442e3ada7153a0582e87d4d70cb.git&#x2F;objects&#x2F;fe.git&#x2F;objects&#x2F;fe&#x2F;934b4d33f7cdf81bf7582d6c03558d8fbc741d.git&#x2F;objects&#x2F;info.git&#x2F;objects&#x2F;pack李朱鹏@DESKTOP-HAGDVO0 MINGW64 &#x2F;f&#x2F;Git&#x2F;GitSpace (master)$ git cat-file -p 407ee86e0053f17739040f6481607be4419524batree fe934b4d33f7cdf81bf7582d6c03558d8fbc741dauthor xiaolili &lt;xiaoli@163.com&gt; 1656064030 +0800committer xiaolili &lt;xiaoli@163.com&gt; 1656064030 +0800first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">李朱鹏@DESKTOP-HAGDVO0 MINGW64 &#x2F;f&#x2F;Git&#x2F;GitSpace (master)$ git cat-file -p 6d5d85d767523c26603681a3d9d1265bcdad7d4btree 31f18623ad8f693022a4c8e5cfe1f79f40106863parent 407ee86e0053f17739040f6481607be4419524baauthor xiaolili &lt;xiaoli@163.com&gt; 1656130510 +0800committer xiaolili &lt;xiaoli@163.com&gt; 1656130510 +0800sec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="git的常用命令"><a href="#git的常用命令" class="headerlink" title="git的常用命令"></a>git的常用命令</h3><h4 id="设置用户签名"><a href="#设置用户签名" class="headerlink" title="设置用户签名"></a>设置用户签名</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。Git 首次安装必须设置一下用户签名，否则无法提交代码。git config --global user.name xxxgit config --global user.email xxxgit config user.name #查看用户名git config user.email #查看用户邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="初始本地库"><a href="#初始本地库" class="headerlink" title="初始本地库"></a>初始本地库</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看状态git status#添加暂存区git add file_name#提交本地库git commit -m &quot;log&quot; file_name <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看状态，工作区没有文件</li></ul><img src="/2022/04/08/git/1.png" class=""><ul><li>向工作区添加文件，检测到未追踪文件</li></ul><img src="/2022/04/08/git/2.png" class=""><ul><li>将文件添加到暂存区，检测到暂存区有文件</li></ul><img src="/2022/04/08/git/3.png" class=""><ul><li>向本地库提交文件，检测到没有文件提交</li></ul><img src="/2022/04/08/git/4.png" class=""><ul><li>修改文件，检测到工作区有文件被修改</li></ul><img src="/2022/04/08/git/5.png" class=""><ul><li>将修改的文件添加到暂存区，检测到修改的文件已经添加到暂存区</li></ul><img src="/2022/04/08/git/6.png" class=""><ul><li>将修改的文件提交到版本库，成为第二个版本</li></ul><img src="/2022/04/08/git/7.png" class=""><h4 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看历史版本git reflog#追溯到其他版本git reset --hard version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2022/04/08/git/%E8%BF%BD%E6%BA%AF.png" class=""><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>git branch -v  查看分支</p><p>git branch -d xx 删除分支</p><p>git branch 分支名 在当前提交对象上创建分支(在哪个分支上创建就复制哪个分支)</p><p>git checkout 分支名  切换分支(切换到该分支的最后一次提交的状态)</p><p>git merge 分支名  把指定分支合并到当前分支</p><h3 id="1-简介和切换"><a href="#1-简介和切换" class="headerlink" title="1.简介和切换"></a>1.简介和切换</h3><p>git在创建分支时，创建一个“引用”文件， 此文件的名称就是分支的名称，其内容就是这个分支方向上最新的 commit 对象的 id。此</p><p>类“引用”文件存放在.git/refs/heads 目录下</p><img src="/2022/04/08/git/head%E7%9B%AE%E5%BD%95.png" class=""><p>HEAD，就是.git/HEAD 文件，其内容就是当前 checkout 到工作区的分支</p><ul><li>当前工作区是master分支</li></ul><img src="/2022/04/08/git/branch1.png" class=""><ul><li>切换分支后，工作区的分支时branch1</li></ul><img src="/2022/04/08/git/branch2.png" class=""><ul><li>在branch1分支上接着提交，生成第四次提交对象</li></ul><img src="/2022/04/08/git/branch3.png" class=""><ul><li>通过切换分支，head文件指向master分支</li></ul><img src="/2022/04/08/git/branch4.png" class=""><ul><li>基于第三次提交对象，再次提交，生成第五次提交对象，此时第四次和第五次对象均指向第三次提交对象</li></ul><img src="/2022/04/08/git/branch5.png" class=""><h3 id="2-分支的合并"><a href="#2-分支的合并" class="headerlink" title="2.分支的合并"></a>2.分支的合并</h3><h4 id="2-1快速合并"><a href="#2-1快速合并" class="headerlink" title="2.1快速合并"></a>2.1快速合并</h4><p>合并目的地分支与被合并分支之间没有分叉的版本历史。</p><p>快进合并，仅仅是移动了合并目的地分支的 head 指针。</p><img src="/2022/04/08/git/branch6.png" class=""><img src="/2022/04/08/git/branch7.png" class=""><h4 id="2-2三方合并"><a href="#2-2三方合并" class="headerlink" title="2.2三方合并"></a>2.2三方合并</h4><img src="/2022/04/08/git/branch8.png" class=""><img src="/2022/04/08/git/branch9.png" class="">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2022/04/08/computernetworking8/git/"/>
      <url>/2022/04/08/computernetworking8/git/</url>
      
        <content type="html"><![CDATA[<h3 id="git基础"><a href="#git基础" class="headerlink" title="git基础"></a>git基础</h3><h3 id="git原理"><a href="#git原理" class="headerlink" title="git原理"></a>git原理</h3><h4 id="1-git文件布局"><a href="#1-git文件布局" class="headerlink" title="1.git文件布局"></a>1.git文件布局</h4><ul><li><p>Git分为Git仓库、暂存区域、工作目录</p></li><li><p>.git目录用来保存元数据和对象数据库</p></li><li><p>工作目录将数据库中的某个版本提取出来，放到磁盘上供人修改</p></li><li><p>暂存区域是一个文件，保存下次要提交的文件列表信息</p></li></ul><ul><li><p>git贮藏区</p><p>贮藏区的作用是用来临时保存”集结区”内未提交的内容。</p><p>使用场景：</p><p>当我们通过git add 向暂存区添加代码后，并未通过 commit 提交；此时，我们想创建一条分支，但会提醒有内容未提交；这些内容我们并不想提交；此时，就可以通过git stash命令，将未提交内容存入贮藏区。</p><p>调用 git stash 之后，工作区的文件、暂存区就会被回滚到上次提交 commit 后的状态，我们可以重新修改文件，并向暂存区添加。如果对当前工作不满意，可以使用 git stash apply 命令把前面贮藏的修改恢复到工作区与暂存区。</p></li><li><p>本地仓库文件布局</p></li></ul><h4 id="2-objects"><a href="#2-objects" class="headerlink" title="2.objects"></a>2.objects</h4><p><strong>.git下的objects储存三种对象：数据对象、树对象、提交对象</strong></p><p>初始化本地库后，添加一个a.txt和一个b目录，b目录下添加一个c.txt文件，如下图</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#查看状态</span>李朱鹏@DESKTOP-HAGDVO0 MINGW64 /f/Git/GitSpace <span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> statusOn branch masterNo commits yetUntracked files:  <span class="token punctuation">(</span>use <span class="token string">"git add &lt;file>..."</span> to include <span class="token keyword">in</span> what will be committed<span class="token punctuation">)</span>        a.txt        b/nothing added to commit but untracked files present <span class="token punctuation">(</span>use <span class="token string">"git add"</span> to track<span class="token punctuation">)</span><span class="token comment">#将文件和目录存到暂存区</span>李朱鹏@DESKTOP-HAGDVO0 MINGW64 /f/Git/GitSpace <span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> <span class="token function">add</span> a.txt bwarning: LF will be replaced by CRLF <span class="token keyword">in</span> a.txt.The <span class="token function">file</span> will have its original line endings <span class="token keyword">in</span> your working directorywarning: LF will be replaced by CRLF <span class="token keyword">in</span> b/c.txt.The <span class="token function">file</span> will have its original line endings <span class="token keyword">in</span> your working directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在暂存区后，objects目录下出现两个文件夹，如下图</p><ul><li><p>数据对象(blob)</p><p><strong>数据对象的产生是在使用git add命令将文件或者目录加入到暂存区时产生的</strong>，Git会把一个文件中要存储的数据和一个头部信息一起做SHA-1散列运算，将得到的散列值作为这个文件的路径。该文件名是由文件原内容加上特定头部信息一起做SHA-1散列值得到的，散列值前两字符用于命名子目录，余下的38个字符则用作文件名。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 通过 git cat-file -p 参看文件内容</span>李朱鹏@DESKTOP-HAGDVO0 MINGW64 /f/Git/GitSpace <span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">find</span> .git/objects.git/objects.git/objects/71.git/objects/71/4d562401e8d66a89d1d100b3dcdc145e9c4258.git/objects/8b.git/objects/8b/aef1b4abc478178b004d62031cf7fe6db6f903.git/objects/info.git/objects/pack李朱鹏@DESKTOP-HAGDVO0 MINGW64 /f/Git/GitSpace <span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> cat-file -p 8baef1b4abc478178b004d62031cf7fe6db6f903abc李朱鹏@DESKTOP-HAGDVO0 MINGW64 /f/Git/GitSpace <span class="token punctuation">(</span>master<span class="token punctuation">)</span>$  <span class="token function">git</span> cat-file -p 714d562401e8d66a89d1d100b3dcdc145e9c4258ABC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过参看，显示的内容与加入暂存区之间文件中的内容是一样的，这个散列值路径文件中保存的只是源文件的一种压缩形式。同时，发现提交的目录生成的数据对象，并没有目录相关信息，而是存为目录下文件的数据对象，目录相关信息储存在树对象中。</p></li><li><p>树对象(tree)</p><p>将暂存区中的文件通过git commit -m提交本地库，发现objects中多了三个文件，如下图</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">李朱鹏@DESKTOP-HAGDVO0 MINGW64 /f/Git/GitSpace <span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> commit -m <span class="token string">"first"</span><span class="token punctuation">[</span>master <span class="token punctuation">(</span>root-commit<span class="token punctuation">)</span> 407ee86<span class="token punctuation">]</span> first <span class="token number">2</span> files changed, <span class="token number">2</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span> create mode <span class="token number">100644</span> a.txt create mode <span class="token number">100644</span> b/c.txt <span class="token comment"># 通过 git cat-file -p 参看文件内容</span>李朱鹏@DESKTOP-HAGDVO0 MINGW64 /f/Git/GitSpace <span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">find</span> .git/objects.git/objects.git/objects/71.git/objects/71/4d562401e8d66a89d1d100b3dcdc145e9c4258.git/objects/8b.git/objects/8b/aef1b4abc478178b004d62031cf7fe6db6f903.git/objects/ae.git/objects/ae/072fa477e9f442e3ada7153a0582e87d4d70cb.git/objects/fe.git/objects/fe/934b4d33f7cdf81bf7582d6c03558d8fbc741d.git/objects/info.git/objects/pack<span class="token comment">#第一条：该树对象指向一个8b..的数据对象，数据对象的文件名为a.txt，模式为100644(普通文件)</span><span class="token comment">#第二条：该树对象指向一个ae..树对象，树对象名称为b,模式为040000(目录)</span>李朱鹏@DESKTOP-HAGDVO0 MINGW64 /f/Git/GitSpace <span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> cat-file -p fe934b4d33f7cdf81bf7582d6c03558d8fbc741d<span class="token number">100644</span> blob 8baef1b4abc478178b004d62031cf7fe6db6f903    a.txt040000 tree ae072fa477e9f442e3ada7153a0582e87d4d70cb    b<span class="token comment">#该树对象指向一个714..的数据对象，树对象的文件名为test.txt，模式为100644</span>李朱鹏@DESKTOP-HAGDVO0 MINGW64 /f/Git/GitSpace <span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> cat-file -p ae072fa477e9f442e3ada7153a0582e87d4d70cb<span class="token number">100644</span> blob 714d562401e8d66a89d1d100b3dcdc145e9c4258    c.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次提交的时候都会生成对应的树对象，其中顶层树对象成为本次提交的快照。 </p><p>树对象的结构：</p><p>我们上述的例子对应的树对象如下：</p></li><li><p>提交对象(commit)</p><p>通过分析提交对象的内容，发现提交对象中包含一个树对象条目(顶层树对象)，代表着当前项目快照；还包含其他的提交信息。</p><pre class="line-numbers language-none"><code class="language-none">李朱鹏@DESKTOP-HAGDVO0 MINGW64 &#x2F;f&#x2F;Git&#x2F;GitSpace (master)$ find .git&#x2F;objects.git&#x2F;objects.git&#x2F;objects&#x2F;40.git&#x2F;objects&#x2F;40&#x2F;7ee86e0053f17739040f6481607be4419524ba.git&#x2F;objects&#x2F;71.git&#x2F;objects&#x2F;71&#x2F;4d562401e8d66a89d1d100b3dcdc145e9c4258.git&#x2F;objects&#x2F;8b.git&#x2F;objects&#x2F;8b&#x2F;aef1b4abc478178b004d62031cf7fe6db6f903.git&#x2F;objects&#x2F;ae.git&#x2F;objects&#x2F;ae&#x2F;072fa477e9f442e3ada7153a0582e87d4d70cb.git&#x2F;objects&#x2F;fe.git&#x2F;objects&#x2F;fe&#x2F;934b4d33f7cdf81bf7582d6c03558d8fbc741d.git&#x2F;objects&#x2F;info.git&#x2F;objects&#x2F;pack李朱鹏@DESKTOP-HAGDVO0 MINGW64 &#x2F;f&#x2F;Git&#x2F;GitSpace (master)$ git cat-file -p 407ee86e0053f17739040f6481607be4419524batree fe934b4d33f7cdf81bf7582d6c03558d8fbc741dauthor xiaolili &lt;xiaoli@163.com&gt; 1656064030 +0800committer xiaolili &lt;xiaoli@163.com&gt; 1656064030 +0800first<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">李朱鹏@DESKTOP-HAGDVO0 MINGW64 /f/Git/GitSpace <span class="token punctuation">(</span>master<span class="token punctuation">)</span>$ <span class="token function">git</span> cat-file -p 6d5d85d767523c26603681a3d9d1265bcdad7d4btree 31f18623ad8f693022a4c8e5cfe1f79f40106863parent 407ee86e0053f17739040f6481607be4419524baauthor xiaolili <span class="token operator">&lt;</span>xiaoli@163.com<span class="token operator">></span> <span class="token number">1656130510</span> +0800committer xiaolili <span class="token operator">&lt;</span>xiaoli@163.com<span class="token operator">></span> <span class="token number">1656130510</span> +0800sec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="git的常用命令"><a href="#git的常用命令" class="headerlink" title="git的常用命令"></a>git的常用命令</h3><h4 id="设置用户签名"><a href="#设置用户签名" class="headerlink" title="设置用户签名"></a>设置用户签名</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。Git 首次安装必须设置一下用户签名，否则无法提交代码。</span><span class="token function">git</span> config --global user.name xxx<span class="token function">git</span> config --global user.email xxx<span class="token function">git</span> config user.name <span class="token comment">#查看用户名</span><span class="token function">git</span> config user.email <span class="token comment">#查看用户邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="初始本地库"><a href="#初始本地库" class="headerlink" title="初始本地库"></a>初始本地库</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#查看状态</span><span class="token function">git</span> status<span class="token comment">#添加暂存区</span><span class="token function">git</span> <span class="token function">add</span> file_name<span class="token comment">#提交本地库</span><span class="token function">git</span> commit -m <span class="token string">"log"</span> file_name <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看状态，工作区没有文件</li></ul><ul><li>向工作区添加文件，检测到未追踪文件</li></ul><ul><li>将文件添加到暂存区，检测到暂存区有文件</li></ul><ul><li>向本地库提交文件，检测到没有文件提交</li></ul><ul><li>修改文件，检测到工作区有文件被修改</li></ul><ul><li>将修改的文件添加到暂存区，检测到修改的文件已经添加到暂存区</li></ul><ul><li>将修改的文件提交到版本库，成为第二个版本</li></ul><h4 id="查看历史版本"><a href="#查看历史版本" class="headerlink" title="查看历史版本"></a>查看历史版本</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#查看历史版本</span><span class="token function">git</span> reflog<span class="token comment">#追溯到其他版本</span><span class="token function">git</span> reset --hard version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>git branch -v  查看分支</p><p>git branch -d xx 删除分支</p><p>git branch 分支名 在当前提交对象上创建分支(在哪个分支上创建就复制哪个分支)</p><p>git checkout 分支名  切换分支(切换到该分支的最后一次提交的状态)</p><p>git merge 分支名  把指定分支合并到当前分支</p><p>fzhb</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2022/04/08/linux/"/>
      <url>/2022/04/08/linux/</url>
      
        <content type="html"><![CDATA[<h4 id="Unix和Linux"><a href="#Unix和Linux" class="headerlink" title="Unix和Linux"></a>Unix和Linux</h4><ul><li>Unix诞生于1969年，由贝尔实验室研发。</li><li>linux诞生于1991年，linux之父是利纳斯.托尔斯</li></ul><h4 id="iOS，安卓，鸿蒙"><a href="#iOS，安卓，鸿蒙" class="headerlink" title="iOS，安卓，鸿蒙"></a>iOS，安卓，鸿蒙</h4><ul><li>iOS诞生于2007年，是类Unix系统</li><li>安卓诞生于2007年，是类Linux系统</li><li>鸿蒙诞生于2019年，是类Linux系统 </li></ul><h4 id="linux发行版本"><a href="#linux发行版本" class="headerlink" title="linux发行版本"></a>linux发行版本</h4><p>RHEL（Red Hat Enterprise Linux，收费版本）</p><p>CentOS（RHEL 的社区克隆版本，免费版本）</p><p>Debian</p><p>Debian被称为Linux发行版之王，也是目前最流行的Linux服务器发行版。Ubuntu也是基于Debian的。</p><p>Ubuntu</p><p>Ubuntu是一个以桌面应用为主的Linux操作系统，基于Debian</p><p>Fedora</p><p>suse</p><p>Gentoo Linux</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2022/01/13/vue-1/"/>
      <url>/2022/01/13/vue-1/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Node.js</p><p>Node.js是JavaScript的运行环境。Node.js使JavaScript不仅仅运行在浏览器上，还可以运行在服务器上，与系统进行交互，和java等后台语言一样。java是一门语言也是一个平台，java运行在java虚拟机上。JavaScript运行在，在浏览器上只能进行简单的交互，不能操作文件也不能和系统交互。Node.js 于JavaScript就相当于java虚拟机于Java。</p><p>npm就是JavaScript的包管理工具。类似Java语法中的maven。</p></li><li><p>vue</p><p>vue.js是前端框架，vue只关注图层，即HTML+CSS+JS</p><p>axios:关注网络通信</p><p>vue-router:页面跳转</p><p>vuex:模块化</p><p>vue-ui:UI页面</p></li><li><p>vue-cli</p></li><li><p>vue-routes</p></li><li></li></ul><h2 id="一、-vue-cli项目结构"><a href="#一、-vue-cli项目结构" class="headerlink" title="一、@vue-cli项目结构"></a>一、@vue-cli项目结构</h2><img src="/2022/01/13/vue-1/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%9B%BE.png" class=""><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!--vue文件由三部分组成：template：模板只能包含一个父节点，也就是说顶层的div只能有一个script：vue通常用es6来写，用export default导出，其下面可以包含数据data，生命周期(mounted等)，方法(methods)等style：样式通过style标签包裹，默认是影响全局的，如需定义作用域只在该组件下起作用，需在标签上加scoped--&gt;&lt;!--HelloWorld.vue文件--&gt;&lt;template&gt;  &lt;div class&#x3D;&quot;hello&quot;&gt;    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;&#x2F;h1&gt;    &lt;p&gt;      For a guide and recipes on how to configure &#x2F; customize this project,&lt;br&gt;      check out the      &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;cli.vuejs.org&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;noopener&quot;&gt;vue-cli documentation&lt;&#x2F;a&gt;.    &lt;&#x2F;p&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default &#123;  name: &#39;HelloWorld&#39;,  props: &#123;    msg: String  &#125;&#125;&lt;&#x2F;script&gt;&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;&lt;style scoped&gt;h3 &#123;  margin: 40px 0 0;&#125;ul &#123;  list-style-type: none;  padding: 0;&#125;li &#123;  display: inline-block;  margin: 0 10px;&#125;a &#123;  color: #42b983;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>main.js</li><li>node_modules：用于存放项目的依赖文件</li><li>Public:公共目录</li><li>src：项目源码目录<ul><li>assets:静态资源</li><li>router：路由</li></ul></li><li>.gitignore：git 忽略的配置文件</li><li>babel.config.js：Babel 配置文件，主要作用是将 ES6 转换为 ES5</li><li>package.json：项目的配置文件<ul><li>name：项目名称</li><li>version：项目版本</li><li>description：项目描述</li><li>author：项目作者<br>scripts：封装常用命令</li><li>dependencies：生产环境依赖</li><li>devDependencies：开发环境依赖</li></ul></li></ul><p>axios、vue-axios</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2022/01/09/vue/"/>
      <url>/2022/01/09/vue/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/mui.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--插入值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--插值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&#123;&#123;msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--插一次性值--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-once</span><span class="token punctuation">></span></span>&#123;&#123;oncevalue&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changeValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改一次性值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--插入HTML--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--插入标签属性，属性不能通过&#123;&#123;&#125;&#125;绑定，通过v-bind绑定--></span><span class="token comment">&lt;!--绑定size属性--></span><span class="token comment">&lt;!----></span><span class="token comment">&lt;!----></span><span class="token comment">&lt;!----></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>size<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--绑定id属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--条件渲染--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mv1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--v-ifv-else-ifv-else--></span><span class="token comment">&lt;!--通过key值判断--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type === <span class="token punctuation">'</span>Chinese<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你好，世界！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type === <span class="token punctuation">'</span>English<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>hello,world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>选择语言<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exchangeC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exchangeE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>英文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--&lt;template> 元素当做不可见的包裹元素,在&lt;template>中使用--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>chooseShow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选择显示吗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--v-show,v-if 是惰性的：如果在初始渲染时条件为假，则什么也不做,——直到条件第一次变为真时，才会开始渲染条件块。v-show 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。v-show 不支持 &lt;template> 元素，也不支持 v-else--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>csshow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>show?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>show<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--列表渲染--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mv2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- v-for 绑定数组数据循环读出 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>arrdata in arr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;arrdata&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--访问所有父作用域的 property。v-for 还支持一个可选的第二个参数，即当前项的索引。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;parent&#125;&#125;-&#123;&#123;index+1&#125;&#125;-&#123;&#123;item.msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--在v-for中使用对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>value in object<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;value&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--对象可以使用三个参数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(value,name,index) in object<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;index&#125;&#125;-&#123;&#123;name&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--在&lt;template>上使用，可以渲染多个元素--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&#123;&#123; item.msg &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>请填写<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--事件监听--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mv3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--绑定点击事件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sayhello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击事件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--方法传参--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>say(<span class="token punctuation">'</span>hi<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>sayhi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>say(<span class="token punctuation">'</span>bye<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>saybye<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--v-on用来监听事件并绑定函数 @click 缩写--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>say(<span class="token punctuation">'</span>come on<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>saycomeon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--事件有修饰符，通过修饰符可以限定事件的条件事件修饰符、按键修饰符等。。。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--双向绑定--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mv4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--用 v-model 指令在表单 &lt;input>、&lt;textarea> 及 &lt;select> 元素上创建双向数据绑定。v-model 会忽略所有表单元素的 value、checked、selected attribute 的初始值而总是将 Vue 实例的数据作为数据来源--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit me<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;msg&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--多行文本--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Multiline message is:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">white-space</span><span class="token punctuation">:</span> pre-line<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add multiple lines<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--复选框--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--单复选框--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--for 属性规定 label 与哪个表单元素绑定。--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;checked&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--多复选框多个复选框通过v-model互相联系起来单选是通过v-model绑定到一个值多选是通过v-model绑定到一个数组--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jack<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Jack<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jack<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>john<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>John<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>john<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mike<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Mike<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mike<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Mike<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--单选框多个单选组件通过v-model互相联系--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>picked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>picked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>picked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>three<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>单选：&#123;&#123;picked&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--选择框单选时绑定到一个值多选时绑定到一个数组--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">disabled</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>选择：&#123;&#123;option&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token comment">&lt;!--多选选择框--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>options<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 50px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">disabled</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>选择：&#123;&#123;options&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 引入Vue依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 引入axios文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">/* 声明Vue */</span> <span class="token keyword">var</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el<span class="token operator">:</span><span class="token string">"#mv"</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>msg <span class="token operator">:</span> <span class="token string">"插入文本"</span><span class="token punctuation">,</span>oncevalue <span class="token operator">:</span> <span class="token string">"一次性插值"</span><span class="token punctuation">,</span>html <span class="token operator">:</span> <span class="token string">"&lt;li>插入第一条HTML&lt;/li>&lt;li>插入第二条HTML&lt;/li>"</span><span class="token punctuation">,</span>size <span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token function-variable function">changeValue</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>oncevalue <span class="token operator">=</span><span class="token string">"改变一次性值"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">var</span> mv1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el <span class="token operator">:</span> <span class="token string">"#mv1"</span><span class="token punctuation">,</span>data <span class="token operator">:</span> <span class="token punctuation">&#123;</span>type <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>show <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>ok <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function-variable function">exchangeC</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">"Chinese"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">exchangeE</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">"English"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">chooseShow</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token operator">=</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">csshow</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>ok <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>ok<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">var</span> mv2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el <span class="token operator">:</span> <span class="token string">"#mv2"</span><span class="token punctuation">,</span>data <span class="token operator">:</span> <span class="token punctuation">&#123;</span>arr <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"列表循环"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>items <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>msg<span class="token operator">:</span><span class="token string">"姓名"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>msg<span class="token operator">:</span><span class="token string">"性别"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>msg<span class="token operator">:</span><span class="token string">"身高"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>msg<span class="token operator">:</span><span class="token string">"体重"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>parent <span class="token operator">:</span> <span class="token string">"同学"</span><span class="token punctuation">,</span>object <span class="token operator">:</span> <span class="token punctuation">&#123;</span>title <span class="token operator">:</span> <span class="token string">"目录"</span><span class="token punctuation">,</span>chapter <span class="token operator">:</span> <span class="token string">"第一章"</span><span class="token punctuation">,</span>value <span class="token operator">:</span> <span class="token string">"第一节"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">var</span> mv3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el <span class="token operator">:</span> <span class="token string">"#mv3"</span><span class="token punctuation">,</span>data <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods<span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function-variable function">sayhello</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">event</span><span class="token template-punctuation string">`</span></span> 是原生 <span class="token constant">DOM</span> 事件<span class="token operator">--</span><span class="token operator">></span><span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function-variable function">say</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">var</span> mv4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>el <span class="token operator">:</span> <span class="token string">"#mv4"</span><span class="token punctuation">,</span>data <span class="token operator">:</span> <span class="token punctuation">&#123;</span>msg <span class="token operator">:</span> <span class="token string">"双向绑定"</span><span class="token punctuation">,</span>message <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>checked <span class="token operator">:</span> <span class="token string">"true"</span><span class="token punctuation">,</span>checkedNames <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>picked <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>option <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>options <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>methods <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/* axios */</span><span class="token comment">/* axios.get */</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>parms <span class="token operator">:</span> <span class="token punctuation">&#123;</span>id <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>name <span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token function">console</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/* axios.post */</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>id <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>name <span class="token operator">:</span> <span class="token string">'li'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">/* axios() */</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>url<span class="token operator">:</span> <span class="token string">'www.baidu.com'</span><span class="token punctuation">,</span>method<span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>params<span class="token operator">:</span> <span class="token punctuation">&#123;</span>id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jvm6</title>
      <link href="/2022/01/07/jvm6/"/>
      <url>/2022/01/07/jvm6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><h2 id="二、语法糖"><a href="#二、语法糖" class="headerlink" title="二、语法糖"></a>二、语法糖</h2><p>语法糖（Syntactic Sugar），也称糖衣语法，指在计算机语言中添加的某种语法，这种语法对语言的 功能并没有影响，但是更方便程序员使用。通常来说，使用语法糖能够增加程序的可读性， 从而减少程序代码出错的机会。 </p><h3 id="2-1-泛型"><a href="#2-1-泛型" class="headerlink" title="2.1.泛型"></a>2.1.泛型</h3><h3 id="2-2-自动装拆箱与循环遍历"><a href="#2-2-自动装拆箱与循环遍历" class="headerlink" title="2.2.自动装拆箱与循环遍历"></a>2.2.自动装拆箱与循环遍历</h3><h3 id="2-3-条件编译"><a href="#2-3-条件编译" class="headerlink" title="2.3.条件编译"></a>2.3.条件编译</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jvm5</title>
      <link href="/2022/01/04/jvm5/"/>
      <url>/2022/01/04/jvm5/</url>
      
        <content type="html"><![CDATA[<h2 id="一、运行时栈帧结构"><a href="#一、运行时栈帧结构" class="headerlink" title="一、运行时栈帧结构"></a>一、运行时栈帧结构</h2> <img src="/2022/01/04/jvm5/%E6%A0%88%E5%B8%A7%E7%BB%93%E6%9E%84.png" class=""><ul><li>栈帧（Stack Frame）是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈（Virtual Machine Stack）的栈元素。栈帧存储了方法的局部 变量表、操作数栈、动态连接和方法返回地址等信息。</li><li>每一个栈帧都包括了局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。</li><li>在编译程序代码的时候，栈帧中需要多大的局部变量表，多深的操作数栈都已经完全确定了，并且写入到方法表的Code属性之中。</li></ul><h3 id="1-1-局部变量表"><a href="#1-1-局部变量表" class="headerlink" title="1.1.局部变量表"></a>1.1.局部变量表</h3><p>​        局部变量表（Local Variable Table）是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。在Java程序编译为Class文件时，就在方法的Code属性的max_locals数据项中确定了该方法所需要分配的局部变量表的最大容量。 </p><p>​        局部变量表的容量以变量槽（Variable Slot，下称Slot）为最小单位，虚拟机规范中并没 有明确指明一个Slot应占用的内存空间大小，只是很有导向性地说到每个Slot都应该能存放一 个boolean、byte、char、short、int、float、reference或returnAddress类型的数据，这8种数据类 型，都可以使用32位或更小的物理内存来存放，但这种描述与明确指出“每个Slot占用32位长 度的内存空间”是有一些差别的，它允许Slot的长度可以随着处理器、操作系统或虚拟机的不同而发生变化。只要保证即使在64位虚拟机中使用了64位的物理内存空间去实现一个Slot，虚拟机仍要使用对齐和补白的手段让Slot在外观上看起来与32位虚拟机中的一致。</p><p>​        第7种reference类型表示对一个对象实例的引用，虚拟机规范既没有说明它的长度，也没有明确指出这种引用应有怎样的结构。但一般来说，虚拟机实现至少都应当能通过这个引用做到两点，一是从此引用中直接或间接地查找到对象在Java堆中的数据存放的起始地址索引，二是此引用中直接或间接地查找到对象所属数据类型在方法区中的存储的类型信息，否则无法实现Java语言规范中定义的语法约束约束。第8种即returnAddress类型目前已经很少见了，它是为字节码指令jsr、jsr_w和ret服务的，指向了一条字节码指令的地址，很古老的Java虚拟机曾经使用这几条指令来实现异常处理，现在已经由异常表代替。</p><h3 id="1-2-操作数栈"><a href="#1-2-操作数栈" class="headerlink" title="1.2.操作数栈"></a>1.2.操作数栈</h3><p>​        操作数栈（Operand Stack）也常称为操作栈，它是一个后入先出（Last In First Out,LIFO）栈。同局部变量表一样，操作数栈的最大深度也在编译的时候写入到Code属性的 max_stacks数据项中。操作数栈的每一个元素可以是任意的Java数据类型，包括long和 double。32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2。</p><p>​        当一个方法刚刚开始执行的时候，这个方法的操作数栈是空的，在方法的执行过程中， 会有各种字节码指令往操作数栈中写入和提取内容，也就是出栈/入栈操作。操作数栈中元素的数据类型必须与字节码指令的序列严格匹配。</p><p>​        在概念模型中，两个栈帧作为虚拟机栈的元素，是完全相互独立的。但在大多虚拟机的实现里都会做一些优化处理，令两个栈帧出现一部分重叠。优点是节约了空间，在方法调用的时候就可以直接共用一部分数据，无须进行参数复制传递了。</p><img src="/2022/01/04/jvm5/%E6%A0%88%E5%B8%A7%E7%BB%93%E6%9E%84%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB.png" class=""><h3 id="1-3-动态连接"><a href="#1-3-动态连接" class="headerlink" title="1.3.动态连接"></a>1.3.动态连接</h3><h3 id="1-4-方法返回地址"><a href="#1-4-方法返回地址" class="headerlink" title="1.4.方法返回地址"></a>1.4.方法返回地址</h3><p>​        无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层方法的执行状态。</p><h2 id="二、方法调用"><a href="#二、方法调用" class="headerlink" title="二、方法调用"></a>二、方法调用</h2><p> 方法调用阶段唯一的任务就是确定被调用方法的版本（即调用哪一个方法），暂时还不涉及方法内部的具体运行过程。</p><h3 id="2-1-类加载过程中解析"><a href="#2-1-类加载过程中解析" class="headerlink" title="2.1.类加载过程中解析"></a>2.1.类加载过程中解析</h3><p>​        在类加载的解析阶段，会将其中的一部分符号引用转化为直接引用，这 种解析能成立的前提是：方法在程序真正运行之前就有一个可确定的调用版本，并且这个方 法的调用版本在运行期是不可改变的。</p><p>​        在Java语言中符合“编译期可知，运行期不可变”这个要求的方法，主要包括静态方法和 私有方法两大类，前者与类型直接关联，后者在外部不可被访问，这两种方法各自的特点决 定了它们都不可能通过继承或别的方式重写其他版本，因此它们都适合在类加载阶段进行解 析。</p><p>​        只要能被invokestatic和invokespecial指令调用的方法，都可以在解析阶段中确定唯一的调用版本，符合这个条件的有静态方法、私有方法、实例构造器、父类方法4类，它们在类加载的时候就会把符号引用解析为该方法的直接引用。</p><h3 id="2-2-分派"><a href="#2-2-分派" class="headerlink" title="2.2.分派"></a>2.2.分派</h3><h4 id="2-2-1-静态分派-如重载"><a href="#2-2-1-静态分派-如重载" class="headerlink" title="2.2.1.静态分派(如重载)"></a>2.2.1.静态分派(如重载)</h4><p>静态分派发生在编译阶段。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticDispatch</span><span class="token punctuation">&#123;</span>     <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Human</span> guy<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,guy！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Man</span> guy<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,gentleman！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> guy<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,lady！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">Human</span> man<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Human</span> woman<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">StaticDispatch</span> sr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StaticDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         sr<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token punctuation">;</span>         sr<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>woman<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token comment">/*执行结果hello,guy！hello,guy！*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*Human 称为静态类型；Man 称为实际类型，或者运行时类型；*/</span><span class="token class-name">Human</span> man <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*动态类型的类型在编译期类型不可确定，只有在运行期才能确定。静态类型的类型在编译期确定*/</span><span class="token class-name">Human</span> human <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//动态类型变化。</span><span class="token class-name">Human</span> human <span class="token operator">=</span> <span class="token punctuation">(</span>man<span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Human</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//类型强转，静态类型变化。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重载的方法版本确定取决于传入参数的数量和类型，重载的版本是根据参数的静态类型来确定的</p><p>所以上面的main方法的执行结构都是执行参数为Human的方法体。</p><h4 id="2-2-2-动态分派-如重写"><a href="#2-2-2-动态分派-如重写" class="headerlink" title="2.2.2.动态分派(如重写)"></a>2.2.2.动态分派(如重写)</h4><p>动态分派在运行时执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDispatch</span><span class="token punctuation">&#123;</span>     <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span>         <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"man say hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"woman say hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Human</span> man<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Human</span> woman<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         man<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        woman<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         man<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        man<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*执行结果man say hellowoman say hello woman say hello*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 运行时解析过程大致分为以下几个步骤： </p><ul><li>找到操作数栈顶的第一个元素所指向的对象的实际类型，记作C。 </li><li>如果在类型C中找到与常量中的描述符和简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回java.lang.IllegalAccessError异常。 </li><li>否则，按照继承关系从下往上依次对C的各个父类进行第2步的搜索和验证过程。 </li><li>如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常。 </li></ul><h4 id="2-2-3-单分派和多分派"><a href="#2-2-3-单分派和多分派" class="headerlink" title="2.2.3.单分派和多分派"></a>2.2.3.单分派和多分派</h4><p>java是静态多分派、动态单分派语言。</p><p>单分派是指根据一个宗量对目标方法进行选择。多分派是指根据多于一个宗量对目标方法选择。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dispatch</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> QQ<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> _360<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">&#123;</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hardChoice</span><span class="token punctuation">(</span><span class="token class-name">QQ</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father choose qq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hardChoice</span><span class="token punctuation">(</span>_360 arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father choose 360"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">&#123;</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hardChoice</span><span class="token punctuation">(</span><span class="token class-name">QQ</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"son choose qq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hardChoice</span><span class="token punctuation">(</span>_360 arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"son choose 360"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token class-name">Father</span> father<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Father</span> son<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        father<span class="token punctuation">.</span><span class="token function">hardChoice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">_360</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         son<span class="token punctuation">.</span><span class="token function">hardChoice</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">QQ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*执行结果：father choose 360 son choose qq*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态多分派：</p><p>编译阶段编译器的选择过程，也就是静态分派的过程。这时选择目标方法的依据有两点：一是方法所属，二是方法参数；静态分派都是根据静态类型。这次选择结果分别为常量池中指向Father.hardChoice(360)及Father.hardChoice(QQ)方法的符号引用。</p><p>动态单分派：</p><p>动态分派的过程，在执行“son.hardChoice(new QQ())”这句代码时，由于编译期已经决定目标方法的签名必须为hardChoice(QQ)，虚拟机此时不会关心传递过来的参数，这时参数的静态类型、实际类型都对方法的选择不会构成任何影响，唯一可以影响虚拟机选择的因素只有此方法的接受者的实际类型是 Father还是Son。</p><h4 id="2-2-4-动态分派的实现"><a href="#2-2-4-动态分派的实现" class="headerlink" title="2.2.4.动态分派的实现"></a>2.2.4.动态分派的实现</h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jvm4</title>
      <link href="/2022/01/02/jvm4/"/>
      <url>/2022/01/02/jvm4/</url>
      
        <content type="html"><![CDATA[<h2 id="一、类加载时机"><a href="#一、类加载时机" class="headerlink" title="一、类加载时机"></a>一、类加载时机</h2><img src="/2022/01/02/jvm4/%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" class=""><p>加载、验证、准备、初始化、卸载这五个阶段顺序是确定的，解析阶段的顺序可能在初始化之后，即支持动态绑定。</p><h3 id="初始化时机"><a href="#初始化时机" class="headerlink" title="初始化时机"></a>初始化时机</h3><p>有且只有六种情况会执行初始化；</p><ul><li>遇到new、getstatic、putstatic或invokestatic这4条字节码指令时，如果类没有进行过初始化，则需要先触发其初始化。<ul><li>使用new关键字 实例化对象的时候</li><li>读取或设置一个类的静态字段（被final修饰、已在编译期把结果放入常 量池的静态字段除外）的时候</li><li>调用一个类的静态方法的时候。 </li></ul></li><li>使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有进行过初始化， 则需要先触发其初始化。 </li><li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父 类的初始化。 </li><li>当虚拟机启动时，用户需要指定一个要执行的主类（包含main（）方法的那个 类），虚拟机会先初始化这个主类。 </li><li>当使用JDK 1.7的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果REF_getStatic、REF_putStatic、REF_invokeStatic的方法句柄，并且这个方法句柄 所对应的类没有进行过初始化，则需要先触发其初始化。 </li><li>当接口中定义了JDK8新加入的默认方法时，如果这个接口的实现类发生了初始化，那么接口在其之前被初始化。</li></ul><h2 id="二、类加载过程"><a href="#二、类加载过程" class="headerlink" title="二、类加载过程"></a>二、类加载过程</h2><h3 id="2-1-加载"><a href="#2-1-加载" class="headerlink" title="2.1. 加载"></a>2.1. 加载</h3><ul><li>通过一个类的全限定名来获取定义此类的二进制字节流。 </li><li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。 </li><li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。 </li></ul><h3 id="2-2-验证"><a href="#2-2-验证" class="headerlink" title="2.2.验证"></a>2.2.验证</h3><p>​        目的是为了确保Class文件的字节流中包含的信息 符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。 验证阶段是非常重要的，这个阶段是否严谨，直接决定了Java虚拟机是否能承受恶意代码的攻击</p><ul><li><p>文件格式验证</p><p>第一阶段要验证字节流是否符合Class文件格式的规范</p></li><li><p>元数据验证</p><p>第二阶段是对字节码描述的信息进行语义分析；第二阶段的主要目的是对类的元数据信息进行语义校验，保证不存在不符合Java语言规 范的元数据信息。</p></li><li><p>字节码验证</p><p>这个阶段将对类的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机 安全的事件</p></li><li><p>符号引用验证</p><p>发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在连接的第三阶段——解析阶段中发生。符号引用验证可以看做是对类自身以外（常量池中 的各种符号引用）的信息进行匹配性校验；符号引用验证的目的是确保解析动作能正常执行。</p></li></ul><h3 id="2-3-准备"><a href="#2-3-准备" class="headerlink" title="2.3.准备"></a>2.3.准备</h3><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配首先，这时候进行内存分配的仅包括类变量（被static修饰的变量）这里所说的初始值“通常情况”下是 数据类型的零值。 </p> <img src="/2022/01/02/jvm4/%E9%9B%B6%E5%80%BC.png" class=""><p>如果类字段属性表中存在ConstantValue属性，在准备阶段变量值初始化为所指定的值。</p><h3 id="2-4-解析"><a href="#2-4-解析" class="headerlink" title="2.4.解析"></a>2.4.解析</h3><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，在Class文件它以CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info等类型的常量出现</p><ul><li><p> 符号引用（Symbolic References）：符号引用以一组符号来描述所引用的目标，符号可 以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的 内存布局无关，引用的目标并不一定已经加载到内存中。各种虚拟机实现的内存布局可以各 不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义 在Java虚拟机规范的Class文件格式中。 </p></li><li><p>直接引用（Direct References）：直接引用可以是直接指向目标的指针、相对偏移量或是 一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局相关的，同一个符号引 用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在内存中存在。 </p></li><li><p>符合引用和直接引用</p></li><li><p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点 限定符7类符号引用进行，分别对应于常量池的CONSTANT_Class_info、 CONSTANT_Fieldref_info、CONSTANT_Methodref_info、 CONSTANT_InterfaceMethodref_info、CONSTANT_MethodType_info、 CONSTANT_MethodHandle_info和CONSTANT_InvokeDynamic_info 7种常量类型 。</p><img src="/2022/01/02/jvm4/Fiedref.png" class=""><img src="/2022/01/02/jvm4/interfaceMethodref.png" class=""><img src="/2022/01/02/jvm4/methodref.png" class=""><img src="/2022/01/02/jvm4/NameTyperef.png" class=""></li></ul><h3 id="2-5-初始化"><a href="#2-5-初始化" class="headerlink" title="2.5.初始化"></a>2.5.初始化</h3><h2 id="三、类加载器"><a href="#三、类加载器" class="headerlink" title="三、类加载器"></a>三、类加载器</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1.概述"></a>3.1.概述</h3><p>​        “通过一个类的全限定名来获取描述此类的二进制字 节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的 类。实现这个动作的代码模块称 为“类加载器”每一个类加载器，都拥有一个独立的类名称空间。这句话可以表达得更通 俗一些：比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意 义，否则，即使这两个类来源于同一个Class文件，被同一个虚拟机加载，只要加载它们的类 加载器不同，那这两个类就必定不相等。</p><p>​        虚拟机中存在了两个ClassLoaderTest类，一个 是由系统应用程序类加载器加载的，另外一个是由我们自定义的类加载器加载的，虽然都来 自同一个Class文件，但依然是两个独立的类，做对象所属类型检查时结果为false。</p><h3 id="3-2-双亲委派模型"><a href="#3-2-双亲委派模型" class="headerlink" title="3.2.双亲委派模型"></a>3.2.双亲委派模型</h3><img src="/2022/01/02/jvm4/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.png" class=""><ul><li><p>启动类加载器（Bootstrap ClassLoader）：前面已经介绍过，这个类将器负责将存放在＜ JAVA_HOME＞\lib目录中的，或者被</p><p>-Xbootclasspath参数所指定的路径中的，并且是虚拟机 识别的（仅按照文件名识别，如rt.jar，名字不符合的类库即使放在lib目录中也不会被加载） 类库加载到虚拟机内存中。启动类加载器无法被Java程序直接引用。</p></li><li><p>扩展类加载器（Extension ClassLoader）：这个加载器由sun.misc.Launcher $ExtClassLoader实现，它负责加载＜JAVA_HOME＞</p><p>\lib\ext目录中的，或者被java.ext.dirs系 统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器。</p></li><li><p>应用程序类加载器（Application ClassLoader）：这个类加载器由sun.misc.Launcher $App- ClassLoader实现。由于这个类加载器是ClassLoader中的getSystemClassLoader( )方法的返回值，所以一般也称它为系统类加载器。负责加载用户类路径(ClassPath)上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一 般情况下这个就是程序中默认的类加载器。</p></li><li><p>双亲委派模型的工作过程</p><p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p><ul><li><p>作用</p><p>使用双亲委派模型来组织类加载器之间的关系，有一个显而易见的好处就是Java类随着它的类加载器一起具备了一种带有优先级的层次关系。例如类java.lang.Object，它存放在rt.jar之中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。相反，如果没有使用双亲委派模型，由各个类加载器自行去加载的话，如果用户自己编写了一个称为java.lang.Object的类，并放在程序的ClassPath中，那系统中将会出现多个不同的Object类，Java类型体系中最基础的行为也就无法保证，应用程序也将会变得一片混乱。如果读者有兴趣的话，可以尝试去编写一个与rt.jar类库中已有类重名的Java类，将会发现可以正常编译，但永远无法被加载运行。 </p></li><li><p>实现</p><p>双亲委派模型对于保证Java程序的稳定运作很重要，但它的实现却非常简单，实现双亲委派的代码都集中在java.lang.ClassLoader的loadClass（）方法之中：先检查是否已经被加载过，若没有加载则调用父加载器的loadClass()方 法，若父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，抛出 ClassNotFoundException异常后，再调用自己的findClass()方法进行加载。</p></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jvm3</title>
      <link href="/2022/01/02/jvm3/"/>
      <url>/2022/01/02/jvm3/</url>
      
        <content type="html"><![CDATA[<p>​        Java虚拟机不和包括Java在内的任何语言绑定,它只与“Class文件”这种特定的二进制文件格式所关联, Class文件中包含<br>了Java虚拟机指令集和符号表以及若干其他辅助信息。</p><p>​        Java语言中的各种变量、关键字和运算符号的语义最终都是由多条字节码命令组合而成的，因此字节码命令所能提供的语义描述能力肯定会比Java语言本身更加强大。因此，有一些Java语言本身无法有效支持的语言特性不代表字节码本身无法有效支持, 这也为其他语言实现一些有别于Java的语言特性提供了基础。</p><h2 id="一、类文件结构"><a href="#一、类文件结构" class="headerlink" title="一、类文件结构"></a>一、类文件结构</h2><p>Class文件是一组以8个字节为基础单位的二进制流，有两种数据类型：无符号数和表。</p><ul><li>无符号数属于基本的数据类型,以ul、u2、 u4、 u8来分别代表1个字节、2个字节、4个字节和8个字节的无符号数,无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成字符串值。</li><li> 表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性地以“info”结尾。表用于描述有层次关系的复合结构的数据,整个Class文件本质上就是一张表，下表所示的数据项构成。</li></ul><img src="/2022/01/02/jvm3/class%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png" class=""><ul><li><p>头四个字节称为魔数，作用是确定这个文件是否是一个能被虚拟机接受的Class文件。</p></li><li><p>第5和第6个为次版本号</p></li><li><p>第7和第8个为主版本号</p></li><li><p>紧接着是常量池入口</p><p>常量池中主要存放两大类常量：字面量和符号引用。字面量如文本字符串、声明为final的常量值等。符号引用包括三类常量：类和接口的全限定名、字段的名称和描述符、方法的名称和描述符。</p><img src="/2022/01/02/jvm3/%E5%B8%B8%E9%87%8F%E6%B1%A0%E7%BB%93%E6%9E%84.png" class=""></li><li><p>第9和第10个字节代表常量池中的计数值，如上图为十六进制0x0016，即22，代表容量池中有21项常量，索引范围1-21.设计者将第0项常量设为空，通常来表达不引用任何一个常量池。</p><ul><li>紧接着是一个常量池表结构 </li></ul><img src="/2022/01/02/jvm3/%E5%B8%B8%E9%87%8F%E6%B1%A0%E9%A1%B9%E7%9B%AE%E7%B1%BB%E5%9E%8B.png" class=""><p>某些相关的常量池表结构如下：</p><img src="/2022/01/02/jvm3/class%E7%BB%93%E6%9E%84.png" class=""><img src="/2022/01/02/jvm3/utf-8%E7%BB%93%E6%9E%84.png" class=""><p>如上图中0016之后，紧接着一个表结构，tag为07，即Class_info表，则tag之后紧接着u2为常量池的索引值。</p></li><li><p>紧接着的u2代表访问标志，用于表示类或接口的信息</p><img src="/2022/01/02/jvm3/%E8%AE%BF%E9%97%AE%E6%A0%87%E5%BF%97.png" class=""></li><li><p>紧接着的u2为类索引，然后的u2为父类索引，然后的u2为接口数量，之后的u2集合代表接口索引</p><p>类索引、父类索引和接口索引集合都按顺序排列在访问标志之后，类索引和父类索引用 。</p><p>两个u2类型的索引值表示，它们各自指向一个类型为CONSTANT_Class_info的类描述符常量，通过CONSTANT_Class_info类型的常量中的索引值可以找到定义在 CONSTANT_Utf8_info类型的常量中的全限定名字符串。</p><img src="/2022/01/02/jvm3/%E7%B1%BB%E7%B4%A2%E5%BC%95%E6%9F%A5%E6%89%BE.png" class=""></li><li><p>紧接着的u2代表字段的数量</p></li><li><p>然后之后是字段表集合</p><img src="/2022/01/02/jvm3/%E5%AD%97%E6%AE%B5%E8%A1%A8.png" class=""><ul><li>access_flags代表字段访问标志</li><li>name_index代表字段的简单名称</li><li>descriptor_index代表字段的描述符，如数据类型</li><li>在descriptor_index 之后跟随着一个属性表集合用于存储一些额外的信息，字段都可以在属性表中描述零至多项的额外信息。</li><li>字段表集合中不会列出从超类或者父接口中继承而来的字段，但有可能列出原本Java代码之中不存在的字段，譬如在内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段。另外，在Java语言中字段是无法重载的，两个字段的数据类型、修饰符不管是否相同，都必须使用不一样的名称，但是对于字节码来讲，如果两个字段的描述符不一致，那字段重名就是合法的。 </li></ul></li><li><p>紧接着u2是方法数量</p></li><li><p>之后是方法表集合</p><img src="/2022/01/02/jvm3/%E6%96%B9%E6%B3%95%E8%A1%A8%E7%BB%93%E6%9E%84.png" class=""><ul><li>access_flags代表方法访问标志</li><li>name_index代表方法的简单名称</li><li>descriptor_index代表方法的描述符，如方法参数列表、返回值 </li></ul></li><li><p>紧接着是属性表</p><ul><li>Java程序方法体中的代码经过Javac编译器处理后，最终变为字节码指令存储在Code属性内。Code属性出现在方法表的属性集合之中。</li><li>Exceptions属性的作用是列举出方法中可能抛出的受查异常 （Checked Excepitons），也就是方法描述时在throws关键字后面列举的异常。出现在方法表中。</li><li>LineNumberTable属性用于描述Java源码行号与字节码行号（字节码的偏移量）之间的对应关系。如果选择不生成LineNumberTable 属性，对程序运行产生的最主要的影响就是当抛出异常时，堆栈中将不会显示出错的行号， 并且在调试程序的时候，也无法按照源码行来设置断点。出现在code属性中。</li><li>LocalVariableTable属性用于描述栈帧中局部变量表中的变量与Java源码中定义的变量之 间的关系，出现在code属性中。</li><li>SourceFile属性用于记录生成这个Class文件的源码文件名称。出现在类文件中。</li><li>ConstantValue属性的作用是通知虚拟机自动为静态变量赋值。只有被static关键字修饰的变量（类变量）才可以使用这项属性。出现在字段表中。</li></ul></li></ul><h2 id="二、字节码指令"><a href="#二、字节码指令" class="headerlink" title="二、字节码指令"></a>二、字节码指令</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shiro</title>
      <link href="/2022/01/02/shiro/"/>
      <url>/2022/01/02/shiro/</url>
      
        <content type="html"><![CDATA[<img src="/2022/01/02/shiro/shiro.png" class=""><p>Shiro的功能和组件</p><p>Shiro主要功能</p><p>➢Authentication: 身份认证/登录,验证用户是不是拥有相应的身份;</p><p>➢Authorization :授权,即权限验证,验证某个已认证的用户是否拥有某个权限;即判断用户是否能做事情,常见的如:验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限;</p><p>➢Session Manager :会话管理,即用户登录后就是一次会话,在没有退出之前，它的所有信息都在会话中;会话可以是普通，JavaSE环境的,也可以是如Web环境的;</p><p>➢Cryptography :加密,保护数据的安全性,如密码加密存储到数据库,而不是明文存储;</p><img src="/2022/01/02/shiro/shiro%E7%BB%84%E4%BB%B6.png" class=""><p>➢Subject :应用代码直接交互的对象是Subject ,所有Subject都绑</p><p>定到SecurityManager 可以把Subject认为是一个门面;SecurityManager才是实际的执行者</p><p>➢SecurityManager :安全管理器即所有与安全有关的操作都会与SecurityManager交互;且它管理着所有Subject ;可以看出它是Shiro的核心，它负责与后边介绍的其他组件进行交互,如果学习过SpringMvc ,你可以把它着成DispatcherServlet前端控制器;</p><p>➢Realm :域, Shiro从从Realm获取安全数据(如用户、角色、权限). ,就是说SecurityManager要验证用户身份; 那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法i也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作;可以把Realm看成DataSource，即安全数据源。</p><p>SSM 集成 shiro</p><p>&lt;1 maven 添加依赖</p><p>&lt;2 spring-shiro 配置</p><p>&lt;3 自定义Realm</p><p>&lt;4 在web.xml中声明</p><p>Springboot 集成shiro</p><p>&lt;1添加依赖</p><p>&lt;2编写shiro-java配置类</p><p>&lt;3自定义Realm</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springMVC1</title>
      <link href="/2022/01/02/springmvc1/"/>
      <url>/2022/01/02/springmvc1/</url>
      
        <content type="html"><![CDATA[<p><em><strong>*控制器开发：*</strong></em></p><p>获取请求参数</p><p>处理业务逻辑</p><p>绑定模型和视图</p><h2 id="组件开发"><a href="#组件开发" class="headerlink" title="组件开发"></a>组件开发</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token function">controller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token keyword">public</span> 返回值 <span class="token function">doSome</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h3><p>可以在类上,也可在方法上</p><p>value属性：String类型,是URL,访问地 址,以 / 开头；当出现在类上,value指根目录,在方法上指全部目录</p><p>method属性：指定请求方法,枚举类型 RequestMethod.Get/Post..</p><img src="/2022/01/02/springmvc1/%E6%96%B9%E6%B3%95.png" class=""><h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><ul><li><p>HttpServletRequest</p></li><li><p>HttpServletResponse</p></li><li><p>HttpSession</p></li><li><p>请求中所携带的请求参数</p></li><li><p>Model model</p></li></ul><h3 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h3><ul><li><p>通过HttpServletRequest、HttpServletResponse、HttpSession获取</p></li><li><p>逐个参数接受：保证请求参数名与该请求处理方法的参数名相同即可自动接收</p></li><li><p>pojo类型参数,当请求和参数名和pojo的属性相同,则自动映射</p></li><li><p>@RequestParam 当HTTP请求和方法参数不同时,可以使用注释来映射</p><p>public xxxx(@RequesParam(“http中的请求名”) String 方法参数)</p><p>eg：public xxxx (@RequestParam(“student-name”)  String studentName)</p></li><li><p>URL传递地址  @PathVariable</p><p>@RequestMapping(“/getname****/{id}****”)</p><p>public xxxx(<em><strong>*@PathVariable(*</strong>*“*</em><em><strong><strong>*id*</strong></strong></em><em>*”*</em>** Long id)){}</p></li><li><p>@RequestBody</p><p>注解@RequestBody接收的参数是来自requestBody中,即请求体。多用于json</p></li></ul><h3 id="获取属性参数"><a href="#获取属性参数" class="headerlink" title="获取属性参数"></a>获取属性参数</h3><p>将存在HTTP的request对象和session对象中的参数取出</p><ul><li><p>@RequestAttribute 将存在request对象中的参数取出</p><p>eg: request.setAttribute(“id”,”1L”);  存入request对象中</p><p>request.getRequestDispatcher(“./xxxx”).forword(request,reponse);</p><p>获取参数</p><p>@RequstMapping(“/xxxx”)</p><p>public void getRequestParam(@RequestAtrribute(“id”) Long id){}</p></li><li><p>@SessionAttribute和@SessionAttributes 获取session域中的参数</p></li></ul><ul><li>@CookieValue  获得cookie域中的参数</li></ul><ul><li>@RequestHeader  从请求头中获取参数</li></ul><h3 id="方法返回值"><a href="#方法返回值" class="headerlink" title="方法返回值"></a>方法返回值</h3><ul><li><p>第一种：ModelAndView</p><p>若处理器方法处理完后,需要跳转到其它资源,且又要在跳转的资源间传递数据,此时处理器方法返回 ModelAndView 比较好。当然,若要返回 ModelAndView,则处理器方法中需要定义 ModelAndView 对象。在使用时,若该处理器方法只是进行跳转而不传递数据,或只是传递数据而并不向任何资源跳转（如对页面的 Ajax 异步响应）,此时若返回 ModelAndView,则将总是有一部分多余：要么 Model 多余,要么 View 多余。即此时返回 ModelAndView 将不合适。</p></li><li><p>第二种：String</p><p>处理器方法返回的字符串可以指定逻辑视图名,通过视图解析器解析可以将其转换为物理视图地址返回 内部资源逻辑视图名若要跳转的资源为内部资源,则视图解析器可以使用 InternalResourceViewResolver 内部资源视图解析器。此时处理器方法返回的字符串就是要跳转页面的文件名去掉文件扩展名后的部分。这个字符串与视图解析器中的 prefix、suffix 相结合,即可形成要访问的 URI。</p></li><li><p>第三种：无返回值 void</p><p>对于处理器方法返回 void 的应用场景,AJAX 响应.若处理器对请求处理后,无需跳转到其它任何资源,此时可以让处理器方法返回 void。</p></li><li><p>第四种：返回自定义类型对象</p><p>处理器方法也可以返回 Object 对象。这个 Object 可以是 Integer,String,自定义对象,Map,List 等。但返回的对象不是作为逻辑视图出现的,而是作为直接在页面显示的数据出现的。返回对象,需要使用@ResponseBody 注解,将转换后的 JSON 数据放入到响应体中。使用Jackson声明注册驱动将 Object 数据转化为 JSON 数据,需要由消息转换器 HttpMessageConverter 完成。而转换器的开启,需要由 &lt; mvc:annotation-driven/ &gt;来完成。SpringMVC 使用消息转换器实现请求数据和对象,处理器方法返回对象和响应输出之间的自动转换当 Spring 容器进行初始化过程中,在&lt; mvc:annotation-driven/ &gt;处创建注解驱动时,默认创建了七个 HttpMessageConverter 对象。也就是说,我们注册&lt; mvc:annotation-driven/ &gt;,就是为了让容器为我们创建 HttpMessageConverter 对象。</p></li></ul><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>springMVC</title>
      <link href="/2022/01/02/springmvc/"/>
      <url>/2022/01/02/springmvc/</url>
      
        <content type="html"><![CDATA[<h2 id="一、MVC架构"><a href="#一、MVC架构" class="headerlink" title="一、MVC架构"></a>一、MVC架构</h2><img src="/2022/01/02/springmvc/MVC%E6%9E%B6%E6%9E%84.png" class=""><h2 id="二、组件和开发流程"><a href="#二、组件和开发流程" class="headerlink" title="二、组件和开发流程"></a>二、组件和开发流程</h2><img src="/2022/01/02/springmvc/%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" class=""><p>（1）浏览器提交请求到中央调度器</p><p>（2）中央调度器直接将请求转给处理器映射器。</p><p>（3）处理器映射器会根据请求,找到处理该请求的处理器,并将其封装为处理器执行链后返回给中央调度器。</p><p>（4）中央调度器根据处理器执行链中的处理器,找到能够执行该处理器的处理器适配器。</p><p>（5）处理器适配器调用执行处理器。</p><p>（6）处理器将处理结果及要跳转的视图封装到一个对象 ModelAndView 中,并将其返回给处理器适配器。</p><p>（7）处理器适配器直接将结果返回给中央调度器。</p><p>（8）中央调度器调用视图解析器,将 ModelAndView 中的视图名称封装为视图对象。</p><p>（9）视图解析器将封装了的视图对象返回给中央调度器</p><p>（10）中央调度器调用视图对象,让其自己进行渲染,即进行数据填充,形成响应对象。</p><p>（11）中央调度器响应浏览器。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>xml</title>
      <link href="/2021/12/17/xml/"/>
      <url>/2021/12/17/xml/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-什么是xml"><a href="#1-1-什么是xml" class="headerlink" title="1.1.什么是xml"></a>1.1.什么是xml</h3><p>xml:即可扩展标记语言，xml是互联网数据传输的重要工具，它可以跨越互联网任何的平台，不受编程语言和<a href="http://lib.csdn.net/base/operatingsystem">操作系统</a>的限制，可以说它是一个拥有互联网最高级别通行证的数据携带者。xml是当前处理结构化文档信息中相当给力的技术，xml有助于在服务器之间穿梭结构化数据，这使得开发人员更加得心应手的控制数据的存储和传输。</p><p>Xml用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。Xml是标准通用标记语言（SGML）的子集，非常适合Web传输。XML提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据。</p><h2 id="二、xml文件结构"><a href="#二、xml文件结构" class="headerlink" title="二、xml文件结构"></a>二、xml文件结构</h2><h3 id="2-1-声明"><a href="#2-1-声明" class="headerlink" title="2.1.声明"></a>2.1.声明</h3><table><thead><tr><th>属性</th><th>是否必须</th><th>说明</th><th>值</th></tr></thead><tbody><tr><td><strong>version</strong></td><td>是</td><td>xml文档的版本</td><td>基本是：1.0</td></tr><tr><td>encoding</td><td>否</td><td>xml文档字符</td><td>默认：UTF-8</td></tr><tr><td>standalone</td><td>否</td><td>xml是否为独立文档（解释：是否依赖外部约束文件</td><td>默认：UTF-8。yes、no</td></tr></tbody></table><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="gb2312"  standalone="yes"?></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-DOCTYPE-Document-Type-Definiton-DTD"><a href="#2-2-DOCTYPE-Document-Type-Definiton-DTD" class="headerlink" title="2.2.DOCTYPE (Document Type Definiton DTD)"></a>2.2.DOCTYPE (Document Type Definiton DTD)</h3><p>文档类型定义，不是必须的。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> 紧随XML声明之后，它包括着所有的实体声明。 <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">根元素标记名</span><span class="token punctuation">[</span><span class="token internal-subset">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!—实体声明--</span><span class="token punctuation">></span></span></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-元素和文本"><a href="#2-3-元素和文本" class="headerlink" title="2.3.元素和文本"></a>2.3.元素和文本</h3><p>每个XML文档必须有且只有一个根元素；根元素是一个完全包括文档中其他所有元素的元素；其他元素可以是子元素或者文本。根元素的开始标记放在其他所有元素的开始标记之前；根元素的结束标记放在其他所有元素的结束标记之后。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>size</span><span class="token punctuation">></span></span>36<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>size</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>要么让元素包含子元素，要么让元素包含文本。应避免下面这种情况。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span><span class="token punctuation">></span></span>            name            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>size</span><span class="token punctuation">></span></span>36<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>size</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-其他标记"><a href="#2-4-其他标记" class="headerlink" title="2.4.其他标记"></a>2.4.其他标记</h3><img src="/2021/12/17/xml/%E5%85%B6%E4%BB%96.png" class=""><h2 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h2><img src="/2021/12/17/xml/%E9%AA%8C%E8%AF%81.png" class=""><h2 id="四、命名空间"><a href="#四、命名空间" class="headerlink" title="四、命名空间"></a>四、命名空间</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>powerDesigner</title>
      <link href="/2021/12/16/powerdesigner/"/>
      <url>/2021/12/16/powerdesigner/</url>
      
        <content type="html"><![CDATA[<p>1.创建模型</p><p>File-&gt;New model-&gt;Physical Data Model -&gt;Physical Diagram</p><p>2.创建表</p><img src="/2021/12/16/powerdesigner/%E5%88%9B%E5%BB%BA%E8%A1%A8.png" class=""><p>&lt;1创建表,填写表名code 代码名</p><img src="/2021/12/16/powerdesigner/%E5%88%9B1.png" class=""><p>&lt;2填写字段</p><img src="/2021/12/16/powerdesigner/%E5%88%9B2.png" class=""><p>&lt;3点击每个字段所在行，展示细节</p><img src="/2021/12/16/powerdesigner/%E5%88%9B3.png" class=""><p>&lt;4 引外键</p><img src="/2021/12/16/powerdesigner/%E5%88%9B4.png" class=""><p>依赖谁，就指向谁，父表的主键字段，自动成为子表的外键</p><p>点击箭头线，可以修改子表的外键字段</p><img src="/2021/12/16/powerdesigner/%E5%88%9B5.png" class=""><p>&lt;5Physical Options -&gt;Preview 生成SQL语句</p><img src="/2021/12/16/powerdesigner/%E5%88%9B6.png" class=""><p>3.生成多张表的SQL语句</p><img src="/2021/12/16/powerdesigner/%E7%94%9F1.png" class=""><p>Database-&gt;Generate Database</p><p>通过下载SQL语句文件</p><img src="/2021/12/16/powerdesigner/%E7%94%9F2.png" class=""><p>也可通过Preview复制SQL语句</p><img src="/2021/12/16/powerdesigner/%E7%94%9F3.png" class=""><ol start="4"><li>逆向工程将数据库中的表引入</li></ol><img src="/2021/12/16/powerdesigner/%E9%80%86.png" class=""><p>5.File-&gt;Reverse Engineer-&gt;Database-&gt;选择MySQL -&gt;确定导入SQL语句文件</p><img src="/2021/12/16/powerdesigner/%E5%AF%BC%E5%85%A5SQL.png" class="">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>idea</title>
      <link href="/2021/12/16/idea/"/>
      <url>/2021/12/16/idea/</url>
      
        <content type="html"><![CDATA[<h4 id="Idea的快捷键"><a href="#Idea的快捷键" class="headerlink" title="Idea的快捷键"></a>Idea的快捷键</h4><h5 id="查看类的详细信息"><a href="#查看类的详细信息" class="headerlink" title="查看类的详细信息"></a>查看类的详细信息</h5><p>Ctrl + N    根据输入的类名查找类文件</p><p>Ctrl + H    显示当前类的层次结构</p><p>Ctrl + Alt + U  查看类图，临时查看</p><p>Ctrl + Shift + alt + u  以文件方式呈现类图，在图中空格可以向图中添加类</p><p>Ctrl + F12    查看方法列表和成员变量，包括继承来的方法</p><p>Alt + 7   查看方法列表和成员变量</p><h5 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h5><p>Ctrl + F    在当前文件进行文本查找 </p><p>Ctrl + R    在当前文件进行文本替换 </p><p>Ctrl + Shift + F    根据输入内容查找整个项目 或 指定目录内文件 </p><p>Ctrl + Shift + R    根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 </p><h5 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h5><p>F2    跳转到下一个高亮错误 或 警告位置 </p><p>alt + 1  从代码区域切换到project区域</p><p>Esc   从project区域切换到代码区</p><p>常用快捷键</p><p>Ctrl + Z    撤销  </p><p>Ctrl + Shift + Z    取消撤销 </p><p> Ctrl + O    选择可重写的方法</p><p>Ctrl + I    选择可继承的方法</p><p>Ctrl + alt + insert   新建类 </p><p>alt + insert  构造器，setter，getter </p><p>Ctrl + Y    删除光标所在行 或 删除选中的行 </p><p>Ctrl + D    复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 </p><p>Ctrl + W    递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 </p><p>Ctrl + Shift + W    递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展    取消选中范围 </p><p>Ctrl + /    注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 </p><p>Ctrl + Shift + /    代码块注释 </p><p>Alt + 左方向键    按左方向切换当前已打开的文件视图</p><p>Alt + 右方向键    按右方向切换当前已打开的文件视图</p><p>Ctrl + Alt + 左方向键    退回到上一个操作的地方 （注意与其他软件快捷键冲突）</p><p>Ctrl + Alt + 右方向键    前进到上一个操作的地方 （注意与其他软件快捷键冲突）</p><p>Ctrl + Shift + N    通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠 </p><p>Ctrl + Shift + A    查找动作 / 设置</p><p>End    跳到行尾</p><p>Home 跳到行头</p><p>Ctrl + End    跳到文件尾</p><p>Ctrl + Home    跳到文件头</p><p>Shift + End    选中光标到当前行尾位置</p><p>Shift + Home    选中光标到当前行头位置</p><p>Ctrl + Alt + L    格式化代码，可以对当前文件和整个包目录使用 </p><p>Ctrl + Alt + O    优化导入的类，可以对当前文件和整个包目录使用 </p><p>Alt + Insert    代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</p><p>Alt + Enter    IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 </p><p>Ctrl + Tab    编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</p><p>Ctrl + P    方法参数提示显示</p><p>Ctrl + Shift + U    对选中的代码进行大 / 小写轮流转换 </p><p>Ctrl + Shift + Enter    自动结束代码，行末自动添加分号 </p><p>Ctrl + Space    基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl + 逗号 </p><p>Ctrl快捷键介绍</p><p>Ctrl + G    在当前文件跳转到指定行处</p><p>Ctrl + E    显示最近打开的文件记录列表</p><p>Ctrl + J    插入自定义动态代码模板</p><p>Ctrl + Q    光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</p><p>Ctrl + U    前往当前光标所在的方法的父类的方法 / 接口定义</p><p>Ctrl + B    进入光标所在的方法/变量的接口或是定义出，等效于 Ctrl + 左键单击</p><p>Ctrl + K    版本控制提交项目，需要此项目有加入到版本控制才可用</p><p>Ctrl + T    版本控制更新项目，需要此项目有加入到版本控制才可用</p><p>Ctrl + +    展开代码</p><p>Ctrl + -    折叠代码</p><p>Ctrl + Shift + +    展开所有代码</p><p>Ctrl + Shift + -    折叠所有代码</p><p>Ctrl + [    移动光标到当前所在代码的花括号开始位置</p><p>Ctrl + ]    移动光标到当前所在代码的花括号结束位置</p><p>Ctrl + Shift + [    选中从光标所在位置到它的顶部中括号位置</p><p>Ctrl + Shift + ]    选中从光标所在位置到它的底部中括号位置</p><p>Ctrl + Enter    智能分隔行</p><p>Ctrl + Delete    删除光标后面的单词或是中文句</p><p>Ctrl + BackSpace    删除光标前面的单词或是中文句</p><p>Ctrl + 1,2,3…9    定位到对应数值的书签位置</p><p>Ctrl + 左键单击    在打开的文件标题上，弹出该文件路径</p><p>Ctrl + 光标定位    按 Ctrl 不要松开，会显示光标所在的类信息摘要</p><p>Ctrl + 左方向键    光标跳转到当前单词 / 中文句的左侧开头位置</p><p>Ctrl + 右方向键    光标跳转到当前单词 / 中文句的右侧开头位置</p><p>Alt快捷键介绍</p><p>Alt + `        显示版本控制常用操作菜单弹出层</p><p>Alt + Q    弹出一个提示，显示当前类的声明 / 上下文信息</p><p>Alt + Home    定位 / 显示到当前文件的 Navigation Bar</p><p>Alt + 前方向键    当前光标跳转到当前文件的前一个方法名位置</p><p>Alt + 后方向键    当前光标跳转到当前文件的后一个方法名位置</p><p>Alt + 1,2,3…9    显示对应数值的选项卡，其中 1 是 Project 用得最多</p><p>Shift快捷键    介绍</p><p>Shift + Tab    取消缩进</p><p>Shift + ESC    隐藏当前 或 最后一个激活的工具窗口</p><p>Shift + Enter    开始新一行。光标所在行下空出一行，光标定位到新行位置</p><p>Shift + 左键单击    在打开的文件名上按此快捷键，可以关闭当前打开文件</p><p>Shift + 滚轮前后滚动    当前文件的横向滚动轴滚动</p><p>Ctrl + Alt快捷键介绍</p><p>Ctrl + Alt + I    光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</p><p>Ctrl + Alt + T    对选中的代码弹出环绕选项弹出层</p><p>Ctrl + Alt + J    弹出模板选择窗口，讲选定的代码加入动态模板中</p><p>Ctrl + Alt + H    调用层次</p><p>Ctrl + Alt + B    在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</p><p>Ctrl + Alt + V    快速引进变量</p><p>Ctrl + Alt + Y    同步、刷新</p><p>Ctrl + Alt + Enter    光标所在行上空出一行，光标定位到新行</p><p>Ctrl + Alt + Home    弹出跟当前文件有关联的文件弹出层</p><p>Ctrl + Alt + Space    类名自动完成</p><p>Ctrl + Alt + 前方向键    在查找模式下，跳到上个查找的文件</p><p>Ctrl + Alt + 后方向键    在查找模式下，跳到下个查找的文件</p><p>Ctrl + Shift快捷键    介绍</p><p>Ctrl + Shift + T    对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</p><p>Ctrl + Shift + C    复制当前文件磁盘路径到剪贴板</p><p>Ctrl + Shift + V    弹出缓存的最近拷贝的内容管理器弹出层</p><p>Ctrl + Shift + E    显示最近修改的文件列表的弹出层</p><p>Ctrl + Shift + H    显示方法层次结构</p><p>Ctrl + Shift + B    跳转到类型声明处</p><p>Ctrl + Shift + I    快速查看光标所在的方法 或 类的定义</p><p>Ctrl + Shift + Space    智能代码提示</p><p>Ctrl + Shift + Backspace    退回到上次修改的地方</p><p>Ctrl + Shift + 1,2,3…9    快速添加指定数值的书签</p><p>Ctrl + Shift + 左方向键    在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 /     中文句</p><p>Ctrl + Shift + 右方向键    在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 /     中文句</p><p>Ctrl + Shift + 左方向键    在光标焦点是在工具选项卡上，缩小选项卡区域</p><p>Ctrl + Shift + 右方向键    在光标焦点是在工具选项卡上，扩大选项卡区域</p><p>Ctrl + Shift + 前方向键    光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</p><p>Ctrl + Shift + 后方向键    光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</p><p>Alt + Shift快捷键介绍</p><p>Alt + Shift + N    选择 / 添加 task</p><p>Alt + Shift + F    显示添加到收藏夹弹出层</p><p>Alt + Shift + C    查看最近操作项目的变化情况列表</p><p>Alt + Shift + F    添加到收藏夹</p><p>Alt + Shift + I       查看项目当前文件</p><p>Alt + Shift + 左键双击    选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句</p><p>Alt + Shift + 前方向键    移动光标所在行向上移动</p><p>Alt + Shift + 后方向键    移动光标所在行向下移动</p><p>Ctrl + Shift + Alt快捷键介绍</p><p>Ctrl + Shift + Alt + V    无格式黏贴</p><p>Ctrl + Shift + Alt + N    前往指定的变量 / 方法</p><p>Ctrl + Shift + Alt + C    复制参考信息</p><p>其他快捷键介绍</p><p>Tab    缩进</p><p>ESC    从工具窗口进入代码文件窗口</p><p>连按两次Shift    弹出 Search Everywhere 弹出层</p><p>F 1-9相关快捷键</p><p>F3    在查找模式下，定位到下一个匹配处</p><p>F4    编辑源</p><p>F7    在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体    还有方法，则不会进入该内嵌的方法中</p><p>F8    在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</p><p>F9    在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</p><p>F11    添加书签</p><p>F12    回到前一个工具窗口</p><p>Ctrl + F1    在光标所在的错误代码出显示错误信息</p><p>Ctrl + F3    调转到所选中的词的下一个引用位置</p><p>Ctrl + F4    关闭当前编辑文件</p><p>Ctrl + F8    在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</p><p>Ctrl + F9    执行 Make Project 操作</p><p>Ctrl + F11    选中文件 / 文件夹，使用助记符设定 / 取消书签</p><p>Alt + F1    显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</p><p>Alt + F2    对于前面页面，显示各类浏览器打开目标选择弹出层</p><p>Alt + F3    选中文本，逐个往下查找相同文本，并高亮显示</p><p>Alt + F7    查找光标所在的方法 / 变量 / 类被调用的地方</p><p>Alt + F8    在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</p><p>Ctrl + Alt + F7    显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</p><p>Ctrl + Alt + F11    切换全屏模式</p><p>Shift + F1    如果有外部文档可以连接外部文档</p><p>Shift + F2    跳转到上一个高亮错误 或 警告位置</p><p>Shift + F3    在查找模式下，查找匹配上一个</p><p>Shift + F4    对当前打开的文件，使用新Windows窗口打开，旧窗口保留</p><p>Shift + F7    在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</p><p>Shift + F8    在 Debug 模式下，跳出，表现出来的效果跟 F9 一样</p><p>Shift + F9    等效于点击工具栏的 Debug 按钮</p><p>Shift + F10    等效于点击工具栏的 Run 按钮</p><p>Shift + F11    弹出书签显示层</p><p>Ctrl + Shift + F7    高亮显示所有该选中文本，按Esc高亮消失</p><p>Ctrl + Shift + F8    在 Debug 模式下，指定断点进入条件</p><p>Ctrl + Shift + F9    编译选中的文件 / 包 / Module</p><p>Ctrl + Shift + F12    编辑器最大化</p><p>Alt + Shift + F7    在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌    的方法中，依此循环进入</p><p>Alt + Shift + F9    弹出 Debug 的可选择菜单</p><p>Alt + Shift + F10    弹出 Run 的可选择菜单</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javaweb1</title>
      <link href="/2021/12/15/javaweb1/"/>
      <url>/2021/12/15/javaweb1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Jsp"><a href="#一、Jsp" class="headerlink" title="一、Jsp"></a>一、Jsp</h2><h3 id="1-1-HTML文件与JSP文件区别"><a href="#1-1-HTML文件与JSP文件区别" class="headerlink" title="1.1.HTML文件与JSP文件区别"></a>1.1.HTML文件与JSP文件区别</h3><ul><li>作为资源文件类型不同</li><li>HTML文件属于静态资源文件，其相关命令需要在浏览器编译并执行的.</li><li>JSP文件属于动态资源文件，其相关命令需要在服务端编译并执行的</li></ul><h3 id="1-2-运行原理"><a href="#1-2-运行原理" class="headerlink" title="1.2.运行原理"></a>1.2.运行原理</h3><img src="/2021/12/15/javaweb1/jsp%E5%8E%9F%E7%90%86.png" class=""><ul><li>Tomcat将被访问的JSP文件编辑为Servlet接口实现类java文件</li><li>Tomcat调用JVM将这个java文件[编译]为class类型</li><li>Tomcat根据JSP规范负责生成这个class文件的实例对象。</li><li>Tomcat通过实例对象调用_jspService方法，将JSP文件中书写内容写入到响应体中</li></ul><h3 id="1-3-在JSP文件中如何书写Java命令"><a href="#1-3-在JSP文件中如何书写Java命令" class="headerlink" title="1.3.在JSP文件中如何书写Java命令"></a>1.3.在JSP文件中如何书写Java命令</h3><ul><li><p>执行标记</p><p>&lt;% java代码 %&gt; 声明局部变量</p><p>通知Http服务器将JSP文件中Java命令与其他普通执行结果进行区分</p></li><li><p>输出标记</p><p>&lt;%=输出内容%&gt;</p><p>通知Tomcat将输出标记中变量的值或则输出标记中表达式运算结果写入到响应体</p></li><li><p>如何将Servlet中doGet/doPost方法执行结果交给JSP文件输出</p><p>JSP文件被访问时，并不是JSP文件在执行。而是对应的Servlet在执行,相当于两个servlet互相通信。自定义Servelt接口实现类与JSP文件之间可以通过重定向方案或则请求转发方案进行调用考虑到运行效率问题，一般采用请求转发</p></li></ul><h3 id="1-4-Jsp的内置对象"><a href="#1-4-Jsp的内置对象" class="headerlink" title="1.4.Jsp的内置对象"></a>1.4.Jsp的内置对象</h3><ul><li><p>request 用户端请求，此请求会包含来自GET/POST请求的参数</p></li><li><p>response 网页传回用户端的回应</p></li><li><p>pageContext 网页的属性是在这里管理</p></li><li><p>session 与请求有关的会话期</p></li><li><p>application servlet 正在执行的内容</p></li><li><p>out 用来传送回应的输出</p></li><li><p>config servlet的构架部件</p></li><li><p>page JSP网页本身</p></li><li><p>exception 针对错误网页，未捕捉的例外</p></li></ul><h2 id="二、EL"><a href="#二、EL" class="headerlink" title="二、EL"></a>二、EL</h2><h3 id="2-1-EL表达式"><a href="#2-1-EL表达式" class="headerlink" title="2.1.EL表达式"></a>2.1.EL表达式</h3><p>${作用域对象别名.共享数据}</p><p>命令作用：负责在JSP文件上从作用域对象读取指定的共享数据并输出到响应体</p><p>EL表达式没有提供遍历集合方法，因此无法从作用域对象读取集合内容输出</p><h3 id="2-2-EL表达式—作用域对象别名"><a href="#2-2-EL表达式—作用域对象别名" class="headerlink" title="2.2.EL表达式—作用域对象别名"></a>2.2.EL表达式—作用域对象别名</h3><ul><li>JSP文件可以使用的作用域对象<ul><li>ServletContext  application:  全局作用域对象</li><li>HttpSession  session：会话作用域对象</li><li>HttpServletRequest  request：请求作用域对象</li><li>PageContext  pageContext：当前页作用域对象，JSP文件独有的作用域对象。Servlet中不存在，仅能在当前JSP文件中使用，不能共享给其他Servlet或则其他JSP文件真实开发过程，主要用于JSTL标签</li></ul></li><li>EL表达式提供作用域对象别名<ul><li>JSP            EL表达式</li><li>application        ${applicationScope.共享数据名}</li><li>session          ${sessionScope.共享数据名}</li><li>request          ${requestScope.共享数据名}</li><li>pageContext        ${pageScope.共享数据名}</li></ul></li></ul><h3 id="2-3-EL表达式简化版"><a href="#2-3-EL表达式简化版" class="headerlink" title="2.3.EL表达式简化版"></a>2.3.EL表达式简化版</h3><ul><li><p>命令格式：${共享数据名}    </p></li><li><p>工作原理：在各个域搜索顺序   pageContext—&gt;request—&gt;session—&gt;application</p></li></ul><h3 id="2-4-EL表达式—支持运算表达"><a href="#2-4-EL表达式—支持运算表达" class="headerlink" title="2.4.EL表达式—支持运算表达"></a>2.4.EL表达式—支持运算表达</h3><p>运算表达式:</p><ul><li>数学运算</li><li>关系运算:  &gt;   &gt;=  ==   &lt;  &lt;=  !=（gt  ge   eq  lt  le  !=）</li><li>逻辑运算：  &amp;&amp;  ||   ！</li></ul><h3 id="2-5-EL表达式提供内置对象"><a href="#2-5-EL表达式提供内置对象" class="headerlink" title="2.5.EL表达式提供内置对象"></a>2.5.EL表达式提供内置对象</h3><ul><li><p>命令格式: ${param.请求参数名}</p><ul><li><p>命令作用： 通过请求对象读取当前请求包中请求参数内容并将请求参数内容写入到响应体</p></li><li><p>```java<br>代替命令:<br>  Http://localhost:8080/myWeb/index.jsp?userName=mike&amp;password=123<br>&lt;%</p><pre><code>         String userName =   request.getParameter(&quot;userName&quot;);         String password =   request.getParameter(&quot;password&quot;);</code></pre><p>%&gt;</p><pre><code>&lt;%=userName%&gt; &lt;%=password%&gt;</code></pre><pre class="line-numbers language-none"><code class="language-none">- 命令格式：$&#123;paramValues.请求参数名[下标]&#125;  - 命令作用: 如果浏览器发送的请求参数是[一个请求参数关联多个值],此时可以通过paramVaues读取请求参数下指定位置的值并写入到响应体  - &#96;&#96;&#96;java    代替命令:     http:&#x2F;&#x2F;localhost:8080&#x2F;myWeb&#x2F;index_2.jsp?pageNo&#x3D;1&amp;pageNo&#x3D;2&amp;pageNo&#x3D;3    &lt;%        String  array[]&#x3D; request.getParameterValues(&quot;pageNo&quot;);    %&gt;    第一个值:&lt;%&#x3D;array[0]%&gt;        第二个值:&lt;%&#x3D;array[1]%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="三、Jstl"><a href="#三、Jstl" class="headerlink" title="三、Jstl"></a>三、Jstl</h2><p>JSP标签库（JSP Standard Tag Library，JSTL）替代了过去页面中嵌入Java代码实现业务逻辑的模式，实现了业务逻辑与视图的隔离。</p><p>JSTL必须在支持Servlet/JSP的容器（如Tomcat）中才能运行。jstl通常与el表达式一起使用，el多用于读取数据，jstl多用于对数据的处理，判断、迭代…</p><p>向后台发请求的方式</p><p>1、 link标签的href属性</p><p>2、 script标签的src属性</p><p>3、 img标签的src属性</p><p>4、 ajax发送请求</p><p>5、 表单提交发送请求</p><p>6、 a标签的href发送请求</p><p>7、 iframe的src属性发送请求</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ComputerNetworking9</title>
      <link href="/2021/12/13/computernetworking9/"/>
      <url>/2021/12/13/computernetworking9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ComputerNetworking8</title>
      <link href="/2021/12/13/computernetworking8/"/>
      <url>/2021/12/13/computernetworking8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ComputerNetworking7</title>
      <link href="/2021/12/13/computernetworking7/"/>
      <url>/2021/12/13/computernetworking7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络层(二)</title>
      <link href="/2021/12/12/computernetworking6/"/>
      <url>/2021/12/12/computernetworking6/</url>
      
        <content type="html"><![CDATA[<h2 id="路由选择算法"><a href="#路由选择算法" class="headerlink" title="路由选择算法"></a>路由选择算法</h2><h3 id="1、分类"><a href="#1、分类" class="headerlink" title="1、分类"></a>1、分类</h3><p>集中式路由选择算法：用完整的、全局性的网络知识计算出从源到目的地之间的最低开销路径。</p><p>该算法以所有节点之间的连通性及所有链路的开销为输入。如：LS。</p><p>分散式路由选择算法：路由器以迭代、分布式的方式计算出最低开销路径。</p><p>没有节点拥有关于所有网络链路开销的完整信息。每个节点仅与其直接相连链路的开销即可开始工作，然后通过迭代计算过程以及与相邻节点的信息交换。如：DV。</p><h3 id="2、链路状态路由选择算法-LS"><a href="#2、链路状态路由选择算法-LS" class="headerlink" title="2、链路状态路由选择算法(LS)"></a>2、链路状态路由选择算法(LS)</h3><p>链路状态路路由选择算法是一种全局式路由选择算法。在此算法中，我们是假设所有网络拓扑和链路费用都是已知的（实践中通常是通过让每个结点向网络中所有其他节点广播链路状态分组来完成的）【OSPF协议】，通过节点广播使所有结点具备了该网络等同的完整视图。获得视图之后，通过LS算法可以计算出从源节点到网络任意结点的最低费用路径。</p><p>D(v)：表示从源节点到目标结点v的最低费用路径的费用</p><p>p(x)：从源结点到目标节点v（最低费用路径）的前一个结点（v的邻居）</p><p>N’：如果从源到v的最低费用路径已知，那么可以将v加入N’集合中 </p><p>w：可被加入到N’ 中结点，且节点的费用最小</p><ul><li><p>我们通过图来形象化描述路由选择问题，G=(N，E)是一个有N个节点（代表路由器），E条边（代表链路）的图（代表网络拓扑）。每条链路上的数字代表此链路的费用，如下图所示：</p><img src="/2021/12/12/computernetworking6/LS.png" class=""></li><li><img src="/2021/12/12/computernetworking6/LS1.png" class=""><ul><li>初始化阶段：找出所有与u相邻的邻居节点v，x，w，使D(v)=2，D(x)=1，D(w)=5；其余与u不相邻的y，z节点，其链路费用D(y)=∞，D(z)=∞</li><li>第一次循环：我们找出在初始化阶段结束时具有最低费用的节点x，其费用为1，将节点x加入到N’中，更新与x节点相邻且不在N’中的节点【其实就是v，w，y节点】的D(n)值，计算公式为D(n) = min( D(n) ， D(x)+c(x，n) ），得D(v)=2，D(w)=4，D(y)=2</li><li>第二次循环：我们找出在第一次循环阶段结束时具有最低费用的节点v和y，我们先将y加入到N’，并更新w，z节点的值，得D(w)=3，D(z)=4……..</li><li>直到所有节点都被加入到N’中，循环结束，得到最低费用路径：c(u，v)=2，，c(u，w)=3，c(u，x)=1，c(u，y)=2，c(u，z)=4</li><li>当LS算法终止时，对于每个目标节点，我们都可以从表中找到最短费用路径的前一节点。而对于这个前一节点，又有最短路径的前一节点。依次类推，我们可以得到源节点到任意目标节点最低消费路径的完整路径：</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">(u，v)：u-v(u，w)：u-x-y-w(u，x)：u-x(u，y)：u-x-y(u，z)：u-x-y-u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3、距离向量路由选择算法-DV"><a href="#3、距离向量路由选择算法-DV" class="headerlink" title="3、距离向量路由选择算法(DV)"></a>3、距离向量路由选择算法(DV)</h3><p>每个路由器都有一个路由表，用来表示到任何目的地的最佳路由。</p><p>在DV算法中，每个路由器遵循以下步骤：</p><ul><li><p> 计算所有与本身直接相连的链接的权值并且将信息保存到路由器的路由表中。</p></li><li><p> 一段时间后，路由器将其路由表发送给相邻路由器（不是所有的路由器），同时也收到每个相邻路由器的路由表。</p></li><li><p>根据其相邻路由器的路由表信息，路由器更新自己的路由表。</p></li></ul><p>分布式的：每个节点都要从一个或多个直接相连邻居接受信息，执行计算并将其结果分发给邻居。<br>迭代的：此工程一直要持续到邻居之间无更多信息要交换为止。<br>异步的：节点们不需要在某一固定时刻同时发送和交换信息，不需要所有节点之间步伐一致的操作。<br>收敛的：在有限的次数内，不管初始值如何，路由表中的每一项一定会收敛到某一固定值，即真正的最短距离（如果网络是连通的）。</p><p>例如：</p><img src="/2021/12/12/computernetworking6/DV.png" class=""><p>经过几次迭代，更新出路径表。</p><img src="/2021/12/12/computernetworking6/DV1.PNG" class="">]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络层(一)</title>
      <link href="/2021/12/12/computernetworking5/"/>
      <url>/2021/12/12/computernetworking5/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-网络层的核心功能"><a href="#一、-网络层的核心功能" class="headerlink" title="一、 网络层的核心功能"></a>一、 网络层的核心功能</h2><h3 id="1-1-转发和路由选择"><a href="#1-1-转发和路由选择" class="headerlink" title="1.1.转发和路由选择"></a>1.1.转发和路由选择</h3><p>转发：将分组从一个输入链路接口转移到适当的输出链路接口的路由器本地动作。</p><p>路由转发：确定分组从源到目的地所采取的端到端路径的网络范围处理过程。计算这些路径的算法称为路由选择算法。</p><img src="/2021/12/12/computernetworking5/%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD.png" class=""><p>转发表确定本路由器如何转发分组。</p><h3 id="1-2-网络服务模型"><a href="#1-2-网络服务模型" class="headerlink" title="1.2.网络服务模型"></a>1.2.网络服务模型</h3><p>网络服务模型定义了分组在发送与接受端系统之间的端到端运输特性。</p><p>服务可能包括：确保交付，具有延时上界的确保交付，有序分组交付，确保最小带宽，安全性等。</p><p>网络服务模型有无连接服务和连接服务。</p><ul><li>无连接服务：不事先为系列分组的传输确定传输路径。每个分组独立传输。不同分组可能路径不同。如数据报网络。</li><li>连接服务：传输前确定路径，沿路径传输分组，传输结束后拆除连接。如虚电路网络。</li></ul><p>因特网的网络层提供了单一的服务，不保证按顺序被接收，也不能保证被最终交付，也不保证最小带宽。</p><p>ATM网络体系结构确保了按序时延，有界时延和确保最小带宽。</p><h2 id="二、IP4协议"><a href="#二、IP4协议" class="headerlink" title="二、IP4协议"></a>二、IP4协议</h2><p>IP协议主要包括IP编址方案，分组封装格式，分组转发规则。</p><img src="/2021/12/12/computernetworking5/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%BB%93%E6%9E%84.png" class=""><h3 id="2-1-IP数据报格式"><a href="#2-1-IP数据报格式" class="headerlink" title="2.1.IP数据报格式"></a>2.1.IP数据报格式</h3><img src="/2021/12/12/computernetworking5/IP%E6%95%B0%E6%8D%AE%E6%8A%A5.png" class=""><ul><li>版本号：4比特，规定了IP协议版本。</li><li>首部长度：</li><li>服务类型：TOS以便使不同类型的IP数据报能够互相区别开来。</li><li>数据报长度：IP数据报的总长度，以字节计。该字段长度16比特。</li><li>标识、标志、片偏移：用于IP分片。</li><li>寿命：TTL确保数据报不会永远在网络中循环，每当一台路由器处理数据报时，该字段减1，减为0时，该数据报被丢弃。</li><li>上层协议：指示了IP数据报的数据部分应交给哪个特定的运输层协议。</li><li>首部检验和：用于帮助路由器检测收到的IP数据报中的比特错误。</li><li>源和目的IP地址。</li><li>选项：选项字段允许IP首部被扩展。</li><li>数据：包含要交付给目的地的运输层报文段，也可承载其他类型的数据，如ICMP协议。</li></ul><h3 id="2-2-数据报分片"><a href="#2-2-数据报分片" class="headerlink" title="2.2.数据报分片"></a>2.2.数据报分片</h3><ul><li><p>提出问题：一个链路层帧能承载的最大数据量叫最大传送单元。不同的链路层协议有不同的MTU。那如何将较大的IP数据报挤进比它小的链路层的负载字段中呢？</p><p>解决方法：数据报分片。将数据报分成多个较小的IP数据报，用单独的链路层帧发送这些分开的数据报，到达目的地运输层前重新组装。</p></li><li><p>标识、标志和片偏移字段。</p><p>当路由器对一个数据报分片时，形成的每个数据报具有初始数据报的源地址、目的地址和标识号。通过检查数据报的标识号以确定哪些数据报是同一数据报的片。</p><p>为了让目的主机确定是否收到了最后一个片，最后一个片的标志设为0，其他片的标志设为1。</p><p>使用片偏移指定该片应该放在初始IP数据报的哪个位置。</p></li></ul><img src="/2021/12/12/computernetworking5/%E5%88%86%E7%89%87.png" class=""><h3 id="2-3-IP编址"><a href="#2-3-IP编址" class="headerlink" title="2.3.IP编址"></a>2.3.IP编址</h3><p>路由器与它的任意一条链路之间的边界的边界叫做接口。一台路由器有多个接口，每个接口都有其链路。每台主机和路由器的接口拥有自己的IP地址。IP地址与接口关联，而不是与主机或路由器关联。</p><p>IP格式：IP地址长度为32比特，采用点分十进制记法。如：192.32.216.9</p><h4 id="2-3-1-子网"><a href="#2-3-1-子网" class="headerlink" title="2.3.1.子网"></a>2.3.1.子网</h4><p>每个接口必须有一个全球唯一的IP地址。一个接口的IP地址的一部分由其连接的子网决定。 </p><img src="/2021/12/12/computernetworking5/%E5%AD%90%E7%BD%91.png" class=""><p>互联的主机接口和路由器接口形成了一个子网。如上图一共有三个子网。</p><p>如上图，为子网分配了一个地址223.1.1.0/24。0/24表示32比特中最左边的24位为子网地址。任何要连接到该子网的IP地址都要符合223.1.1.xxxx的格式。</p><p>确定子网：分开主机和路由器的每个接口，产生几个隔离的网络岛，隔离的网路都为一个子网。</p><img src="/2021/12/12/computernetworking5/%E7%A1%AE%E5%AE%9A%E5%AD%90%E7%BD%91.png" class=""><p>上图中一共六个子网，223.1.1.0/24；223.1.2.0/24；223.1.3.0/24；223.1.7.0/24；223.1.8.0/24；223.1.9.0/24；</p><h4 id="2-3-2-CIDR协议"><a href="#2-3-2-CIDR协议" class="headerlink" title="2.3.2.CIDR协议"></a>2.3.2.CIDR协议</h4><p>无类别域间路由选择：32比特的IP地址被分为两部分，采用a.b.c.d/x；x指示了地址中第一部分的你比特数，构成了IP地址的网络部分，称为网络前缀。一个组织通常被分配一块连续的地址，将享有共同的前缀。第二部分，剩余的32-x位用于区分该组织内部设备的。</p><ul><li><p>CIDR协议之前，IP地址的网络部分被限制为8、16、24比特称为分类编址</p><ul><li><p>A类：1.0.0.0—127.255.255.255(1b网络地址+3b主机地址)子网掩码：255.0.0.0</p></li><li><p>B类：128.0.0.0—191.255.255.255(2b网络地址+2b主机地址)子网掩码：255.255.0.0</p></li><li><p>C类：192.0.0.0—223.255.255.255(3b网络地址+1b主机地址)子网掩码：255.255.255.0</p></li><li><p>D类：224.0.0.0-239.255.255.255</p><p>特殊IP：</p></li></ul></li></ul><h4 id="2-3-3-DHCP协议"><a href="#2-3-3-DHCP协议" class="headerlink" title="2.3.3.DHCP协议"></a>2.3.3.DHCP协议</h4><p>动态主机配置协议：是应用层协议。DHCP允许主机主动获取一个IP地址。通过配置，可以使某给定主机每次与网络连接时能得到一个IP地址，或者每次获得一个临时IP，每次获取的IP是不同的。</p><h3 id="2-4-网络地址转换NAT"><a href="#2-4-网络地址转换NAT" class="headerlink" title="2.4.网络地址转换NAT"></a>2.4.网络地址转换NAT</h3><img src="/2021/12/12/computernetworking5/NAT.png" class=""><p>NAT路由器对外就如同一个具有单一IP地址的单一设备。所有离开家庭路由器的报文拥有相同的源IP地址，所有进入家庭的报文都拥有同一个目的IP地址，NAT使能路由器隐藏了家庭网络的细节。</p><p>NAT转换表对应了某个分组转发对应的内部主机。</p><h2 id="三、IP6协议"><a href="#三、IP6协议" class="headerlink" title="三、IP6协议"></a>三、IP6协议</h2><h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1."></a>3.1.</h3><h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2."></a>3.2.</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ComputerNetworkSecurity</title>
      <link href="/2021/12/10/computernetworksecurity/"/>
      <url>/2021/12/10/computernetworksecurity/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安全通信"><a href="#一、安全通信" class="headerlink" title="一、安全通信"></a>一、安全通信</h2><ul><li>机密性</li><li>报文完整性</li><li>端点鉴别：发送方和接收方都应该能证实通信过程所涉及的另一方，以确定通信的另一方确实具有有其所声称的身份。 </li><li>运行安全性</li></ul><h2 id="二、密码学"><a href="#二、密码学" class="headerlink" title="二、密码学"></a>二、密码学</h2><img src="/2021/12/10/computernetworksecurity/%E5%AF%86%E7%A0%81%E5%AD%A6%E6%B5%81%E7%A8%8B.jpg" class=""><p>发送方使用加密算法加密明文，生成密文。发送方提供一个密钥，一串数字或字符，进行加密。接收方提供一个密钥解密。</p><p>密钥有对称密钥系统(加密和解密密钥是相同且仅双方知道)和公开密钥系统(一对密钥其中一个是公开的，另一个只有双方其中一方知道)。</p><h3 id="2-1-对称密钥密码体系"><a href="#2-1-对称密钥密码体系" class="headerlink" title="2.1.对称密钥密码体系"></a>2.1.对称密钥密码体系</h3><h4 id="2-1-1-块密码"><a href="#2-1-1-块密码" class="headerlink" title="2.1.1.块密码"></a>2.1.1.块密码</h4><ul><li><p>块密码中,将加密的报文处理为k比特的块。加密一个块,块密码采用了一对一映射,将k比特明文通过加密算法映射为k比特的密文。</p></li><li><p>经过一个加密算法加密的k比特的密码块的映射表的输入值个数是2^k。</p><p>一个比特可以是0或者是1。k比特的明文块对应的所有排序数量是2^k，所以一个K比特密码块对应2^k个输入值。</p></li><li><p> 对于2^k输入值对应2^k个输出值。一种输出值的排序对应一种输入值，为一组映射，对应一种密匙。则可以有2^k！个映射。</p></li><li><p>函数模拟随机排列表</p><p>k比特的密码块，一种映射对应2^k个值，当k值较大时，维护的表会很大，k=64时数量会很大。所以可以采用函数模拟随机排序。</p><img src="/2021/12/10/computernetworksecurity/%E5%87%BD%E6%95%B0%E9%9A%8F%E6%9C%BA.png" class=""><p>将k比特密码块分为平均的几个比特密码，分别对应各自的表再经过置乱函数 ，经过n轮循环形成密码块。</p><p>一个算法的密钥确定了特定的小型表映射和该算法内部的排列。</p></li><li><p>密码块链接</p><p>问题：当加密长报文时，可能出现多个明文块是相同内容，对应相同的密文块，可能会被猜出密钥。</p><p>解决方案：密文混合某些随机性，使得相同明文块产生不同密文块。</p><p>m(i)表示第i个明文块，c(i)表示第i个密文块。Ks表示加密算法。发送第i个明文前生成一个随机数r(i)。</p><p>c(i)=Ks(m(i)异或r(i))，接收方收到c(i)和r(i),得m(i)=Ks(c(i)异或r(i))</p><p>问题：每发送一个明文块都要发送一个随机数，使得带块要加倍。</p><p>密码块链接：仅随第一个报文块发送一个随机值，然后发送方和接受方使用计算编码块代替后续随机数。</p><p>在加密之前，发送一个随机k比特串，为初始向量IV，表示为c(0)。</p><p>加密，c(1)=Ks(m(1)异或c(0)),发送加密块。</p><p>发送方根据c(i)=Ks(m(i)异或c(i-1))得到后续密文。</p></li></ul><h4 id="2-1-2-流密码"><a href="#2-1-2-流密码" class="headerlink" title="2.1.2.流密码"></a>2.1.2.流密码</h4><h3 id="2-2-公开密钥系统"><a href="#2-2-公开密钥系统" class="headerlink" title="2.2.公开密钥系统"></a>2.2.公开密钥系统</h3><h3 id="2-3-报文完整性和数字签名"><a href="#2-3-报文完整性和数字签名" class="headerlink" title="2.3.报文完整性和数字签名"></a>2.3.报文完整性和数字签名</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis</title>
      <link href="/2021/12/07/mybatis/"/>
      <url>/2021/12/07/mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="一、核心组件及生命周期"><a href="#一、核心组件及生命周期" class="headerlink" title="一、核心组件及生命周期"></a>一、核心组件及生命周期</h2><h3 id="2-1-核心组件"><a href="#2-1-核心组件" class="headerlink" title="2.1.核心组件"></a>2.1.核心组件</h3><ul><li>SqlSessionFactoryBuilder (构造器):它会根据配置或者代码来生 k成SqlSessionFactory,采用的是分步构建的Builder模式。</li><li>SqlSessionFactory (工厂接口):依靠它来生成SqlSession,使用的是工厂模式。</li><li>SqISession (会话):一个既可以发送S QL执行返回结果，也可以获取Mapper的接口。在现有的技术中，一般我们会让其在业务逻辑代码中“消失”，而使用的是MyBatis提供的SQL Mapper接口编程技术，它能提高代码的可读性和可维护性。</li><li>SQL Mapper (映射器):  MyBatis 新设计存在的组件，它由-一个Java 接口和XML文件(或注解)构成，需要给出对应的SQL和映射规则。它负责发送SQL去执行，并返回结果。</li></ul><h4 id="2-1-1-SqlSessionFactory"><a href="#2-1-1-SqlSessionFactory" class="headerlink" title="2.1.1.SqlSessionFactory"></a>2.1.1.SqlSessionFactory</h4><img src="/2021/12/07/mybatis/%E5%B7%A5%E5%8E%82%E6%8E%A5%E5%8F%A3.png" class=""><p>通过xml文件生成SqlSessionFactory。唯一作用是生产SqlSession，往往使用单例模式处理。</p><p>一般而言是由DefaultSqlSessionFactory，SqlSessionManager一般在多线程环境中使用。</p><h4 id="2-1-2-SqlSession"><a href="#2-1-2-SqlSession" class="headerlink" title="2.1.2.SqlSession"></a>2.1.2.SqlSession</h4><p>在Mybatis中有两个实现类：DefaultSqlSession（单线程）和SqlSessionManager（多线程）。</p><p>作用：获取Mapper接口；发送SQL到数据库；控制数据事务。</p><h4 id="2-1-3-Mapper"><a href="#2-1-3-Mapper" class="headerlink" title="2.1.3.Mapper"></a>2.1.3.Mapper</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span> <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span><span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span><span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  <span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- namespace :必须值,自定义的唯一字符串,通常为全限定接口名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  <span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select no,name,sex,age from t_teacher;      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  <span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into t_teacher(no,name,sex,age)values(#&#123;id&#125;,#&#123;name&#125;,#&#123;sex&#125;,#&#123;age&#125;)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from t_teacher where no=#&#123;TeacherId&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>  <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update t_teacher set age = #&#123;age&#125; where no=#&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="2-2-生命周期"><a href="#2-2-生命周期" class="headerlink" title="2.2.生命周期"></a>2.2.生命周期</h3><ul><li>SqlsessionFactoryBulider:创建SqlsessionFactory 后就失去了作用</li><li>SqlsessionFactory：贯穿整个Mybatis应用,用于创建Sqlsession</li><li>Sqlsession:存活于业务中,当业务结束,关闭连接</li><li>Mapper：其声明周期至多和Sqlsession相同</li></ul><h2 id="二、Mybatis配置"><a href="#二、Mybatis配置" class="headerlink" title="二、Mybatis配置"></a>二、Mybatis配置</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置不能颠倒--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>配置     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!--属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!--设置--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--类型命名--></span>        <span class="token comment">&lt;!--由于类的全限定名过长，所以以别名来代替这个类--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wit.hgyzy.settings.Domain.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--扫描这个包，其中的类将其首字母变为小写，作为其别名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeHandlers</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!--类型处理器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>objectFactory</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!--对象工厂：创建结果集实例，默认使用DefaultObjectFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!--插件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--环境--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!--事务管理器--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!--数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>　    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>databaseIdProvider</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!--数据库厂商标识--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!--映射器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-properties"><a href="#2-1-properties" class="headerlink" title="2.1.properties"></a>2.1.properties</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--properties的使用：property子元素properties文件和代码传递--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”database.driver”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”com.mysql.jdbc.Driver”/</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”datebase.url”</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”jdbc:mysql://localhost:3306/ssm”/</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”database.name”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”root”/</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”database.password</span> <span class="token attr-name">”</span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> “123”/</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--使用properties文件--></span>jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/ssm?charset=utf-8jdbc.username=rootjdbc.password=123456<span class="token comment">&lt;!--导入主配置文件中--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”jdbc.properties”/</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-typeHandler"><a href="#2-2-typeHandler" class="headerlink" title="2.2.typeHandler"></a>2.2.typeHandler</h3><img src="/2021/12/07/mybatis/typehandler.png" class=""><p>​    在typeHandler中，分为jdbcType和javaType,其中jdbcType用于定义数据库类型，而javaType用于定义Java 类型，那么typeHandler的作用就是承担jdbcType和javaType之间的相互转换。在很多情况下我们并不需要去配置typeHandler jdbcType、javaType,因为MyBatis会探测应该使用什么类型的typeHandler进行处理，但是有些场景无法探测到。</p><h3 id="2-3-environments"><a href="#2-3-environments" class="headerlink" title="2.3.environments"></a>2.3.environments</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--id: 数据源的名称 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 配置事务类型:使用 JDBC 事务（使用 Connection 的提交和回滚） --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!-- 数据源 dataSource :创建数据库 Connection 对象            type: POOLED 使用数据库的连接池            --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 连接数据库的四个要素 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>&lt;propertyname="url"value="jdbc:mysql://localhost:3306/bjpowernode"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin123<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>transactionManager的类型有两种：JDBC和MANAGED</li><li>dataSource的类型有三种：UNPOOLED，POOLED，JNDI</li></ul><h3 id="2-4-引入映射器"><a href="#2-4-引入映射器" class="headerlink" title="2.4.引入映射器"></a>2.4.引入映射器</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--用文件路径--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--用类名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--用包名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--用userMapper--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="属性（properties）"><a href="#属性（properties）" class="headerlink" title="属性（properties）"></a>属性（properties）</h3><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;properties resource&#x3D;&quot;org&#x2F;mybatis&#x2F;example&#x2F;config.properties&quot;&gt;  &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;dev_user&quot;&#x2F;&gt;  &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;F2Fa3!33TYyg&quot;&#x2F;&gt;&lt;&#x2F;properties&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>设置好的属性可以在整个配置文件中用来替换需要动态配置的属性值。比如:</p><pre class="line-numbers language-none"><code class="language-none">&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;  &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;driver&#125;&quot;&#x2F;&gt;  &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;url&#125;&quot;&#x2F;&gt;  &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;username&#125;&quot;&#x2F;&gt;  &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;password&#125;&quot;&#x2F;&gt;&lt;&#x2F;dataSource&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子中的 username 和 password 将会由 properties 元素中设置的相应值来替换。 driver 和 url 属性将会由 config.properties 文件中对应的值来替换。这样就为配置提供了诸多灵活选择。</p><p>也可以在 SqlSessionFactoryBuilder.build() 方法中传入属性值。例如：</p><pre class="line-numbers language-none"><code class="language-none">SqlSessionFactory factory &#x3D; new SqlSessionFactoryBuilder().build(reader, props);&#x2F;&#x2F; ... 或者 ...SqlSessionFactory factory &#x3D; new SqlSessionFactoryBuilder().build(reader, environment, props);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个属性在不只一个地方进行了配置，那么，MyBatis 将按照下面的顺序来加载：</p><ul><li>首先读取在 properties 元素体内指定的属性。</li><li>然后根据 properties 元素中的 resource 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。</li><li>最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。</li></ul><p>因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性。</p><p>从 MyBatis 3.4.2 开始，你可以为占位符指定一个默认值。例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;  &lt;!-- ... --&gt;  &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;username:ut_user&#125;&quot;&#x2F;&gt; &lt;!-- 如果属性 &#39;username&#39; 没有被配置，&#39;username&#39; 属性的值将为 &#39;ut_user&#39; --&gt;&lt;&#x2F;dataSource&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个特性默认是关闭的。要启用这个特性，需要添加一个特定的属性来开启这个特性。例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;properties resource&#x3D;&quot;org&#x2F;mybatis&#x2F;example&#x2F;config.properties&quot;&gt;  &lt;!-- ... --&gt;  &lt;property name&#x3D;&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot; value&#x3D;&quot;true&quot;&#x2F;&gt; &lt;!-- 启用默认值特性 --&gt;&lt;&#x2F;properties&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提示</strong> 如果你在属性名中使用了 <code>&quot;:&quot;</code> 字符（如：<code>db:username</code>），或者在 SQL 映射中使用了 OGNL 表达式的三元运算符（如： <code>$&#123;tableName != null ? tableName : &#39;global_constants&#39;&#125;</code>），就需要设置特定的属性来修改分隔属性名和默认值的字符。例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;properties resource&#x3D;&quot;org&#x2F;mybatis&#x2F;example&#x2F;config.properties&quot;&gt;  &lt;!-- ... --&gt;  &lt;property name&#x3D;&quot;org.apache.ibatis.parsing.PropertyParser.default-value-separator&quot; value&#x3D;&quot;?:&quot;&#x2F;&gt; &lt;!-- 修改默认值的分隔符 --&gt;&lt;&#x2F;properties&gt;&lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;  &lt;!-- ... --&gt;  &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;db:username?:ut_user&#125;&quot;&#x2F;&gt;&lt;&#x2F;dataSource&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置（settings）"><a href="#设置（settings）" class="headerlink" title="设置（settings）"></a>设置（settings）</h3><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。</p><table><thead><tr><th align="left">设置名</th><th align="left">描述</th><th align="left">有效值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">cacheEnabled</td><td align="left">全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">lazyLoadingEnabled</td><td align="left">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">aggressiveLazyLoading</td><td align="left">开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</td><td align="left">true | false</td><td align="left">false （在 3.4.1 及之前的版本中默认为 true）</td></tr><tr><td align="left">multipleResultSetsEnabled</td><td align="left">是否允许单个语句返回多结果集（需要数据库驱动支持）。</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">useColumnLabel</td><td align="left">使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">useGeneratedKeys</td><td align="left">允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td><td align="left">true | false</td><td align="left">False</td></tr><tr><td align="left">autoMappingBehavior</td><td align="left">指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td><td align="left">NONE, PARTIAL, FULL</td><td align="left">PARTIAL</td></tr><tr><td align="left">autoMappingUnknownColumnBehavior</td><td align="left">指定发现自动映射目标未知列（或未知属性类型）的行为。<code>NONE</code>: 不做任何反应<code>WARNING</code>: 输出警告日志（<code>&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39;</code>的日志等级必须设置为 <code>WARN</code>）<code>FAILING</code>: 映射失败 (抛出 <code>SqlSessionException</code>)</td><td align="left">NONE, WARNING, FAILING</td><td align="left">NONE</td></tr><tr><td align="left">defaultExecutorType</td><td align="left">配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</td><td align="left">SIMPLE REUSE BATCH</td><td align="left">SIMPLE</td></tr><tr><td align="left">defaultStatementTimeout</td><td align="left">设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td><td align="left">任意正整数</td><td align="left">未设置 (null)</td></tr><tr><td align="left">defaultFetchSize</td><td align="left">为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td><td align="left">任意正整数</td><td align="left">未设置 (null)</td></tr><tr><td align="left">defaultResultSetType</td><td align="left">指定语句默认的滚动策略。（新增于 3.5.2）</td><td align="left">FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置）</td><td align="left">未设置 (null)</td></tr><tr><td align="left">safeRowBoundsEnabled</td><td align="left">是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td><td align="left">true | false</td><td align="left">False</td></tr><tr><td align="left">safeResultHandlerEnabled</td><td align="left">是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td><td align="left">true | false</td><td align="left">True</td></tr><tr><td align="left">mapUnderscoreToCamelCase</td><td align="left">是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td align="left">true | false</td><td align="left">False</td></tr><tr><td align="left">localCacheScope</td><td align="left">MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td><td align="left">SESSION | STATEMENT</td><td align="left">SESSION</td></tr><tr><td align="left">jdbcTypeForNull</td><td align="left">当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td><td align="left">JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td><td align="left">OTHER</td></tr><tr><td align="left">lazyLoadTriggerMethods</td><td align="left">指定对象的哪些方法触发一次延迟加载。</td><td align="left">用逗号分隔的方法列表。</td><td align="left">equals,clone,hashCode,toString</td></tr><tr><td align="left">defaultScriptingLanguage</td><td align="left">指定动态 SQL 生成使用的默认脚本语言。</td><td align="left">一个类型别名或全限定类名。</td><td align="left">org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td></tr><tr><td align="left">defaultEnumTypeHandler</td><td align="left">指定 Enum 使用的默认 <code>TypeHandler</code> 。（新增于 3.4.5）</td><td align="left">一个类型别名或全限定类名。</td><td align="left">org.apache.ibatis.type.EnumTypeHandler</td></tr><tr><td align="left">callSettersOnNulls</td><td align="left">指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">returnInstanceForEmptyRow</td><td align="left">当返回行的所有列都是空时，MyBatis默认返回 <code>null</code>。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">logPrefix</td><td align="left">指定 MyBatis 增加到日志名称的前缀。</td><td align="left">任何字符串</td><td align="left">未设置</td></tr><tr><td align="left">logImpl</td><td align="left">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td align="left">SLF4J | LOG4J（3.5.9 起废弃） | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td align="left">未设置</td></tr><tr><td align="left">proxyFactory</td><td align="left">指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td><td align="left">CGLIB （3.5.10 起废弃） | JAVASSIST</td><td align="left">JAVASSIST （MyBatis 3.3 以上）</td></tr><tr><td align="left">vfsImpl</td><td align="left">指定 VFS 的实现</td><td align="left">自定义 VFS 的实现的类全限定名，以逗号分隔。</td><td align="left">未设置</td></tr><tr><td align="left">useActualParamName</td><td align="left">允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 <code>-parameters</code> 选项。（新增于 3.4.1）</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">configurationFactory</td><td align="left">指定一个提供 <code>Configuration</code> 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为<code>static Configuration getConfiguration()</code> 的方法。（新增于 3.2.3）</td><td align="left">一个类型别名或完全限定类名。</td><td align="left">未设置</td></tr><tr><td align="left">shrinkWhitespacesInSql</td><td align="left">从SQL中删除多余的空格字符。请注意，这也会影响SQL中的文字字符串。 (新增于 3.5.5)</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">defaultSqlProviderType</td><td align="left">指定一个拥有 provider 方法的 sql provider 类 （新增于 3.5.6）. 这个类适用于指定 sql provider 注解上的<code>type</code>（或 <code>value</code>） 属性（当这些属性在注解中被忽略时）。 (e.g. <code>@SelectProvider</code>)</td><td align="left">类型别名或者全限定名</td><td align="left">未设置</td></tr><tr><td align="left">nullableOnForEach</td><td align="left">为 ‘foreach’ 标签的 ‘nullable’ 属性指定默认值。（新增于 3.5.9）</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">argNameBasedConstructorAutoMapping</td><td align="left">当应用构造器自动映射时，参数名称被用来搜索要映射的列，而不再依赖列的顺序。（新增于 3.5.10）</td><td align="left">true | false</td><td align="left">false</td></tr></tbody></table><p>一个配置完整的 settings 元素的示例如下：</p><pre class="line-numbers language-none"><code class="language-none">&lt;settings&gt;  &lt;setting name&#x3D;&quot;cacheEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;  &lt;setting name&#x3D;&quot;lazyLoadingEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;  &lt;setting name&#x3D;&quot;multipleResultSetsEnabled&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;  &lt;setting name&#x3D;&quot;useColumnLabel&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;  &lt;setting name&#x3D;&quot;useGeneratedKeys&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;  &lt;setting name&#x3D;&quot;autoMappingBehavior&quot; value&#x3D;&quot;PARTIAL&quot;&#x2F;&gt;  &lt;setting name&#x3D;&quot;autoMappingUnknownColumnBehavior&quot; value&#x3D;&quot;WARNING&quot;&#x2F;&gt;  &lt;setting name&#x3D;&quot;defaultExecutorType&quot; value&#x3D;&quot;SIMPLE&quot;&#x2F;&gt;  &lt;setting name&#x3D;&quot;defaultStatementTimeout&quot; value&#x3D;&quot;25&quot;&#x2F;&gt;  &lt;setting name&#x3D;&quot;defaultFetchSize&quot; value&#x3D;&quot;100&quot;&#x2F;&gt;  &lt;setting name&#x3D;&quot;safeRowBoundsEnabled&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;  &lt;setting name&#x3D;&quot;mapUnderscoreToCamelCase&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;  &lt;setting name&#x3D;&quot;localCacheScope&quot; value&#x3D;&quot;SESSION&quot;&#x2F;&gt;  &lt;setting name&#x3D;&quot;jdbcTypeForNull&quot; value&#x3D;&quot;OTHER&quot;&#x2F;&gt;  &lt;setting name&#x3D;&quot;lazyLoadTriggerMethods&quot; value&#x3D;&quot;equals,clone,hashCode,toString&quot;&#x2F;&gt;&lt;&#x2F;settings&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型别名（typeAliases）"><a href="#类型别名（typeAliases）" class="headerlink" title="类型别名（typeAliases）"></a>类型别名（typeAliases）</h3><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;typeAliases&gt;  &lt;typeAlias alias&#x3D;&quot;Author&quot; type&#x3D;&quot;domain.blog.Author&quot;&#x2F;&gt;  &lt;typeAlias alias&#x3D;&quot;Blog&quot; type&#x3D;&quot;domain.blog.Blog&quot;&#x2F;&gt;  &lt;typeAlias alias&#x3D;&quot;Comment&quot; type&#x3D;&quot;domain.blog.Comment&quot;&#x2F;&gt;  &lt;typeAlias alias&#x3D;&quot;Post&quot; type&#x3D;&quot;domain.blog.Post&quot;&#x2F;&gt;  &lt;typeAlias alias&#x3D;&quot;Section&quot; type&#x3D;&quot;domain.blog.Section&quot;&#x2F;&gt;  &lt;typeAlias alias&#x3D;&quot;Tag&quot; type&#x3D;&quot;domain.blog.Tag&quot;&#x2F;&gt;&lt;&#x2F;typeAliases&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当这样配置时，<code>Blog</code> 可以用在任何使用 <code>domain.blog.Blog</code> 的地方。</p><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;typeAliases&gt;  &lt;package name&#x3D;&quot;domain.blog&quot;&#x2F;&gt;&lt;&#x2F;typeAliases&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。见下面的例子：</p><pre class="line-numbers language-none"><code class="language-none">@Alias(&quot;author&quot;)public class Author &#123;    ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下面是一些为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。</p><table><thead><tr><th align="left">别名</th><th align="left">映射的类型</th></tr></thead><tbody><tr><td align="left">_byte</td><td align="left">byte</td></tr><tr><td align="left">_char (since 3.5.10)</td><td align="left">char</td></tr><tr><td align="left">_character (since 3.5.10)</td><td align="left">char</td></tr><tr><td align="left">_long</td><td align="left">long</td></tr><tr><td align="left">_short</td><td align="left">short</td></tr><tr><td align="left">_int</td><td align="left">int</td></tr><tr><td align="left">_integer</td><td align="left">int</td></tr><tr><td align="left">_double</td><td align="left">double</td></tr><tr><td align="left">_float</td><td align="left">float</td></tr><tr><td align="left">_boolean</td><td align="left">boolean</td></tr><tr><td align="left">string</td><td align="left">String</td></tr><tr><td align="left">byte</td><td align="left">Byte</td></tr><tr><td align="left">char (since 3.5.10)</td><td align="left">Character</td></tr><tr><td align="left">character (since 3.5.10)</td><td align="left">Character</td></tr><tr><td align="left">long</td><td align="left">Long</td></tr><tr><td align="left">short</td><td align="left">Short</td></tr><tr><td align="left">int</td><td align="left">Integer</td></tr><tr><td align="left">integer</td><td align="left">Integer</td></tr><tr><td align="left">double</td><td align="left">Double</td></tr><tr><td align="left">float</td><td align="left">Float</td></tr><tr><td align="left">boolean</td><td align="left">Boolean</td></tr><tr><td align="left">date</td><td align="left">Date</td></tr><tr><td align="left">decimal</td><td align="left">BigDecimal</td></tr><tr><td align="left">bigdecimal</td><td align="left">BigDecimal</td></tr><tr><td align="left">biginteger</td><td align="left">BigInteger</td></tr><tr><td align="left">object</td><td align="left">Object</td></tr><tr><td align="left">date[]</td><td align="left">Date[]</td></tr><tr><td align="left">decimal[]</td><td align="left">BigDecimal[]</td></tr><tr><td align="left">bigdecimal[]</td><td align="left">BigDecimal[]</td></tr><tr><td align="left">biginteger[]</td><td align="left">BigInteger[]</td></tr><tr><td align="left">object[]</td><td align="left">Object[]</td></tr><tr><td align="left">map</td><td align="left">Map</td></tr><tr><td align="left">hashmap</td><td align="left">HashMap</td></tr><tr><td align="left">list</td><td align="left">List</td></tr><tr><td align="left">arraylist</td><td align="left">ArrayList</td></tr><tr><td align="left">collection</td><td align="left">Collection</td></tr><tr><td align="left">iterator</td><td align="left">Iterator</td></tr></tbody></table><h3 id="类型处理器（typeHandlers）"><a href="#类型处理器（typeHandlers）" class="headerlink" title="类型处理器（typeHandlers）"></a>类型处理器（typeHandlers）</h3><p>MyBatis 在设置预处理语句（PreparedStatement）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器。</p><p><strong>提示</strong> 从 3.4.5 开始，MyBatis 默认支持 JSR-310（日期和时间 API） 。</p><table><thead><tr><th align="left">类型处理器</th><th align="left">Java 类型</th><th align="left">JDBC 类型</th></tr></thead><tbody><tr><td align="left"><code>BooleanTypeHandler</code></td><td align="left"><code>java.lang.Boolean</code>, <code>boolean</code></td><td align="left">数据库兼容的 <code>BOOLEAN</code></td></tr><tr><td align="left"><code>ByteTypeHandler</code></td><td align="left"><code>java.lang.Byte</code>, <code>byte</code></td><td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>BYTE</code></td></tr><tr><td align="left"><code>ShortTypeHandler</code></td><td align="left"><code>java.lang.Short</code>, <code>short</code></td><td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>SMALLINT</code></td></tr><tr><td align="left"><code>IntegerTypeHandler</code></td><td align="left"><code>java.lang.Integer</code>, <code>int</code></td><td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>INTEGER</code></td></tr><tr><td align="left"><code>LongTypeHandler</code></td><td align="left"><code>java.lang.Long</code>, <code>long</code></td><td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>BIGINT</code></td></tr><tr><td align="left"><code>FloatTypeHandler</code></td><td align="left"><code>java.lang.Float</code>, <code>float</code></td><td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>FLOAT</code></td></tr><tr><td align="left"><code>DoubleTypeHandler</code></td><td align="left"><code>java.lang.Double</code>, <code>double</code></td><td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>DOUBLE</code></td></tr><tr><td align="left"><code>BigDecimalTypeHandler</code></td><td align="left"><code>java.math.BigDecimal</code></td><td align="left">数据库兼容的 <code>NUMERIC</code> 或 <code>DECIMAL</code></td></tr><tr><td align="left"><code>StringTypeHandler</code></td><td align="left"><code>java.lang.String</code></td><td align="left"><code>CHAR</code>, <code>VARCHAR</code></td></tr><tr><td align="left"><code>ClobReaderTypeHandler</code></td><td align="left"><code>java.io.Reader</code></td><td align="left">-</td></tr><tr><td align="left"><code>ClobTypeHandler</code></td><td align="left"><code>java.lang.String</code></td><td align="left"><code>CLOB</code>, <code>LONGVARCHAR</code></td></tr><tr><td align="left"><code>NStringTypeHandler</code></td><td align="left"><code>java.lang.String</code></td><td align="left"><code>NVARCHAR</code>, <code>NCHAR</code></td></tr><tr><td align="left"><code>NClobTypeHandler</code></td><td align="left"><code>java.lang.String</code></td><td align="left"><code>NCLOB</code></td></tr><tr><td align="left"><code>BlobInputStreamTypeHandler</code></td><td align="left"><code>java.io.InputStream</code></td><td align="left">-</td></tr><tr><td align="left"><code>ByteArrayTypeHandler</code></td><td align="left"><code>byte[]</code></td><td align="left">数据库兼容的字节流类型</td></tr><tr><td align="left"><code>BlobTypeHandler</code></td><td align="left"><code>byte[]</code></td><td align="left"><code>BLOB</code>, <code>LONGVARBINARY</code></td></tr><tr><td align="left"><code>DateTypeHandler</code></td><td align="left"><code>java.util.Date</code></td><td align="left"><code>TIMESTAMP</code></td></tr><tr><td align="left"><code>DateOnlyTypeHandler</code></td><td align="left"><code>java.util.Date</code></td><td align="left"><code>DATE</code></td></tr><tr><td align="left"><code>TimeOnlyTypeHandler</code></td><td align="left"><code>java.util.Date</code></td><td align="left"><code>TIME</code></td></tr><tr><td align="left"><code>SqlTimestampTypeHandler</code></td><td align="left"><code>java.sql.Timestamp</code></td><td align="left"><code>TIMESTAMP</code></td></tr><tr><td align="left"><code>SqlDateTypeHandler</code></td><td align="left"><code>java.sql.Date</code></td><td align="left"><code>DATE</code></td></tr><tr><td align="left"><code>SqlTimeTypeHandler</code></td><td align="left"><code>java.sql.Time</code></td><td align="left"><code>TIME</code></td></tr><tr><td align="left"><code>ObjectTypeHandler</code></td><td align="left">Any</td><td align="left"><code>OTHER</code> 或未指定类型</td></tr><tr><td align="left"><code>EnumTypeHandler</code></td><td align="left">Enumeration Type</td><td align="left">VARCHAR 或任何兼容的字符串类型，用来存储枚举的名称（而不是索引序数值）</td></tr><tr><td align="left"><code>EnumOrdinalTypeHandler</code></td><td align="left">Enumeration Type</td><td align="left">任何兼容的 <code>NUMERIC</code> 或 <code>DOUBLE</code> 类型，用来存储枚举的序数值（而不是名称）。</td></tr><tr><td align="left"><code>SqlxmlTypeHandler</code></td><td align="left"><code>java.lang.String</code></td><td align="left"><code>SQLXML</code></td></tr><tr><td align="left"><code>InstantTypeHandler</code></td><td align="left"><code>java.time.Instant</code></td><td align="left"><code>TIMESTAMP</code></td></tr><tr><td align="left"><code>LocalDateTimeTypeHandler</code></td><td align="left"><code>java.time.LocalDateTime</code></td><td align="left"><code>TIMESTAMP</code></td></tr><tr><td align="left"><code>LocalDateTypeHandler</code></td><td align="left"><code>java.time.LocalDate</code></td><td align="left"><code>DATE</code></td></tr><tr><td align="left"><code>LocalTimeTypeHandler</code></td><td align="left"><code>java.time.LocalTime</code></td><td align="left"><code>TIME</code></td></tr><tr><td align="left"><code>OffsetDateTimeTypeHandler</code></td><td align="left"><code>java.time.OffsetDateTime</code></td><td align="left"><code>TIMESTAMP</code></td></tr><tr><td align="left"><code>OffsetTimeTypeHandler</code></td><td align="left"><code>java.time.OffsetTime</code></td><td align="left"><code>TIME</code></td></tr><tr><td align="left"><code>ZonedDateTimeTypeHandler</code></td><td align="left"><code>java.time.ZonedDateTime</code></td><td align="left"><code>TIMESTAMP</code></td></tr><tr><td align="left"><code>YearTypeHandler</code></td><td align="left"><code>java.time.Year</code></td><td align="left"><code>INTEGER</code></td></tr><tr><td align="left"><code>MonthTypeHandler</code></td><td align="left"><code>java.time.Month</code></td><td align="left"><code>INTEGER</code></td></tr><tr><td align="left"><code>YearMonthTypeHandler</code></td><td align="left"><code>java.time.YearMonth</code></td><td align="left"><code>VARCHAR</code> 或 <code>LONGVARCHAR</code></td></tr><tr><td align="left"><code>JapaneseDateTypeHandler</code></td><td align="left"><code>java.time.chrono.JapaneseDate</code></td><td align="left"><code>DATE</code></td></tr></tbody></table><p>你可以重写已有的类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。 具体做法为：实现 <code>org.apache.ibatis.type.TypeHandler</code> 接口， 或继承一个很便利的类 <code>org.apache.ibatis.type.BaseTypeHandler</code>， 并且可以（可选地）将它映射到一个 JDBC 类型。比如：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; ExampleTypeHandler.java@MappedJdbcTypes(JdbcType.VARCHAR)public class ExampleTypeHandler extends BaseTypeHandler&lt;String&gt; &#123;  @Override  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException &#123;    ps.setString(i, parameter);  &#125;  @Override  public String getNullableResult(ResultSet rs, String columnName) throws SQLException &#123;    return rs.getString(columnName);  &#125;  @Override  public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException &#123;    return rs.getString(columnIndex);  &#125;  @Override  public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException &#123;    return cs.getString(columnIndex);  &#125;&#125;&lt;!-- mybatis-config.xml --&gt;&lt;typeHandlers&gt;  &lt;typeHandler handler&#x3D;&quot;org.mybatis.example.ExampleTypeHandler&quot;&#x2F;&gt;&lt;&#x2F;typeHandlers&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用上述的类型处理器将会覆盖已有的处理 Java String 类型的属性以及 VARCHAR 类型的参数和结果的类型处理器。 要注意 MyBatis 不会通过检测数据库元信息来决定使用哪种类型，所以你必须在参数和结果映射中指明字段是 VARCHAR 类型， 以使其能够绑定到正确的类型处理器上。这是因为 MyBatis 直到语句被执行时才清楚数据类型。</p><p>通过类型处理器的泛型，MyBatis 可以得知该类型处理器处理的 Java 类型，不过这种行为可以通过两种方法改变：</p><ul><li>在类型处理器的配置元素（typeHandler 元素）上增加一个 <code>javaType</code> 属性（比如：<code>javaType=&quot;String&quot;</code>）；</li><li>在类型处理器的类上增加一个 <code>@MappedTypes</code> 注解指定与其关联的 Java 类型列表。 如果在 <code>javaType</code> 属性中也同时指定，则注解上的配置将被忽略。</li></ul><p>可以通过两种方式来指定关联的 JDBC 类型：</p><ul><li>在类型处理器的配置元素上增加一个 <code>jdbcType</code> 属性（比如：<code>jdbcType=&quot;VARCHAR&quot;</code>）；</li><li>在类型处理器的类上增加一个 <code>@MappedJdbcTypes</code> 注解指定与其关联的 JDBC 类型列表。 如果在 <code>jdbcType</code> 属性中也同时指定，则注解上的配置将被忽略。</li></ul><p>当在 <code>ResultMap</code> 中决定使用哪种类型处理器时，此时 Java 类型是已知的（从结果类型中获得），但是 JDBC 类型是未知的。 因此 Mybatis 使用 <code>javaType=[Java 类型], jdbcType=null</code> 的组合来选择一个类型处理器。 这意味着使用 <code>@MappedJdbcTypes</code> 注解可以<em>限制</em>类型处理器的作用范围，并且可以确保，除非显式地设置，否则类型处理器在 <code>ResultMap</code> 中将不会生效。 如果希望能在 <code>ResultMap</code> 中隐式地使用类型处理器，那么设置 <code>@MappedJdbcTypes</code> 注解的 <code>includeNullJdbcType=true</code> 即可。 然而从 Mybatis 3.4.0 开始，如果某个 Java 类型<strong>只有一个</strong>注册的类型处理器，即使没有设置 <code>includeNullJdbcType=true</code>，那么这个类型处理器也会是 <code>ResultMap</code> 使用 Java 类型时的默认处理器。</p><p>最后，可以让 MyBatis 帮你查找类型处理器：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- mybatis-config.xml --&gt;&lt;typeHandlers&gt;  &lt;package name&#x3D;&quot;org.mybatis.example&quot;&#x2F;&gt;&lt;&#x2F;typeHandlers&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意在使用自动发现功能的时候，只能通过注解方式来指定 JDBC 的类型。</p><p>你可以创建能够处理多个类的泛型类型处理器。为了使用泛型类型处理器， 需要增加一个接受该类的 class 作为参数的构造器，这样 MyBatis 会在构造一个类型处理器实例的时候传入一个具体的类。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;GenericTypeHandler.javapublic class GenericTypeHandler&lt;E extends MyObject&gt; extends BaseTypeHandler&lt;E&gt; &#123;  private Class&lt;E&gt; type;  public GenericTypeHandler(Class&lt;E&gt; type) &#123;    if (type &#x3D;&#x3D; null) throw new IllegalArgumentException(&quot;Type argument cannot be null&quot;);    this.type &#x3D; type;  &#125;  ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>EnumTypeHandler</code> 和 <code>EnumOrdinalTypeHandler</code> 都是泛型类型处理器，我们将会在接下来的部分详细探讨。</p><h3 id="处理枚举类型"><a href="#处理枚举类型" class="headerlink" title="处理枚举类型"></a>处理枚举类型</h3><p>若想映射枚举类型 <code>Enum</code>，则需要从 <code>EnumTypeHandler</code> 或者 <code>EnumOrdinalTypeHandler</code> 中选择一个来使用。</p><p>比如说我们想存储取近似值时用到的舍入模式。默认情况下，MyBatis 会利用 <code>EnumTypeHandler</code> 来把 <code>Enum</code> 值转换成对应的名字。</p><p><strong>注意 <code>EnumTypeHandler</code> 在某种意义上来说是比较特别的，其它的处理器只针对某个特定的类，而它不同，它会处理任意继承了 <code>Enum</code> 的类。</strong></p><p>不过，我们可能不想存储名字，相反我们的 DBA 会坚持使用整形值代码。那也一样简单：在配置文件中把 <code>EnumOrdinalTypeHandler</code> 加到 <code>typeHandlers</code> 中即可， 这样每个 <code>RoundingMode</code> 将通过他们的序数值来映射成对应的整形数值。</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- mybatis-config.xml --&gt;&lt;typeHandlers&gt;  &lt;typeHandler handler&#x3D;&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot; javaType&#x3D;&quot;java.math.RoundingMode&quot;&#x2F;&gt;&lt;&#x2F;typeHandlers&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但要是你想在一个地方将 <code>Enum</code> 映射成字符串，在另外一个地方映射成整形值呢？</p><p>自动映射器（auto-mapper）会自动地选用 <code>EnumOrdinalTypeHandler</code> 来处理枚举类型， 所以如果我们想用普通的 <code>EnumTypeHandler</code>，就必须要显式地为那些 SQL 语句设置要使用的类型处理器。</p><p>（下一节才开始介绍映射器文件，如果你是首次阅读该文档，你可能需要先跳过这里，过会再来看。）</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE mapper    PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;    &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace&#x3D;&quot;org.apache.ibatis.submitted.rounding.Mapper&quot;&gt;&lt;resultMap type&#x3D;&quot;org.apache.ibatis.submitted.rounding.User&quot; id&#x3D;&quot;usermap&quot;&gt;&lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot;&#x2F;&gt;&lt;result column&#x3D;&quot;name&quot; property&#x3D;&quot;name&quot;&#x2F;&gt;&lt;result column&#x3D;&quot;funkyNumber&quot; property&#x3D;&quot;funkyNumber&quot;&#x2F;&gt;&lt;result column&#x3D;&quot;roundingMode&quot; property&#x3D;&quot;roundingMode&quot;&#x2F;&gt;&lt;&#x2F;resultMap&gt;&lt;select id&#x3D;&quot;getUser&quot; resultMap&#x3D;&quot;usermap&quot;&gt;select * from users&lt;&#x2F;select&gt;&lt;insert id&#x3D;&quot;insert&quot;&gt;    insert into users (id, name, funkyNumber, roundingMode) values (    #&#123;id&#125;, #&#123;name&#125;, #&#123;funkyNumber&#125;, #&#123;roundingMode&#125;    )&lt;&#x2F;insert&gt;&lt;resultMap type&#x3D;&quot;org.apache.ibatis.submitted.rounding.User&quot; id&#x3D;&quot;usermap2&quot;&gt;&lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot;&#x2F;&gt;&lt;result column&#x3D;&quot;name&quot; property&#x3D;&quot;name&quot;&#x2F;&gt;&lt;result column&#x3D;&quot;funkyNumber&quot; property&#x3D;&quot;funkyNumber&quot;&#x2F;&gt;&lt;result column&#x3D;&quot;roundingMode&quot; property&#x3D;&quot;roundingMode&quot; typeHandler&#x3D;&quot;org.apache.ibatis.type.EnumTypeHandler&quot;&#x2F;&gt;&lt;&#x2F;resultMap&gt;&lt;select id&#x3D;&quot;getUser2&quot; resultMap&#x3D;&quot;usermap2&quot;&gt;select * from users2&lt;&#x2F;select&gt;&lt;insert id&#x3D;&quot;insert2&quot;&gt;    insert into users2 (id, name, funkyNumber, roundingMode) values (    #&#123;id&#125;, #&#123;name&#125;, #&#123;funkyNumber&#125;, #&#123;roundingMode, typeHandler&#x3D;org.apache.ibatis.type.EnumTypeHandler&#125;    )&lt;&#x2F;insert&gt;&lt;&#x2F;mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这里的 select 语句必须指定 <code>resultMap</code> 而不是 <code>resultType</code>。</p><h3 id="对象工厂（objectFactory）"><a href="#对象工厂（objectFactory）" class="headerlink" title="对象工厂（objectFactory）"></a>对象工厂（objectFactory）</h3><p>每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成实例化工作。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。 如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现。比如：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; ExampleObjectFactory.javapublic class ExampleObjectFactory extends DefaultObjectFactory &#123;  @Override  public &lt;T&gt; T create(Class&lt;T&gt; type) &#123;    return super.create(type);  &#125;  @Override  public &lt;T&gt; T create(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs) &#123;    return super.create(type, constructorArgTypes, constructorArgs);  &#125;  @Override  public void setProperties(Properties properties) &#123;    super.setProperties(properties);  &#125;  @Override  public &lt;T&gt; boolean isCollection(Class&lt;T&gt; type) &#123;    return Collection.class.isAssignableFrom(type);  &#125;&#125;&lt;!-- mybatis-config.xml --&gt;&lt;objectFactory type&#x3D;&quot;org.mybatis.example.ExampleObjectFactory&quot;&gt;  &lt;property name&#x3D;&quot;someProperty&quot; value&#x3D;&quot;100&quot;&#x2F;&gt;&lt;&#x2F;objectFactory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ObjectFactory 接口很简单，它包含两个创建实例用的方法，一个是处理默认无参构造方法的，另外一个是处理带参数的构造方法的。 另外，setProperties 方法可以被用来配置 ObjectFactory，在初始化你的 ObjectFactory 实例后， objectFactory 元素体中定义的属性会被传递给 setProperties 方法。</p><h3 id="插件（plugins）"><a href="#插件（plugins）" class="headerlink" title="插件（plugins）"></a>插件（plugins）</h3><p>MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：</p><ul><li>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)</li><li>ParameterHandler (getParameterObject, setParameters)</li><li>ResultSetHandler (handleResultSets, handleOutputParameters)</li><li>StatementHandler (prepare, parameterize, batch, update, query)</li></ul><p>这些类中方法的细节可以通过查看每个方法的签名来发现，或者直接查看 MyBatis 发行包中的源代码。 如果你想做的不仅仅是监控方法的调用，那么你最好相当了解要重写的方法的行为。 因为在试图修改或重写已有方法的行为时，很可能会破坏 MyBatis 的核心模块。 这些都是更底层的类和方法，所以使用插件的时候要特别当心。</p><p>通过 MyBatis 提供的强大机制，使用插件是非常简单的，只需实现 Interceptor 接口，并指定想要拦截的方法签名即可。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; ExamplePlugin.java@Intercepts(&#123;@Signature(  type&#x3D; Executor.class,  method &#x3D; &quot;update&quot;,  args &#x3D; &#123;MappedStatement.class,Object.class&#125;)&#125;)public class ExamplePlugin implements Interceptor &#123;  private Properties properties &#x3D; new Properties();  @Override  public Object intercept(Invocation invocation) throws Throwable &#123;    &#x2F;&#x2F; implement pre processing if need    Object returnObject &#x3D; invocation.proceed();    &#x2F;&#x2F; implement post processing if need    return returnObject;  &#125;  @Override  public void setProperties(Properties properties) &#123;    this.properties &#x3D; properties;  &#125;&#125;&lt;!-- mybatis-config.xml --&gt;&lt;plugins&gt;  &lt;plugin interceptor&#x3D;&quot;org.mybatis.example.ExamplePlugin&quot;&gt;    &lt;property name&#x3D;&quot;someProperty&quot; value&#x3D;&quot;100&quot;&#x2F;&gt;  &lt;&#x2F;plugin&gt;&lt;&#x2F;plugins&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的插件将会拦截在 Executor 实例中所有的 “update” 方法调用， 这里的 Executor 是负责执行底层映射语句的内部对象。</p><p><strong>提示</strong> <strong>覆盖配置类</strong></p><p>除了用插件来修改 MyBatis 核心行为以外，还可以通过完全覆盖配置类来达到目的。只需继承配置类后覆盖其中的某个方法，再把它传递到 SqlSessionFactoryBuilder.build(myConfig) 方法即可。再次重申，这可能会极大影响 MyBatis 的行为，务请慎之又慎。</p><h3 id="环境配置（environments）"><a href="#环境配置（environments）" class="headerlink" title="环境配置（environments）"></a>环境配置（environments）</h3><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，记起来很简单：</p><ul><li><strong>每个数据库对应一个 SqlSessionFactory 实例</strong></li></ul><p>为了指定创建哪种环境，只要将它作为可选的参数传递给 SqlSessionFactoryBuilder 即可。可以接受环境配置的两个方法签名是：</p><pre class="line-numbers language-none"><code class="language-none">SqlSessionFactory factory &#x3D; new SqlSessionFactoryBuilder().build(reader, environment);SqlSessionFactory factory &#x3D; new SqlSessionFactoryBuilder().build(reader, environment, properties);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果忽略了环境参数，那么将会加载默认环境，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">SqlSessionFactory factory &#x3D; new SqlSessionFactoryBuilder().build(reader);SqlSessionFactory factory &#x3D; new SqlSessionFactoryBuilder().build(reader, properties);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>environments 元素定义了如何配置环境。</p><pre class="line-numbers language-none"><code class="language-none">&lt;environments default&#x3D;&quot;development&quot;&gt;  &lt;environment id&#x3D;&quot;development&quot;&gt;    &lt;transactionManager type&#x3D;&quot;JDBC&quot;&gt;      &lt;property name&#x3D;&quot;...&quot; value&#x3D;&quot;...&quot;&#x2F;&gt;    &lt;&#x2F;transactionManager&gt;    &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;      &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;driver&#125;&quot;&#x2F;&gt;      &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;url&#125;&quot;&#x2F;&gt;      &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;username&#125;&quot;&#x2F;&gt;      &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;password&#125;&quot;&#x2F;&gt;    &lt;&#x2F;dataSource&gt;  &lt;&#x2F;environment&gt;&lt;&#x2F;environments&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意一些关键点:</p><ul><li>默认使用的环境 ID（比如：default=”development”）。</li><li>每个 environment 元素定义的环境 ID（比如：id=”development”）。</li><li>事务管理器的配置（比如：type=”JDBC”）。</li><li>数据源的配置（比如：type=”POOLED”）。</li></ul><p>默认环境和环境 ID 顾名思义。 环境可以随意命名，但务必保证默认的环境 ID 要匹配其中一个环境 ID。</p><p><strong>事务管理器（transactionManager）</strong></p><p>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：</p><ul><li><p>JDBC – 这个配置直接使用了 JDBC 的提交和回滚功能，它依赖从数据源获得的连接来管理事务作用域。默认情况下，为了与某些驱动程序兼容，它在关闭连接时启用自动提交。然而，对于某些驱动程序来说，启用自动提交不仅是不必要的，而且是一个代价高昂的操作。因此，从 3.5.10 版本开始，你可以通过将 “skipSetAutoCommitOnClose” 属性设置为 “true” 来跳过这个步骤。例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;transactionManager type&#x3D;&quot;JDBC&quot;&gt;  &lt;property name&#x3D;&quot;skipSetAutoCommitOnClose&quot; value&#x3D;&quot;true&quot;&#x2F;&gt;&lt;&#x2F;transactionManager&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。例如:</p><pre class="line-numbers language-none"><code class="language-none">&lt;transactionManager type&#x3D;&quot;MANAGED&quot;&gt;  &lt;property name&#x3D;&quot;closeConnection&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;&lt;&#x2F;transactionManager&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>提示</strong> 如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</p><p>这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以用 TransactionFactory 接口实现类的全限定名或类型别名代替它们。</p><pre class="line-numbers language-none"><code class="language-none">public interface TransactionFactory &#123;  default void setProperties(Properties props) &#123; &#x2F;&#x2F; 从 3.5.2 开始，该方法为默认方法    &#x2F;&#x2F; 空实现  &#125;  Transaction newTransaction(Connection conn);  Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在事务管理器实例化后，所有在 XML 中配置的属性将会被传递给 setProperties() 方法。你的实现还需要创建一个 Transaction 接口的实现类，这个接口也很简单：</p><pre class="line-numbers language-none"><code class="language-none">public interface Transaction &#123;  Connection getConnection() throws SQLException;  void commit() throws SQLException;  void rollback() throws SQLException;  void close() throws SQLException;  Integer getTimeout() throws SQLException;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。</p><p><strong>数据源（dataSource）</strong></p><p>dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p><ul><li>大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。</li></ul><p>有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：</p><p><strong>UNPOOLED</strong>– 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：</p><ul><li><code>driver</code> – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。</li><li><code>url</code> – 这是数据库的 JDBC URL 地址。</li><li><code>username</code> – 登录数据库的用户名。</li><li><code>password</code> – 登录数据库的密码。</li><li><code>defaultTransactionIsolationLevel</code> – 默认的连接事务隔离级别。</li><li><code>defaultNetworkTimeout</code> – 等待数据库操作完成的默认网络超时时间（单位：毫秒）。查看 <code>java.sql.Connection#setNetworkTimeout()</code> 的 API 文档以获取更多信息。</li></ul><p>作为可选项，你也可以传递属性给数据库驱动。只需在属性名加上“driver.”前缀即可，例如：</p><ul><li><code>driver.encoding=UTF8</code></li></ul><p>这将通过 DriverManager.getConnection(url, driverProperties) 方法传递值为 <code>UTF8</code> 的 <code>encoding</code> 属性给数据库驱动。</p><p><strong>POOLED</strong>– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</p><p>除了上述提到 UNPOOLED 下的属性外，还有更多属性用来配置 POOLED 的数据源：</p><ul><li><code>poolMaximumActiveConnections</code> – 在任意时间可存在的活动（正在使用）连接数量，默认值：10</li><li><code>poolMaximumIdleConnections</code> – 任意时间可能存在的空闲连接数。</li><li><code>poolMaximumCheckoutTime</code> – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）</li><li><code>poolTimeToWait</code> – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。</li><li><code>poolMaximumLocalBadConnectionTolerance</code> – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 <code>poolMaximumIdleConnections</code> 与 <code>poolMaximumLocalBadConnectionTolerance</code> 之和。 默认值：3（新增于 3.4.5）</li><li><code>poolPingQuery</code> – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动出错时返回恰当的错误消息。</li><li><code>poolPingEnabled</code> – 是否启用侦测查询。若开启，需要设置 <code>poolPingQuery</code> 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。</li><li><code>poolPingConnectionsNotUsedFor</code> – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。</li></ul><p><strong>JNDI</strong> – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。这种数据源配置只需要两个属性：</p><ul><li><code>initial_context</code> – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么将会直接从 InitialContext 中寻找 data_source 属性。</li><li><code>data_source</code> – 这是引用数据源实例位置的上下文路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找。</li></ul><p>和其他数据源配置类似，可以通过添加前缀“env.”直接把属性传递给 InitialContext。比如：</p><ul><li><code>env.encoding=UTF8</code></li></ul><p>这就会在 InitialContext 实例化时往它的构造方法传递值为 <code>UTF8</code> 的 <code>encoding</code> 属性。</p><p>你可以通过实现接口 <code>org.apache.ibatis.datasource.DataSourceFactory</code> 来使用第三方数据源实现：</p><pre class="line-numbers language-none"><code class="language-none">public interface DataSourceFactory &#123;  void setProperties(Properties props);  DataSource getDataSource();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory</code> 可被用作父类来构建新的数据源适配器，比如下面这段插入 C3P0 数据源所必需的代码：</p><pre class="line-numbers language-none"><code class="language-none">import org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;import com.mchange.v2.c3p0.ComboPooledDataSource;public class C3P0DataSourceFactory extends UnpooledDataSourceFactory &#123;  public C3P0DataSourceFactory() &#123;    this.dataSource &#x3D; new ComboPooledDataSource();  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了令其工作，记得在配置文件中为每个希望 MyBatis 调用的 setter 方法增加对应的属性。 下面是一个可以连接至 PostgreSQL 数据库的例子：</p><pre class="line-numbers language-none"><code class="language-none">&lt;dataSource type&#x3D;&quot;org.myproject.C3P0DataSourceFactory&quot;&gt;  &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;org.postgresql.Driver&quot;&#x2F;&gt;  &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:postgresql:mydb&quot;&#x2F;&gt;  &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;postgres&quot;&#x2F;&gt;  &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;&lt;&#x2F;dataSource&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据库厂商标识（databaseIdProvider）"><a href="#数据库厂商标识（databaseIdProvider）" class="headerlink" title="数据库厂商标识（databaseIdProvider）"></a>数据库厂商标识（databaseIdProvider）</h3><p>MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 <code>databaseId</code> 属性。 MyBatis 会加载带有匹配当前数据库 <code>databaseId</code> 属性和所有不带 <code>databaseId</code>属性的语句。 如果同时找到带有 <code>databaseId</code> 和不带 <code>databaseId</code> 的相同语句，则后者会被舍弃。 为支持多厂商特性，只要像下面这样在 mybatis-config.xml 文件中加入 <code>databaseIdProvider</code> 即可：</p><pre class="line-numbers language-none"><code class="language-none">&lt;databaseIdProvider type&#x3D;&quot;DB_VENDOR&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>databaseIdProvider 对应的 DB_VENDOR 实现会将 databaseId 设置为 <code>DatabaseMetaData#getDatabaseProductName()</code> 返回的字符串。 由于通常情况下这些字符串都非常长，而且相同产品的不同版本会返回不同的值，你可能想通过设置属性别名来使其变短：</p><pre class="line-numbers language-none"><code class="language-none">&lt;databaseIdProvider type&#x3D;&quot;DB_VENDOR&quot;&gt;  &lt;property name&#x3D;&quot;SQL Server&quot; value&#x3D;&quot;sqlserver&quot;&#x2F;&gt;  &lt;property name&#x3D;&quot;DB2&quot; value&#x3D;&quot;db2&quot;&#x2F;&gt;  &lt;property name&#x3D;&quot;Oracle&quot; value&#x3D;&quot;oracle&quot; &#x2F;&gt;&lt;&#x2F;databaseIdProvider&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在提供了属性别名时，databaseIdProvider 的 DB_VENDOR 实现会将 databaseId 设置为数据库产品名与属性中的名称第一个相匹配的值，如果没有匹配的属性，将会设置为 “null”。 在这个例子中，如果 <code>getDatabaseProductName()</code> 返回“Oracle (DataDirect)”，databaseId 将被设置为“oracle”。</p><p>你可以通过实现接口 <code>org.apache.ibatis.mapping.DatabaseIdProvider</code> 并在 mybatis-config.xml 中注册来构建自己的 DatabaseIdProvider：</p><pre class="line-numbers language-none"><code class="language-none">public interface DatabaseIdProvider &#123;  default void setProperties(Properties p) &#123; &#x2F;&#x2F; 从 3.5.2 开始，该方法为默认方法    &#x2F;&#x2F; 空实现  &#125;  String getDatabaseId(DataSource dataSource) throws SQLException;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="映射器（mappers）"><a href="#映射器（mappers）" class="headerlink" title="映射器（mappers）"></a>映射器（mappers）</h3><p>既然 MyBatis 的行为已经由上述元素配置完了，我们现在就要来定义 SQL 映射语句了。 但首先，我们需要告诉 MyBatis 到哪里去找到这些语句。 在自动查找资源方面，Java 并没有提供一个很好的解决方案，所以最好的办法是直接告诉 MyBatis 到哪里去找映射文件。 你可以使用相对于类路径的资源引用，或完全限定资源定位符（包括 <code>file:///</code> 形式的 URL），或类名和包名等。例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 使用相对于类路径的资源引用 --&gt;&lt;mappers&gt;  &lt;mapper resource&#x3D;&quot;org&#x2F;mybatis&#x2F;builder&#x2F;AuthorMapper.xml&quot;&#x2F;&gt;  &lt;mapper resource&#x3D;&quot;org&#x2F;mybatis&#x2F;builder&#x2F;BlogMapper.xml&quot;&#x2F;&gt;  &lt;mapper resource&#x3D;&quot;org&#x2F;mybatis&#x2F;builder&#x2F;PostMapper.xml&quot;&#x2F;&gt;&lt;&#x2F;mappers&gt;&lt;!-- 使用完全限定资源定位符（URL） --&gt;&lt;mappers&gt;  &lt;mapper url&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;mappers&#x2F;AuthorMapper.xml&quot;&#x2F;&gt;  &lt;mapper url&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;mappers&#x2F;BlogMapper.xml&quot;&#x2F;&gt;  &lt;mapper url&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;mappers&#x2F;PostMapper.xml&quot;&#x2F;&gt;&lt;&#x2F;mappers&gt;&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;&lt;mappers&gt;  &lt;mapper class&#x3D;&quot;org.mybatis.builder.AuthorMapper&quot;&#x2F;&gt;  &lt;mapper class&#x3D;&quot;org.mybatis.builder.BlogMapper&quot;&#x2F;&gt;  &lt;mapper class&#x3D;&quot;org.mybatis.builder.PostMapper&quot;&#x2F;&gt;&lt;&#x2F;mappers&gt;&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;&lt;mappers&gt;  &lt;package name&#x3D;&quot;org.mybatis.builder&quot;&#x2F;&gt;&lt;&#x2F;mappers&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jvm2</title>
      <link href="/2021/12/05/jvm2/"/>
      <url>/2021/12/05/jvm2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、what"><a href="#一、what" class="headerlink" title="一、what"></a>一、what</h2><h2 id="二、when"><a href="#二、when" class="headerlink" title="二、when"></a>二、when</h2><h2 id="三、垃圾收集算法及其实现"><a href="#三、垃圾收集算法及其实现" class="headerlink" title="三、垃圾收集算法及其实现"></a>三、垃圾收集算法及其实现</h2><h3 id="3-1-垃圾收集算法"><a href="#3-1-垃圾收集算法" class="headerlink" title="3.1.垃圾收集算法"></a>3.1.垃圾收集算法</h3><h4 id="3-1-1分代收集理论"><a href="#3-1-1分代收集理论" class="headerlink" title="3.1.1分代收集理论"></a>3.1.1分代收集理论</h4><ul><li><p>弱分代假说：绝大多数对象都是朝生夕灭的。</p></li><li><p>强分代假说：熬过越多次垃圾收集过程的对象就越难消亡。</p><p>垃圾收集器的设计原则：收集器应该将Java堆划分 出不同的区域，然后将回收对象依据其年龄（年龄即对象熬过垃圾收集过程的次数）分配到不同的区 域之中存储。将朝生夕灭的对象集中在同一个区域，将难以消亡的对象集中在一起。</p></li></ul><h4 id="3-2-2标记—清除算法"><a href="#3-2-2标记—清除算法" class="headerlink" title="3.2.2标记—清除算法"></a>3.2.2标记—清除算法</h4><p>算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，也可以反过来，标记存活的对象，统一回收所有未被标记的对象。</p><p>主要缺点有两个：</p><p>第一个是执行效率不稳定，如果Java堆中包含大量对 象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过 程的执行效率都随对象数量增长而降低；<br>第二个是内存空间的碎片化问题，标记、清除之后会产生大 量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找 到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p><img src="/2021/12/05/jvm2/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4%E7%AE%97%E6%B3%95.png" class=""><h4 id="3-3-3标记—复制算法"><a href="#3-3-3标记—复制算法" class="headerlink" title="3.3.3标记—复制算法"></a>3.3.3标记—复制算法</h4><h4 id="3-4-4标记—整理算法"><a href="#3-4-4标记—整理算法" class="headerlink" title="3.4.4标记—整理算法"></a>3.4.4标记—整理算法</h4><h3 id="3-2-算法实现"><a href="#3-2-算法实现" class="headerlink" title="3.2.算法实现"></a>3.2.算法实现</h3><h2 id="四、垃圾收集器"><a href="#四、垃圾收集器" class="headerlink" title="四、垃圾收集器"></a>四、垃圾收集器</h2><img src="/2021/12/05/jvm2/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.png" class=""><p>在垃圾收集器上下文语境中：</p><ul><li>并行（Parallel）：并行描述的是多条垃圾收集器线程之间的关系，说明同一时间有多条这样的线 程在协同工作，通常默认此时用户线程是处于等待状态。 ·</li><li>并发（Concurrent）：并发描述的是垃圾收集器线程与用户线程之间的关系，说明同一时间垃圾 收集器线程与用户线程都在运行。由于用户线程并未被冻结，所以程序仍然能响应服务请求，但由于 垃圾收集器线程占用了一部分系统资源，此时应用程序的处理的吞吐量将受到一定影响。</li></ul><h3 id="4-1-Serial"><a href="#4-1-Serial" class="headerlink" title="4.1.Serial"></a>4.1.Serial</h3><p>单线程收集器，在它进行垃圾收集时必须暂停其他所有工作线程，直至它工作结束。</p><img src="/2021/12/05/jvm2/serial.png" class=""><p>优点：简单而高效（与其他收集器的单线程相比），对于内 存资源受限的环境，它是所有收集器里额外内存消耗（Memory Footprint）最小的。</p><h3 id="4-2-ParNew"><a href="#4-2-ParNew" class="headerlink" title="4.2.ParNew"></a>4.2.ParNew</h3><p>ParNew收集器实质上是Serial收集器的多线程并行版本，除了同时使用多条线程进行垃圾收集之 外，其余的行为包括Serial收集器可用的所有控制参数（例如：-XX：SurvivorRatio、-XX： PretenureSizeThreshold、-XX：HandlePromotionFailure等）、收集算法、Stop The World、对象分配规 则、回收策略等都与Serial收集器完全一致，在实现上这两种收集器也共用了相当多的代码。</p><img src="/2021/12/05/jvm2/ParNew.png" class=""><h3 id="4-3-Parallel-Scavenge"><a href="#4-3-Parallel-Scavenge" class="headerlink" title="4.3.Parallel Scavenge"></a>4.3.Parallel Scavenge</h3><p>基于标记—复制算法，并行收集多线程收集器</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Http</title>
      <link href="/2021/12/03/http/"/>
      <url>/2021/12/03/http/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>concurrency</title>
      <link href="/2021/12/03/concurrency/"/>
      <url>/2021/12/03/concurrency/</url>
      
        <content type="html"><![CDATA[<h2 id="一、锁"><a href="#一、锁" class="headerlink" title="一、锁"></a>一、锁</h2><h3 id="1-Lock"><a href="#1-Lock" class="headerlink" title="1.Lock"></a>1.Lock</h3><h4 id="1-1-悲观锁和乐观锁"><a href="#1-1-悲观锁和乐观锁" class="headerlink" title="1.1.悲观锁和乐观锁"></a>1.1.悲观锁和乐观锁</h4><p>悲观锁：假设最坏的情况，每次拿数据的时候都会认为其他线程会修改，所以拿数据时都会上锁，其他线程阻塞，直到释放锁。</p><p>乐观锁：每次拿数据的时候，都会认为其他线程不会修改这个数据，不会上锁，数据更新时再检测。</p><h4 id="1-2-锁接口"><a href="#1-2-锁接口" class="headerlink" title="1.2.锁接口"></a>1.2.锁接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Lock</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Condition</span> <span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-AQS"><a href="#2-AQS" class="headerlink" title="2.AQS"></a>2.AQS</h3><h4 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1.概述"></a>2.1.概述</h4><ol><li>AQS可以分为独占式(一个线程获取锁)和共享式(多个线程获取)</li><li>维护一个同步状态和一个线程队列 </li></ol><h4 id="2-2-AQS模板方法和需要根据实际功能重写的方法"><a href="#2-2-AQS模板方法和需要根据实际功能重写的方法" class="headerlink" title="2.2.AQS模板方法和需要根据实际功能重写的方法"></a>2.2.AQS模板方法和需要根据实际功能重写的方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*AQS中的方法private volatile int state;   同步器内有同步状态属性getState() 获得同步状态setState(int newState)  设置同步状态CompareAndSetState(int expect,int update)  CAS设置同步状态*/</span><span class="token comment">//继承同步器可以重写的5个方法</span><span class="token comment">/*tryAcquire(int arg)tryRelease(int arg)tryAcquireShared(int arg)tryReleaseShared(int arg)isHeldExclusively() 当前同步器是否在独占模式下被占用*/</span><span class="token comment">//同步器模板方法(9个)</span><span class="token comment">//独占式获取锁</span><span class="token comment">//试图获取锁，当获取失败时，返回fasle，执行acquireQueued（），进行自旋获取锁</span><span class="token comment">//传入参数,执行addWaiter（）</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>EXCLUSIVE<span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//能够响应线程中断，通过抛异常</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">doAcquireInterruptibly</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">//超时限制，同时响应中断</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquireNanos</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">,</span> <span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">doAcquireNanos</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> nanosTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 释放独占式锁</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//唤醒头节点的后继节点线程</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">//共享式获取</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">doAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//响应中断共享式获取</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquireSharedInterruptibly</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">doAcquireSharedInterruptibly</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//可以设置超时时间共享式获取</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span>  <span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">,</span> <span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span>            <span class="token function">doAcquireSharedNanos</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> nanosTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">//共享式释放</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">releaseShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryReleaseShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">doReleaseShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//获取等待在队列中的线程集合</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">></span></span> <span class="token function">getQueuedThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> p <span class="token operator">=</span> tail<span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span> t <span class="token operator">=</span> p<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板方法实现中的重要方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//独占式</span><span class="token comment">//将节点放到队列尾部</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// Try the fast path of enq; backup to full enq on failure</span>       <span class="token class-name">Node</span> pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//CAS</span>               pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>               <span class="token keyword">return</span> node<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> node<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token comment">//如果放入失败，则循环放入</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Must initialize</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//CAS</span>                   tail <span class="token operator">=</span> head<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//CAS</span>                   t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>                   <span class="token keyword">return</span> t<span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token comment">//不断自旋去获取状态</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>       <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>           <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取成功</span>                   <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                     p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                   failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                   <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token comment">//检查更新状态</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                   <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                   interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>               <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//共享式</span><span class="token comment">//获取共享锁失败，执行 </span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doAcquireShared</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span>SHARED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">tryAcquireShared</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">setHeadAndPropagate</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>interrupted<span class="token punctuation">)</span>                            <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>                <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-同步队列的实现"><a href="#2-3-同步队列的实现" class="headerlink" title="2.3.同步队列的实现"></a>2.3.同步队列的实现</h4><img src="/2021/12/03/concurrency/%E9%98%9F%E5%88%97.png" class=""><p>原理：当前线程会获取同步状态，获取失败时，AQS将当前线程及相关信息构成一个节点，加入到队列中，当同步状态释放时，再将首节点的线程唤醒，尝试获取。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*Node节点的5个属性*/</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Node</span> SHARED <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Node</span> EXCLUSIVE <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token comment">//等待状态代表的含义</span>       <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CANCELLED <span class="token operator">=</span>  <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//取消状态</span>       <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SIGNAL    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//等待触发状态,前节点可能是head或者前节点为取消状态CANCELLED</span>       <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CONDITION <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//等待条件状态,在等待队列中，Condition执行signal()方法</span>       <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PROPAGATE <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//状态需要向后传播</span><span class="token comment">//等待状态</span>       <span class="token keyword">volatile</span> <span class="token keyword">int</span> waitStatus<span class="token punctuation">;</span><span class="token comment">//前驱</span>       <span class="token keyword">volatile</span> <span class="token class-name">Node</span> prev<span class="token punctuation">;</span><span class="token comment">//后驱</span>       <span class="token keyword">volatile</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span><span class="token comment">//当前线程</span>       <span class="token keyword">volatile</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span><span class="token comment">//等待队列中的后继节点</span>       <span class="token class-name">Node</span> nextWaiter<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-java中的锁"><a href="#3-java中的锁" class="headerlink" title="3.java中的锁"></a>3.java中的锁</h3><h4 id="3-3-重入锁"><a href="#3-3-重入锁" class="headerlink" title="3.3.重入锁"></a>3.3.重入锁</h4><p>重入锁的执行</p><img src="/2021/12/03/concurrency/%E9%87%8D%E5%85%A5%E9%94%81%E6%89%A7%E8%A1%8C.png" class=""><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//重入锁</span><span class="token comment">/*结构：ReentrantLock 三个内部类，Sync(继承AQS)和sync的两个子类FairSync和NonFairSync*/</span><span class="token comment">/*构造方法，默认为非公平锁，public ReentrantLock() &#123;sync = new NonfairSync();public ReentrantLock(boolean fair) &#123;sync = fair ? new FairSync() : new NonfairSync();&#125;&#125;true：公平锁  false：非公平锁/*公平锁的请求时间是按照实际顺序的，非公平锁不需要按排序。在执行时，公平锁多了一个!hasQueuedPredecessors()方法，即判断线程节点是否是队列首*/</span><span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非公平获取锁</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取当前线程</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取锁状态</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//锁空闲</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//CAS获取锁</span>                    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//重写tryRelese()</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span> <span class="token comment">//释放一次状态-1；</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> free<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//非公平锁</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NonfairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//公平锁</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FairSync</span> <span class="token keyword">extends</span> <span class="token class-name">Sync</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3000897897090466540L</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//重写公平锁的tryAcquire()</span>        <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取当前线程</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获得当前状态</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//锁空闲状态</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasQueuedPredecessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">//判断是否为队列中的第一个线程</span>                    <span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//是的话，CAS修改状态</span>                    <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置当前锁的拥有线程为当前线程</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//锁不是空闲，判断是否为线程重入</span>                <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span> <span class="token comment">//状态加1</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-读写锁"><a href="#3-2-读写锁" class="headerlink" title="3.2.读写锁"></a>3.2.读写锁</h4><ol><li><p>ReentrantReadWriteLock分为读锁ReentrantReadLock和写锁ReentrantWriteLock，读锁可以多个线程同时访问，写锁只能一个线程访问。</p></li><li><p>获得锁的状态</p><p>读写锁的状态由整型变量来维护，共32位，前16位维护读状态，后16位维护写状态</p><p>将状态的高位16位抹去得到写锁状态，将状态位左移16位得到读状态。</p><p>若状态为S，则获得写锁后状态变为S+1,获得读锁后变为S+(1&lt;&lt;16)</p></li><li><p>ReentrantReadWriteLock 的 结构</p><p>ReentrantReadWrireLock 的内部有多个内部类，syns继承AQS，sysc两个子类，公平和非公平两种模式，读锁和写锁两个内部类继承Lock类。</p><img src="/2021/12/03/concurrency/%E8%AF%BB%E5%86%99%E9%94%81%E7%BB%93%E6%9E%841.png" class=""><img src="/2021/12/03/concurrency/%E8%AF%BB%E5%86%99%E9%94%81%E7%BB%93%E6%9E%842.png" class=""></li><li><p>获取锁</p><img src="/2021/12/03/concurrency/%E8%AF%BB%E9%94%81.png" class=""><img src="/2021/12/03/concurrency/%E5%86%99%E9%94%81.png" class=""></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//读写锁</span><span class="token comment">//构造函数 默认是非公平锁</span><span class="token keyword">public</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        readerLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReadLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writerLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WriteLock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//写锁的获取与释放</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当前线程</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获得状态</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//解析状态，获得写锁个数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//存在写锁或读锁</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> current <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//存在读锁，或写锁不是当前拥有锁的线程</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">+</span> <span class="token function">exclusiveCount</span><span class="token punctuation">(</span>acquires<span class="token punctuation">)</span> <span class="token operator">></span> MAX_COUNT<span class="token punctuation">)</span><span class="token comment">//重入次数超标</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// Reentrant acquire</span>                <span class="token function">setState</span><span class="token punctuation">(</span>c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writerShouldBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span><span class="token comment">//无写读锁，CAS获取锁</span>                <span class="token operator">!</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> c <span class="token operator">+</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;读锁的获取protected final int tryAcquireShared(int unused) &#123;            Thread current &#x3D; Thread.currentThread(); &#x2F;&#x2F;获取当前线程            int c &#x3D; getState();            if (exclusiveCount(c) !&#x3D; 0 &amp;&amp;  &#x2F;&#x2F;写锁占领，当前线程不是锁持有线程                getExclusiveOwnerThread() !&#x3D; current)                return -1;            int r &#x3D; sharedCount(c);            if (!readerShouldBlock() &amp;&amp;                r &lt; MAX_COUNT &amp;&amp;                compareAndSetState(c, c + SHARED_UNIT)) &#123;                if (r &#x3D;&#x3D; 0) &#123;                    firstReader &#x3D; current;                    firstReaderHoldCount &#x3D; 1;                &#125; else if (firstReader &#x3D;&#x3D; current) &#123;                    firstReaderHoldCount++;                &#125; else &#123;                    HoldCounter rh &#x3D; cachedHoldCounter;                    if (rh &#x3D;&#x3D; null || rh.tid !&#x3D; getThreadId(current))                        cachedHoldCounter &#x3D; rh &#x3D; readHolds.get();                    else if (rh.count &#x3D;&#x3D; 0)                        readHolds.set(rh);                    rh.count++;                &#125;                return 1;            &#125;            return fullTryAcquireShared(current);        &#125;                        final int fullTryAcquireShared(Thread current) &#123;            &#x2F;*             * This code is in part redundant with that in             * tryAcquireShared but is simpler overall by not             * complicating tryAcquireShared with interactions between             * retries and lazily reading hold counts.             *&#x2F;            HoldCounter rh &#x3D; null;            for (;;) &#123;                int c &#x3D; getState();                if (exclusiveCount(c) !&#x3D; 0) &#123;                    if (getExclusiveOwnerThread() !&#x3D; current)                        return -1;                    &#x2F;&#x2F; else we hold the exclusive lock; blocking here                    &#x2F;&#x2F; would cause deadlock.                &#125; else if (readerShouldBlock()) &#123;                    &#x2F;&#x2F; Make sure we&#39;re not acquiring read lock reentrantly                    if (firstReader &#x3D;&#x3D; current) &#123;                        &#x2F;&#x2F; assert firstReaderHoldCount &gt; 0;                    &#125; else &#123;                        if (rh &#x3D;&#x3D; null) &#123;                            rh &#x3D; cachedHoldCounter;                            if (rh &#x3D;&#x3D; null || rh.tid !&#x3D; getThreadId(current)) &#123;                                rh &#x3D; readHolds.get();                                if (rh.count &#x3D;&#x3D; 0)                                    readHolds.remove();                            &#125;                        &#125;                        if (rh.count &#x3D;&#x3D; 0)                            return -1;                    &#125;                &#125;                if (sharedCount(c) &#x3D;&#x3D; MAX_COUNT)                    throw new Error(&quot;Maximum lock count exceeded&quot;);                if (compareAndSetState(c, c + SHARED_UNIT)) &#123;                    if (sharedCount(c) &#x3D;&#x3D; 0) &#123;                        firstReader &#x3D; current;                        firstReaderHoldCount &#x3D; 1;                    &#125; else if (firstReader &#x3D;&#x3D; current) &#123;                        firstReaderHoldCount++;                    &#125; else &#123;                        if (rh &#x3D;&#x3D; null)                            rh &#x3D; cachedHoldCounter;                        if (rh &#x3D;&#x3D; null || rh.tid !&#x3D; getThreadId(current))                            rh &#x3D; readHolds.get();                        else if (rh.count &#x3D;&#x3D; 0)                            readHolds.set(rh);                        rh.count++;                        cachedHoldCounter &#x3D; rh; &#x2F;&#x2F; cache for release                    &#125;                    return 1;                &#125;            &#125;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Condition"><a href="#4-Condition" class="headerlink" title="4.Condition"></a>4.Condition</h3><h4 id="4-1-Condition接口"><a href="#4-1-Condition接口" class="headerlink" title="4.1.Condition接口"></a>4.1.Condition接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Condition</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//进入等待状态，对中断敏感</span>    <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>    <span class="token comment">//进入等待状态，但对中断不敏感</span>    <span class="token keyword">void</span> <span class="token function">awaitUninterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//进入等待状态，可以设定时间</span>    <span class="token keyword">long</span> <span class="token function">awaitNanos</span><span class="token punctuation">(</span><span class="token keyword">long</span> nanosTimeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>    <span class="token comment">//进入等待状态，如果到了指定时间没被通知则返回false</span>    <span class="token keyword">boolean</span> <span class="token function">awaitUntil</span><span class="token punctuation">(</span><span class="token class-name">Date</span> deadline<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>    <span class="token comment">//唤醒</span>    <span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-AQS的Condition实现类ConditionObject"><a href="#4-2-AQS的Condition实现类ConditionObject" class="headerlink" title="4.2.AQS的Condition实现类ConditionObject"></a>4.2.AQS的Condition实现类ConditionObject</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//响应中断</span>          <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//加入等待队列</span>          <span class="token keyword">int</span> savedState <span class="token operator">=</span> <span class="token function">fullyRelease</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> interruptMode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnSyncQueue</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interruptMode <span class="token operator">=</span> <span class="token function">checkInterruptWhileWaiting</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acquireQueued</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> savedState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> interruptMode <span class="token operator">!=</span> THROW_IE<span class="token punctuation">)</span>              interruptMode <span class="token operator">=</span> REINTERRUPT<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>nextWaiter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// clean up if cancelled</span>              <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>interruptMode <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>              <span class="token function">reportInterruptAfterWait</span><span class="token punctuation">(</span>interruptMode<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addConditionWaiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">Node</span> t <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>          <span class="token comment">// If lastWaiter is cancelled, clean out.</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token function">unlinkCancelledWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              t <span class="token operator">=</span> lastWaiter<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span>CONDITION<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>              firstWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>          <span class="token keyword">else</span>              t<span class="token punctuation">.</span>nextWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>          lastWaiter <span class="token operator">=</span> node<span class="token punctuation">;</span>          <span class="token keyword">return</span> node<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、并发队列"><a href="#二、并发队列" class="headerlink" title="二、并发队列"></a>二、并发队列</h2><p>实现安全队列：阻塞算法和非阻塞方法</p><ul><li><p>java中的阻塞队列</p><p>ArrayBlockingQueue：数组结构有界队列</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/* 内部由一个重入锁实现，默认是不公平，需要指定 */</span><span class="token keyword">public</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>       lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span>fair<span class="token punctuation">)</span><span class="token punctuation">;</span>       notEmpty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       notFull <span class="token operator">=</span>  lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>LinkedBlockingQueue：链表结构有界队列，默认长度是Integer.MAX_VALUE。 </p><p>PriorityBlockingQueue：支持优先级排序的无界阻塞队列</p><p>DelayQueue：由优先级队列实现的无界队列 </p><p>SynchronouseQueue：不存储元素的队列</p><p>LinkedTrnsferQueue：由链表组成的无界队列</p><p>LinkedBlockingDeque：由链表组成的双向队列</p></li></ul><h2 id="三、线程池"><a href="#三、线程池" class="headerlink" title="三、线程池"></a>三、线程池</h2><ol><li><p>线程池的实现原理</p><p>提交一个新任务，判断线程池中是否有空闲线程，存在执行任务，不存在则判断线程池是否达到核心数，不到则创建新线程执行，满、到则判断队列是否已满，不满加入队列，满则判断是否达到线程池最大数，没则创建新线程，满则失败。</p><img src="/2021/12/03/concurrency/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86.jpeg" class=""></li><li><p>ThreadPoolExecutor</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*构造函数：int corePoolSize：该线程池中核心线程数最大值int maximumPoolSize： 该线程池中线程总数最大值long keepAliveTime：该线程池中非核心线程闲置超时时长TimeUnit是一个枚举类型，其包括：NANOSECONDS ： 1微毫秒 = 1微秒 / 1000MICROSECONDS ： 1微秒 = 1毫秒 / 1000MILLISECONDS ： 1毫秒 = 1秒 /1000SECONDS ： 秒MINUTES ： 分HOURS ： 小时DAYS ： 天BlockingQueue workQueue：该线程池中的任务队列：维护着等待执行的Runnable对象ThreadFactory threadFactory：创建线程的方式RejectedExecutionHandler handler：抛出异常专用的*/</span><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                              <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>             <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                              <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span>                              <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>             threadFactory<span class="token punctuation">,</span> defaultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                              <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span>                              <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>             <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                              <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span>                              <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>                              <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>            keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> threadFactory <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*线程池新建线程的时候，如果当前线程总数小于corePoolSize，则新建的是核心线程，如果超过corePoolSize，则新建的是非核心线程核心线程默认情况下会一直存活在线程池中。如果指定ThreadPoolExecutor的allowCoreThreadTimeOut这个属性为true，那么核心线程如果闲置状态的话，超过一定时间(时长下面参数决定)，就会被销毁掉。一个非核心线程，如果闲置状态的时长超过这个参数所设定的时长，就会被销毁掉，如果设置allowCoreThreadTimeOut = true，则会作用于核心线程。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>ThreadPoolExecutor的子类：</p><ul><li>FixedThreadPool：可重用固定线程数</li><li>SingleThreadExecutor：只使用单个线程</li><li>CachedThreadPool： 核心线程数0，非核心Max_Value即无界，设有空闲时间</li></ul><pre class="line-numbers language-none"><code class="language-none">Executors辅助类&#x2F;&#x2F;创建FixedThreadPool    public static ExecutorService newFixedThreadPool(int nThreads) &#123;        return new ThreadPoolExecutor(nThreads, nThreads,                                      0L, TimeUnit.MILLISECONDS,                                      new LinkedBlockingQueue&lt;Runnable&gt;());    &#125;&#x2F;&#x2F;创建SingleThreadExecutor    public static ExecutorService newSingleThreadExecutor() &#123;        return new FinalizableDelegatedExecutorService            (new ThreadPoolExecutor(1, 1,                                    0L, TimeUnit.MILLISECONDS,                                    new LinkedBlockingQueue&lt;Runnable&gt;()));    &#125;&#x2F;&#x2F;创建CachedThreadPool     public static ExecutorService newCachedThreadPool() &#123;        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,                                      60L, TimeUnit.SECONDS,                                      new SynchronousQueue&lt;Runnable&gt;());    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>FixedThreadPool</p><ul><li>由构造方法可得知：核心线程数和最大线程数相等，超时时间为0，即空则消除，采用LinkedBlockingQueue。</li><li>原理：提交任务，少于corePoolSize则新建线程执行任务，当满后，放入队列中，默认队列最大值。所以该线程池不会拒绝任务。</li></ul></li><li><p>SingleThreadExecutor</p><ul><li>构造方法可知，核心线程数和核心线程数都是1，超时时间为0，使用LinkedBlockingQueue。</li></ul></li><li><p>CachedThreadPool</p><ul><li>构造方法，核心线程数0，最大线程数Integer.MAX_VALUE，超时时间为60s.使用SynchronouseQueue</li></ul></li></ul></li></ol><h2 id="四、Executor框架"><a href="#四、Executor框架" class="headerlink" title="四、Executor框架"></a>四、Executor框架</h2><img src="/2021/12/03/concurrency/Executor%E6%A1%86%E6%9E%B6.png" class=""><h2 id="五、volatile原理"><a href="#五、volatile原理" class="headerlink" title="五、volatile原理"></a>五、volatile原理</h2><p>当进行写操作时，会发送lock指令：</p><p>​    JVM 向处理器发送一条Lock指令，将变量写回系统内存。</p><p>​    当处理器发现当前对应内存地址被修改，其他缓存了该内存地址的数据将被设为无效</p><h2 id="六、synchronized"><a href="#六、synchronized" class="headerlink" title="六、synchronized"></a>六、synchronized</h2><ol><li><p>锁对象</p><ul><li>同步方法，锁是当前实例对象</li><li>静态同步方法，锁是当前类</li><li>同步方法块，锁是synchronized块配置的对象</li></ul></li><li><p>java对象头</p><p>对象存储在堆上，由对象头，对象实例数据和对齐填充(保证对象的大小是8的倍数)</p><p>锁的状态分为：无锁、偏向锁、轻量级锁和重量级锁，增加了偏向锁和轻量级锁，且锁    升级之后，是不会降级的，即轻锁变成重锁之后不能再变成轻锁。</p><p>&lt;1.Mark Word(存储对象的锁信息和hashcode)</p><img src="/2021/12/03/concurrency/%E5%AF%B9%E8%B1%A1%E5%A4%B4.png" class=""><p>&lt;2.指向类的指针</p><p>&lt;3.数组长度（只有数组对象才有）</p></li><li><p>获取锁的级别</p><p>当新建一个对象时，锁的状态是无锁。</p><p>默认开启偏向锁，且是延时启动的。-xx:BiasedLockingStarupDelay=0,关闭延时。</p><p>当出现新线程与拥有锁的线程竞争时，升级为轻量级锁</p><img src="/2021/12/03/concurrency/sychronized%E9%A1%BA%E5%BA%8F.png" class=""></li><li><p>锁分类及升级</p><ul><li><p>偏向锁</p><p>加锁：当线程访问同步代码块时，会将该线程ID存储在对象头和栈帧中，当线程再次访问该代码块时，会验证对象头中是否有访问线程的ID，若有的话，则直接获得锁，若不存在此线程ID,则检查偏向锁位是否置为1，若为1，则此线程获得偏向锁，若为0，则将此线程置为竞争线程(CAS轻量级锁)。</p><p>放锁：偏向锁采用等到竞争才释放锁的机制。当锁被竞争时，首先会暂停拥有锁的线程，然后检查拥有锁的线程是否活着，&lt;1若活着，先查看对象头中的Epoch，若锁的撤销次数大于40次，则升级为轻量级锁，再检查该线程与竞争的线程是否仍竞争，若不存在竞争，则释放锁，竞争线程获取锁，若存在竞争，则升级锁。&lt;2线程死，则释放锁，竞争线程获得锁。</p></li><li><p>轻量级</p><p>获取和释放锁</p><img src="/2021/12/03/concurrency/sychronized%E5%8E%9F%E7%90%86.png" class=""><img src="/2021/12/03/concurrency/%E9%94%81%E5%A4%B1%E8%B4%A5.png" class=""></li><li><p>重量级</p></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ComputerSystems</title>
      <link href="/2021/12/03/computersystems/"/>
      <url>/2021/12/03/computersystems/</url>
      
        <content type="html"><![CDATA[<h2 id="一、操作系统概述"><a href="#一、操作系统概述" class="headerlink" title="一、操作系统概述"></a>一、操作系统概述</h2><h2 id="二、进程和线程"><a href="#二、进程和线程" class="headerlink" title="二、进程和线程"></a>二、进程和线程</h2><ol><li><p>CPU的工作原理</p><p>设置命令初值，pc=50，从地址总线获取内存中的命令，返回50命令到CPU中，执行命令</p><img src="/2021/12/03/computersystems/a.png" class=""></li><li><p>提出问题:IO指令的运算实际是计算指令的10^6倍，若先执行IO指令，则有数条指令在等待，CPU利用率过低</p><p>解决方法：并发</p></li><li><p>进程的组织</p><ul><li><p>PCB：为了描述控制进程的运行，系统中存放进程的管理和控制信息的数据结构称为进程控制块（PCB Process Control Block），它是进程实体的一部分，是操作系统中最重要的记录性数据结构。它是进程管理和控制的最重要的数据结构，每一个进程均有一个PCB，在创建进程时，建立PCB，伴随进程运行的全过程，直到进程撤消而撤消。</p></li><li><p>PCB+队列+状态组成了操作系统的组织，CPU将同一状态的PCB放进同一队列，根据不同的状态队列推进。</p><img src="/2021/12/03/computersystems/b.png" class=""><br><img src="/2021/12/03/computersystems/c.png" class=""></li></ul></li><li><p>进程的交替</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获得下一个要执行的进程</span>    pNew <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>ReadyQuene<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//交换</span>    <span class="token function">switch_to</span><span class="token punctuation">(</span>pCur<span class="token punctuation">,</span>pNew<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进程的地址空间分离</p></li><li><p>进程之间的合作</p></li><li><p>用户级线程</p><img src="/2021/12/03/computersystems/d.png" class=""></li><li><p>内核级线程及其实现 </p></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>stack</title>
      <link href="/2021/12/03/stack/"/>
      <url>/2021/12/03/stack/</url>
      
        <content type="html"><![CDATA[<h2 id="一、栈概述"><a href="#一、栈概述" class="headerlink" title="一、栈概述"></a>一、栈概述</h2><p>栈的插入删除只能在表 的尾端进行，即后入先出，进行插入删除操作的位置是栈顶，另一段是栈底  插入称为入栈，删除称为出栈</p><h2 id="二、栈的实现"><a href="#二、栈的实现" class="headerlink" title="二、栈的实现"></a>二、栈的实现</h2><ol><li><p>顺序储存，数组实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top<span class="token punctuation">;</span>      <span class="token comment">//栈顶指针</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>objects <span class="token operator">=</span> objects<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> top<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> top<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objects<span class="token punctuation">.</span>length<span class="token operator">==</span>top<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"满了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        objects<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"空了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> objects<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">peak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> objects<span class="token punctuation">[</span>top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"栈顶为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>链式储存，链表实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStack2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">StackNode</span> top<span class="token punctuation">;</span>  <span class="token comment">//栈帧</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack2</span><span class="token punctuation">(</span><span class="token class-name">StackNode</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> top<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">StackNode</span> n <span class="token operator">=</span> top<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">peak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> top<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StackNode</span> stackNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StackNode</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        stackNode<span class="token punctuation">.</span>next <span class="token operator">=</span> top<span class="token punctuation">;</span>        top <span class="token operator">=</span> stackNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">StackNode</span> s <span class="token operator">=</span> top<span class="token punctuation">;</span>            top <span class="token operator">=</span> top<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StackNode</span> stackNode <span class="token operator">=</span> top<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>stackNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stackNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stackNode <span class="token operator">=</span> stackNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">StackNode</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> data<span class="token punctuation">;</span>    <span class="token class-name">StackNode</span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StackNode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token class-name">StackNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>queue</title>
      <link href="/2021/12/03/queue/"/>
      <url>/2021/12/03/queue/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ol><li><p>只允许在一端插入数据操作，在另一端进行删除数据操作的特殊线性表；进行插入操作的一端称为队尾（入队列），进行删除操作的一端称为队头（出队列）；队列具有先进先出（FIFO）的特性。</p></li><li><p>队列实现的关键在于两个指针，头指针指向已出队的元素，尾指针指向添加后的元素。</p><img src="/2021/12/03/queue/g-1633009583595.png" class=""></li><li><p>队列类型</p><p>顺序队列</p><p>循环队列</p></li></ol><h2 id="二、基本操作实现"><a href="#二、基本操作实现" class="headerlink" title="二、基本操作实现"></a>二、基本操作实现</h2><ol><li><p>顺序储存实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 本次实现不考虑容量问题 * 基本操作： *  入队：enqueue() *  出队：dequeue() *  判断是否为空：isEmpty *  大小：size() *  返回队首元素不删除：peek() *  返回队尾元素不删除：poll() *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rear <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rear<span class="token operator">>=</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"数组长度不足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        elements<span class="token punctuation">[</span><span class="token operator">++</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            front<span class="token operator">++</span><span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列已为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> rear<span class="token operator">==</span>front<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 循环数组队列 * 两个指针： * 首指针指向首元素 * 尾指针指向尾元素的后一个元素 * 约定要留一个空档位置，即还剩余一个位置的时候就满。 * 当数组存满之后，向之前空档的位置填数据 *  rear = (rear+1)%array.length  得到新的位置 * 当 front == (rear+1)%array.length 时，队列满 * 当 rear== front 时，队列为空 */</span><span class="token keyword">class</span> <span class="token class-name">CircleQueue</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>front <span class="token operator">==</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        elements<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>        rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> o <span class="token operator">=</span> elements<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>            front<span class="token operator">=</span><span class="token punctuation">(</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> o<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列已为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> rear<span class="token operator">==</span>front<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>rear<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>链式储存实现</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redblacktrees</title>
      <link href="/2021/12/03/redblacktrees/"/>
      <url>/2021/12/03/redblacktrees/</url>
      
        <content type="html"><![CDATA[<h2 id="一、树概述"><a href="#一、树概述" class="headerlink" title="一、树概述"></a>一、树概述</h2><img src="/2021/12/03/redblacktrees/a.png" class=""><p>有关树的常用术语</p><ul><li>节点：每个储存数据的圆圈都是节点；</li><li>节点的路径：从根节点到本节点经历的节点和分支的顺序排序。</li><li>路径的长度：指节点的路径包含的分支数，即边数。</li><li>节点的度：指该节点拥有的子树的个数；</li><li>树的度：所有的节点的度中，最大值。</li><li>叶节点：即终端节点。</li><li>分支节点：树中除了叶节点之外的节点都是分支节点。</li><li>子节点：指该节点的子树的根节点。</li><li>父节点：拥有子树的节点。</li><li>节点的层次：根节点的层次为0，依次向下加一；</li><li>树的深度：节点的层数；</li></ul><h2 id="二、二叉树"><a href="#二、二叉树" class="headerlink" title="二、二叉树"></a>二、二叉树</h2><img src="/2021/12/03/redblacktrees/b.png" class=""><pre class="line-numbers language-none"><code class="language-none">前：8 3 1 6 4 7 10 14 13中：1 3 4 6 7 8 10 13 14后：1 4 7 6 3 13 14 10 8二叉树节点：public class TreeNode &#123;    private Object data;    private TreeNode left;    private TreeNode right;Constructor 构造方法Setter and Getter  &#125;二叉树递归遍历： 前：public static void pre(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            System.out.println(t.getData());            pre(t.getLeft());            pre(t.getRight());        &#125;     &#125;   中：public static void in(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            in(t.getLeft());            System.out.println(t .getData());            in(t.getRight());        &#125;     &#125;   后：public static void post(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            post(t.getLeft());            post(t.getRight());            System.out.println(t.getData());        &#125;     &#125;二叉查找树左子树的值均小于根节点的值，右子树的值均大于根节点的值。且每个子树均是二叉查找树。二叉平衡树在二叉查找树的基础上，通过对数据的调整，达到数据平衡的效果。   二叉查找树(二叉排序树)public class Tree &#123;    private TreeNode root;    public Tree(TreeNode root) &#123;        this.root &#x3D; root;    &#125;    public Tree() &#123;    &#125;    public TreeNode getRoot() &#123;        return root;    &#125;    public void setRoot(TreeNode root) &#123;        this.root &#x3D; root;    &#125;    public void add(TreeNode treeNode)&#123;        if(root &#x3D;&#x3D; null)&#123;            root &#x3D; treeNode;        &#125;else&#123;            root.add(treeNode);        &#125;    &#125;    public TreeNode search(int data)&#123;        if(root &#x3D;&#x3D; null)&#123;            return null;        &#125;else&#123;            return root.search(data);        &#125;    &#125;    public TreeNode parentSearch(int data)&#123;        if(root&#x3D;&#x3D;null)&#123;            return null;        &#125;else&#123;            return root.searchParent(data);        &#125;    &#125;    public void delete(int data)&#123;        if(root&#x3D;&#x3D;null) return;        else&#123;            TreeNode target &#x3D; this.search(data);            if(target&#x3D;&#x3D;null)&#123;                return;            &#125;            TreeNode parentNode &#x3D; this.parentSearch(data);            if(target.getLeft()&#x3D;&#x3D;null&amp;&amp;target.getRight()&#x3D;&#x3D;null)&#123;                if(parentNode.getLeft().getData()&#x3D;&#x3D;data)&#123;                    parentNode.setLeft(null);                &#125;else&#123;                    parentNode.setRight(null);                &#125;            &#125;            &#x2F;&#x2F;删除两个节点            if(target.getLeft()!&#x3D;null&amp;&amp;target.getRight()!&#x3D;null)&#123;                TreeNode node &#x3D; target.getRight();                int min &#x3D; node.getData();                while(node.getLeft()!&#x3D;null)&#123;                    node &#x3D; node.getLeft();                    min &#x3D; node.getData();                &#125;                delete(min);                target.setData(min);            &#125;            &#x2F;&#x2F;删除只有子节点的节点            if(target.getLeft()&#x3D;&#x3D;null&amp;&amp;target.getRight()!&#x3D;null)&#123;                parentNode.setRight(target.getRight());            &#125;else if(target.getLeft()!&#x3D;null&amp;&amp;target.getRight()&#x3D;&#x3D;null)&#123;                parentNode.setLeft(target.getLeft());            &#125;        &#125;    &#125;    &#x2F;&#x2F;遍历    public void preRoot()&#123;        if(root!&#x3D;null)&#123;            preRoot(root);        &#125;    &#125;    public void preRoot(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            System.out.println(t.getData());            preRoot(t.getLeft());            preRoot(t.getRight());        &#125;    &#125;    public void inRoot()&#123;        if(root!&#x3D; null)&#123;            inRoot(root);        &#125;    &#125;    public void inRoot(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            inRoot(t.getLeft());            System.out.println(t.getData());            inRoot(t.getRight());        &#125;    &#125;    public void postRoot()&#123;        if(root!&#x3D;null)&#123;            postRoot(root);        &#125;    &#125;    public void postRoot(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            postRoot(t.getLeft());            postRoot(t.getRight());            System.out.println(t.getData());        &#125;    &#125;&#125;class TreeNode &#123;    private int data;    private TreeNode left;    private TreeNode right;    public TreeNode(int data) &#123;        this.data &#x3D; data;    &#125;    public TreeNode() &#123;    &#125;    public int getData() &#123;        return data;    &#125;    public void setData(int data) &#123;        this.data &#x3D; data;    &#125;    public TreeNode getLeft() &#123;        return left;    &#125;    public void setLeft(TreeNode left) &#123;        this.left &#x3D; left;    &#125;    public TreeNode getRight() &#123;        return right;    &#125;    public void setRight(TreeNode right) &#123;        this.right &#x3D; right;    &#125;    public void add(TreeNode treeNode)&#123;        if(treeNode&#x3D;&#x3D;null) return;        if(treeNode.data&lt;&#x3D;this.data)&#123;            if(this.left&#x3D;&#x3D;null)&#123;                this.left&#x3D;treeNode;            &#125;else&#123;                this.left.add(treeNode);            &#125;        &#125;else&#123;            if(this.right&#x3D;&#x3D;null)&#123;                this.right&#x3D;treeNode;            &#125;else&#123;                this.right.add(treeNode);            &#125;        &#125;    &#125;    public TreeNode search(int data)&#123;        if(data&#x3D;&#x3D;this.data) &#123;            return this;        &#125;else if(data&lt;this.data)&#123;            if(this.left&#x3D;&#x3D;null)&#123;                return null;            &#125;            return this.left.search(data);        &#125; else&#123;            if(this.right&#x3D;&#x3D;null)&#123;                return null;            &#125;            return this.right.search(data);        &#125;    &#125;    public TreeNode searchParent(int data)&#123;        if((this.left!&#x3D;null&amp;&amp;this.left.data&#x3D;&#x3D;data)||(this.right!&#x3D;null&amp;&amp;this.right.data&#x3D;&#x3D;data))&#123;            return this;        &#125;else if(data&lt;this.data&amp;&amp;this.left!&#x3D;null)&#123;            return this.left.searchParent(data);        &#125;else if(data&gt;this.data&amp;&amp;this.right!&#x3D;null)&#123;            return this.right.searchParent(data);        &#125;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven2</title>
      <link href="/2021/12/01/maven2/"/>
      <url>/2021/12/01/maven2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven1</title>
      <link href="/2021/11/28/maven1/"/>
      <url>/2021/11/28/maven1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Maven继承"><a href="#一、Maven继承" class="headerlink" title="一、Maven继承"></a>一、Maven继承</h2><h3 id="1-1-父模块两个条件"><a href="#1-1-父模块两个条件" class="headerlink" title="1.1.父模块两个条件"></a>1.1.父模块两个条件</h3><ul><li>packing标签格式为pom</li><li>删除src文件夹</li></ul><h3 id="1-2-pom文件"><a href="#1-2-pom文件" class="headerlink" title="1.2.pom文件"></a>1.2.pom文件</h3><h4 id="1-2-1-父子模块在同级目录"><a href="#1-2-1-父子模块在同级目录" class="headerlink" title="1.2.1.父子模块在同级目录"></a>1.2.1.父子模块在同级目录</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>m1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>../m1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>m1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../m1/pom.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>m1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-子模块在父模块中"><a href="#1-2-2-子模块在父模块中" class="headerlink" title="1.2.2.子模块在父模块中"></a>1.2.2.子模块在父模块中</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>m2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>m2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>m2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>m2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-手动设置"><a href="#1-3-手动设置" class="headerlink" title="1.3.手动设置"></a>1.3.手动设置</h3><ul><li>将模块设置为父工程，使模块满足父工程的两个条件即可。</li><li>在模块中添加parent标签即可将模块设置为子工程   </li></ul><h3 id="1-4-依赖和插件管理"><a href="#1-4-依赖和插件管理" class="headerlink" title="1.4.依赖和插件管理"></a>1.4.依赖和插件管理</h3><h2 id="二、Maven聚合"><a href="#二、Maven聚合" class="headerlink" title="二、Maven聚合"></a>二、Maven聚合</h2><p>需求：一次构建多个项目模块。为了将多个模块聚合到一起，需要额外创建一个聚合模块。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java6</title>
      <link href="/2021/11/25/java6/"/>
      <url>/2021/11/25/java6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>maven</title>
      <link href="/2021/11/16/maven/"/>
      <url>/2021/11/16/maven/</url>
      
        <content type="html"><![CDATA[<p>一、</p><p>构建项目过程的几个主要环节</p><p>①清理:删除以前的编译结果,为重新编译做好准备。</p><p>②编译:将Java源程序编译为字节码文件。</p><p>③测试:针对项目中的关键点进行测试,确保项目在迭代开发过程中关键点的正确性。</p><p>④报告:在每一次测试后以标准的格式记录和展示测试结果。</p><p>⑤打包:将一个包含诸多文件的工程封装为一个压缩文件用于安装或部署。Java工程对    应 jar包,Web工程对应war包。</p><p>⑥安装:在Maven环境下特指将打包的结果——jar包或war包安装到本地仓库中。</p><p>⑦部署:将打包的结果部署到远程仓库或将war包部署到服务器上运行</p><h2 id="二、pom-xml-Project-Object-Model"><a href="#二、pom-xml-Project-Object-Model" class="headerlink" title="二、pom.xml(Project Object Model)"></a>二、pom.xml(Project Object Model)</h2><h3 id="2-1-坐标"><a href="#2-1-坐标" class="headerlink" title="2.1.坐标"></a>2.1.坐标</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0                        http://maven.apache.org/maven-v4_0_0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--坐标：groupId、artifactId、version、packaging、classifier--></span>    <span class="token comment">&lt;!--classifier:该元素用来定义构建输出的一些附属构件，该元素不能直接定义--></span>    <span class="token comment">&lt;!--         含义：组织标识，定义了项目属于哪个组，隶属于哪个项目。        用途：此名称则是本地仓库中的路径，列如：otowa.user.dao，在M2_REPO目录下，将是: otowa/user/dao目录        命名规范:项目名称，模块，子模块    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>otowa.user.dao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--         含义：项目名称也可以说你所模块名称，定义当面Maven项目在组中唯一的ID        用途：例如：user-dao，在M2_REPO目录下，将是：otowa/user/dao/user-dao目录        命名规范:唯一就好    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>user-dao<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--         含义：项目当前的版本号        用途：例如：0.0.1-SNAPSHOT，在M2_REPO目录下，将是：otowa/user/dao/user-dao/0.0.1-SNAPSHOT目录    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 打包的格式，可以为：pom , jar , maven-plugin , ejb , war , ear , rar , par --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 元素声明了一个对用户更为友好的项目名称 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-依赖"><a href="#2-2-依赖" class="headerlink" title="2.2.依赖"></a>2.2.依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactia</span><span class="token punctuation">></span></span>.. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactid</span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>.. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--依赖类型,和packing相对应--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--依赖范围--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--标记依赖是否可选--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>.. <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--排除传递依赖性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-1-依赖范围"><a href="#2-2-1-依赖范围" class="headerlink" title="2.2.1.依赖范围"></a>2.2.1.依赖范围</h4><p>依赖范围就是用来控制依赖与这三种classpath(编译classpath.测试classpath.运行classpath)的关系</p><ul><li>compile: 编译依赖范围。如果没有指定，就会默认使用该依赖范围。使用此依赖范围的Maven依赖，对于编译、测试、运行三种classpath都有效。典型的例子是spring-core，在编译、测试和运行的时候都需要使用该依赖。</li><li>test:测试依赖范围。使用此依赖范围的Maven依赖，只对于测试classpath有效，在编译主代码或者运行项目的使用时将无法使用此类依赖。典型的例子是JUnit,它只有在编译测试代码及运行测试的时候才需要。</li><li>provided:已提供依赖范围。使用此依赖范围的Maven依赖，对于编译和测试classpath有效，但在运行时无效。典型的例子是servlet-api，编译和测试项目的时候需要该依赖，但在运行项目的时候，由于容器已经提供，就不需要Maven重复地引入一遍。</li><li>runtime:运行时依赖范围。使用此依赖范围的Maven依赖，对于测试和运行classpath有效，但在编译主代码时无效。典型的例子是JDBC驱动实现，项目主代码的编译，只需要JDK提供的JDBC接口，只有在执行测试或者运行项目的时候才需要实现上述接口的具体JDBC驱动。</li><li>system:系统依赖范围。该依赖与三种classpath的关系，和provided依赖范围完全一致。但是，使用system范围的依赖时必须通过systemPath元素显式地指定依赖文件的路径。由于此类依赖不是通过Maven仓库解析的，而且往往与本机系统绑定，可能造成构建的不可移植，因此应该谨慎使用。</li></ul><img src="/2021/11/16/maven/%E4%BE%9D%E8%B5%96%E8%8C%83%E5%9B%B4%E8%A1%A8.png" class=""><h4 id="2-2-2-传递性依赖"><a href="#2-2-2-传递性依赖" class="headerlink" title="2.2.2.传递性依赖"></a>2.2.2.传递性依赖</h4><p>项目A引入依赖B，A直接依赖于B，而B需要依赖C，B直接依赖于C；则A间接依赖于C；传递性依赖机制，使我们不用考虑所需依赖的依赖，间接依赖有Maven引入。A对于B为第一直接依赖，B对于C是第二直接依赖，A对于C是传递性依赖。第一直接依赖和第二直接依赖决定了传递性依赖的依赖范围，如下表，列为第一直接依赖，行为第二直接依赖，交叉为传递性依赖的范围，“—”表示依赖不会被传递。</p><img src="/2021/11/16/maven/%E4%BC%A0%E9%80%92%E6%80%A7%E4%BE%9D%E8%B5%96%E8%8C%83%E5%9B%B4%E8%A1%A8.png" class="" title="依赖性传递依赖范围"><p>若有两条依赖链，A—B—C(1.0)，A—D—C(2.0)，两个相同的传递性依赖是不同的版本。</p><p> 第一原则：路径最近者优先，若路径长度一样，由在pom文件中的声明顺序决定，靠前优胜。</p><h4 id="2-2-3-可选依赖"><a href="#2-2-3-可选依赖" class="headerlink" title="2.2.3.可选依赖"></a>2.2.3.可选依赖</h4><p>​    </p><h3 id="2-3-生命周期和插件"><a href="#2-3-生命周期和插件" class="headerlink" title="2.3.生命周期和插件"></a>2.3.生命周期和插件</h3><h4 id="2-3-1-maven生命周期"><a href="#2-3-1-maven生命周期" class="headerlink" title="2.3.1.maven生命周期"></a>2.3.1.maven生命周期</h4><p>生命周期包含了项目的清理、初始化、编译、测试、打包、集成测试、验证、部署和站点生成等几乎所有构建步骤。实际任务交由插件来完成；每个构建步骤都可以绑定一个或者多个插件行为，Maven为大部分构建步骤绑定了默认插件。</p><p>三套生命周期</p><ul><li>clean生命周期：清理项目</li><li>default生命周期：构建项目</li><li>site生命周期：建立项目站点</li></ul><h4 id="2-3-2-插件"><a href="#2-3-2-插件" class="headerlink" title="2.3.2.插件"></a>2.3.2.插件</h4><p>生命周期为构建规定了整体架构，而具体的工作则由插件提供，Maven提供了一套默认的插件来完成通用的清理、初始化、编译、测试、打包、集成测试、验证、部署和站点生成等工作。但Maven并不是以一种封闭式的机制来设计的，它在提供极大便利性的同时，仍然是灵活的、可扩展的，这可以通过用户配置现有插件或者自行编写插件来自定义构建行为。</p><ol><li><p>插件绑定(Maven的生命周期和插件是相互绑定的)</p><ul><li><p>内置绑定</p><img src="/2021/11/16/maven/clean%E5%86%85%E7%BD%AE%E6%8F%92%E4%BB%B6.png" class="" title="clean内置插件"><img src="/2021/11/16/maven/site%E5%86%85%E7%BD%AE%E6%8F%92%E4%BB%B6.png" class="" title="site内置插件"><img src="/2021/11/16/maven/default%E5%86%85%E7%BD%AE%E6%8F%92%E4%BB%B6.png" class="" title="default内置插件"></li><li><p>自定义绑定</p></li></ul></li><li><p>插件配置</p><ul><li><p>命令行配置</p></li><li><p>pom文件配置 </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-antrun-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>run<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tasks</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>echo</span><span class="token punctuation">></span></span>Using env.prod.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>echo</span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>copy</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/resources/env.prod.properties<span class="token punctuation">"</span></span> <span class="token attr-name">tofile</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;project.build.outputDirectory&#125;/env.properties<span class="token punctuation">"</span></span> <span class="token attr-name">overwrite</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tasks</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><p>test类编写 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring3</title>
      <link href="/2021/11/16/spring3/"/>
      <url>/2021/11/16/spring3/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring与数据库"><a href="#Spring与数据库" class="headerlink" title="Spring与数据库"></a>Spring与数据库</h2><h3 id="配置数据库资源"><a href="#配置数据库资源" class="headerlink" title="配置数据库资源"></a>配置数据库资源</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring2</title>
      <link href="/2021/11/16/spring2/"/>
      <url>/2021/11/16/spring2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、AOP"><a href="#一、AOP" class="headerlink" title="一、AOP"></a>一、AOP</h2><p>AOP（Aspect Orient Programming）面向切面编程</p><p>Aspect: 切面,给目标类增加的功能,就是切面。切面的特点： 一般都是独立使用的。</p><p>Orient：面向, 对着。</p><p>Programming：编程</p><h3 id="1-1-术语"><a href="#1-1-术语" class="headerlink" title="1.1.术语"></a>1.1.术语</h3><ul><li>Aspect:切面,表示增强的功能, 完成某个一个功能。非业务功能,常见的切面功能有日志, 事务, 统计信息, 参数检查, 权限验证。</li><li>JoinPoint:连接点 ,连接业务方法和切面的位置。 指某类中的业务方法</li><li>Pointcut : 切入点 ,指多个连接点方法的集合。被切面拦截的方法就是一个切点。</li><li>目标对象： 给哪个类的方法增加功能, 这个类就是目标对象</li><li>Advice:通知,通知表示切面功能执行的时间。</li></ul><h3 id="1-2-要素"><a href="#1-2-要素" class="headerlink" title="1.2.要素"></a>1.2.要素</h3><ul><li>切面的功能代码,切面的功能</li><li>切面的执行位置,使用Pointcut表示切面执行的位置</li><li>切面的执行时间,使用Advice表示时间,在目标方法之前,还是目标方法之后。</li></ul><h3 id="1-3-实现"><a href="#1-3-实现" class="headerlink" title="1.3.实现"></a>1.3.实现</h3><p>aop的技术实现框架：</p><ul><li><p>spring：spring在内部实现了aop规范,能做aop的工作。比较笨重    </p></li><li><p>aspectJ:spring框架中集成了aspectj框架,通过spring就能使用aspectj的功能。</p><ul><li>使用xml的配置文件 ： 配置全局事务</li><li>使用注解,我们在项目中要做aop功能,一般都使用注解, aspectj有5个注解。</li></ul></li></ul><h2 id="二、aspectj框架开发"><a href="#二、aspectj框架开发" class="headerlink" title="二、aspectj框架开发"></a>二、aspectj框架开发</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleAspect</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Before</span> <span class="token punctuation">(</span><span class="token string">"execution (*com.ssm.chapter11.aop.service.impl.RoleServiceImpl.printRole(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print1n</span><span class="token punctuation">(</span><span class="token string">"before ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@After</span> <span class="token punctuation">(</span><span class="token string">"execution (*com.ssm.chapter11.aop.service.impl.RoleServiceImpl.printRole(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"after. ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@AfterReturning</span> <span class="token punctuation">(</span><span class="token string">"execution (*com.ssm.chapterll.aop.service.imp1.RoleServiceImpl.printRole(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span> out<span class="token punctuation">.</span>println <span class="token punctuation">(</span><span class="token string">"afterReturning ...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@AfterThrowing</span> <span class="token punctuation">(</span><span class="token string">"execution (*com.ssm.chapterll.aop.service.impl.RoleServiceImpl.printRole(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span> out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>"afterThrowing <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-通知"><a href="#2-1-通知" class="headerlink" title="2.1.通知"></a>2.1.通知</h3><img src="/2021/11/16/spring2/%E9%80%9A%E7%9F%A5.png" class=""><h3 id="2-2-连接点"><a href="#2-2-连接点" class="headerlink" title="2.2.连接点"></a>2.2.连接点</h3><img src="/2021/11/16/spring2/%E8%BF%9E%E6%8E%A5%E7%82%B9.png" class="">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring1</title>
      <link href="/2021/11/16/spring1/"/>
      <url>/2021/11/16/spring1/</url>
      
        <content type="html"><![CDATA[<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>为其他对象提供一个代理以控制对某个对象的访问。代理类主要负责为委托了（真实对象）预处理消息、过滤消息、传递消息给委托类，代理类不现实具体服务，而是利用委托类来完成服务，并将执行结果封装处理。</p><p>其实就是代理类为被代理类预处理消息、过滤消息并在此之后将消息转发给被代理类，之后还能进行消息的后置处理。代理类和被代理类通常会存在关联关系(即上面提到的持有的被带离对象的引用)，代理类本身不实现服务，而是通过调用被代理类中的方法来提供服务。</p><h2 id="一、静态代理"><a href="#一、静态代理" class="headerlink" title="一、静态代理"></a>一、静态代理</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HelloInterface</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//被代理类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">implements</span> <span class="token class-name">HelloInterface</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello zhanghao!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//代理类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloProxy</span> <span class="token keyword">implements</span> <span class="token class-name">HelloInterface</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">HelloInterface</span> helloInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Before invoke sayHello"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        helloInterface<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After invoke sayHello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态代理很容易就完成了对一个类的代理操作。但是静态代理的缺点也暴露了出来：由于代理只能为一个类服务，如果需要代理的类很多，那么就需要编写大量的代理类，比较繁琐。</p><h2 id="二、动态代理"><a href="#二、动态代理" class="headerlink" title="二、动态代理"></a>二、动态代理</h2><p>jdk代理：InvocationHandler , Method, Proxy</p><p>实现动态代理的步骤：</p><ol><li><p>创建接口,定义目标类要完成的功能</p></li><li><p>创建目标类实现接口</p></li><li><p>创建InvocationHandler接口的实现类,在invoke方法中完成代理类的功能</p><p>调用目标方法</p><p>增强功能</p></li><li><p>使用Proxy类的静态方法,创建代理对象。 并把返回值转为接口类型。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> object<span class="token punctuation">;</span>   <span class="token comment">//目标对象</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyHandler</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Before invoke "</span>  <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//方法执行前功能增强</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//目标方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After invoke "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//方法执行后功能增强</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建被代理类对象</span><span class="token class-name">HelloInterface</span> hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建调用处理器</span><span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyHandler</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建动态代理</span><span class="token class-name">HelloInterface</span> proxyHello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HelloInterface</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hello<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>proxyHello<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring-IOC</title>
      <link href="/2021/11/16/spring/"/>
      <url>/2021/11/16/spring/</url>
      
        <content type="html"><![CDATA[<h2 id="一、spring配置文件"><a href="#一、spring配置文件" class="headerlink" title="一、spring配置文件"></a>一、spring配置文件</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>bean标签 </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>唯一标识<span class="token punctuation">"</span></span> <span class="token attr-name">clas</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>全限定类名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bean标签的scope</p><ul><li>singleton：整个应用中，只生成一个bean实例。</li><li>prototype：当每次获得bean时，Spring都会创建一个实例。</li><li>session：web应用中，在会话过程中，只创建一个实例。</li><li>request：web应用中，一次请求会创建一个实例，不同的请求会创建不同的实例。</li></ul><p>区别：</p></li><li><p>配置文件的多模块开发</p></li></ul><h2 id="二、依赖注入DI和装配Bean"><a href="#二、依赖注入DI和装配Bean" class="headerlink" title="二、依赖注入DI和装配Bean"></a>二、依赖注入DI和装配Bean</h2><h3 id="2-1-依赖注入"><a href="#2-1-依赖注入" class="headerlink" title="2.1.依赖注入"></a>2.1.依赖注入</h3><p>Spring的三种依赖注入注入方式:构造注入; Setter注入; 接口注入。</p><p>构造注入依赖于构造方法实现；setter注入依赖于setter方法。</p><h3 id="2-2-Bean装配"><a href="#2-2-Bean装配" class="headerlink" title="2.2.Bean装配"></a>2.2.Bean装配</h3><h4 id="2-2-1-Xml文件装配"><a href="#2-2-1-Xml文件装配" class="headerlink" title="2.2.1.Xml文件装配"></a>2.2.1.Xml文件装配</h4><ul><li>使用构造注入依赖 (类中必须有有参构造方法)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//构造方法</span><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span> name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//setter</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>1/</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>li<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用setter注入依赖</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Teacher</span> teacher<span class="token punctuation">;</span>    <span class="token comment">//setter</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTeacher</span><span class="token punctuation">(</span><span class="token class-name">Teacher</span> teacher<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>teacher<span class="token operator">=</span>teacher<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--简单类型的注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>li<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引用类型的注入--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--引用类型实例对象的bean对象ID--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--引用类型的自动注入类Student 有属性 private Book book；要自动装配byName 会去容器中查找 id值为book的Book实例对象装配bytype 会去容器中找  类型为 Book的bean装配，如果有多个Book的bean则会报错--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.Student<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.Student<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--集合的注入 List,Map,Set,Array--></span><span class="token comment">&lt;!--List通过&lt;list>和&lt;value>标签--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>数值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Map通过&lt;entry>和&lt;map>标签--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keyone<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>valueone<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--当为引用类型的集合时,采用ref标签......--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-注解装配"><a href="#2-2-2-注解装配" class="headerlink" title="2.2.2.注解装配"></a>2.2.2.注解装配</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"对象名称"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注解普通类 对象名称相当于bean标签中的id<span class="token operator">--</span><span class="token operator">></span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>将由容器提供默认类名<span class="token operator">--</span><span class="token operator">></span><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注解持久层<span class="token punctuation">,</span>DAO类层<span class="token operator">--</span><span class="token operator">></span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注解业务层<span class="token operator">--</span><span class="token operator">></span><span class="token annotation punctuation">@Controller</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>注解控制层<span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>依赖注入：通过构造器来注入；通过setter方法来注入;通过filed变量来注入；</p><ul><li><p>简单类型的注入:@Value  注入int、String等基本数据类型,只能标注在成员变量、setter方法上。</p></li><li><p>引用类型的注入(自动装配)</p><p>@Autowired 按类型自动装配,可标注在成员变量（不推荐）、构造方法、setter方法上。</p><p>@Qualifier 按名称自动装配,需要和@Autowired搭配使用,标注在成员变量（不推荐）、setter方法上。</p><p>@Autowired 还有一个属性 required,默认值为 true,表示当匹配失败后,会终止程序运行。若将其值设置为 false,则匹配失败,将被忽略,未匹配的属性值为 null。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span> <span class="token punctuation">(</span><span class="token string">"myStudent"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"21"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span> <span class="token punctuation">(</span><span class="token string">"mySchool"</span><span class="token punctuation">)</span><span class="token keyword">private</span> school school<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span> <span class="token punctuation">(</span><span class="token string">"mySchool"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">School</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"清华大学"</span><span class="token punctuation">)</span><span class="token keyword">private</span> string name <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>@Resource :按名称或类型自动装配,需要 javax.annotation.jar 的支持,只能标注在成员变量、setter方法上。</p><p>@Resource有type和name属性:@Resource(name=””)和 @Resource(type=””)</p><p>&lt;1. 如果同时指定了name和type,则从Spring上下文中找到唯一匹配的bean进行装配,找不到则抛出异常</p><p>&lt;2. 如果指定了name,则从上下文中查找名称（id）匹配的bean进行装配,找不到则抛出异常</p><p>&lt;3. 如果指定了type,则从上下文中找到类型匹配的唯一bean进行装配,找不到或者找到多个,都会抛出异常</p><p>&lt;4. 如果既没有指定name,又没有指定type,则自动按照byName方式进行装配；如果没有匹配,则回退为一个原始类型进行匹配,如果匹配则自动装配；</p></li><li><p>@Bean</p><p>注解在方法上，并且将返回的对象作为Spring的Bean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>props<span class="token punctuation">.</span>setProperty <span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span> <span class="token string">"com. mysql. jdbc .Driver"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>props<span class="token punctuation">.</span>setProperty <span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">"jdbc:mysql://localhost :3306/chapter12"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>props<span class="token punctuation">.</span>setProperty <span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>props <span class="token punctuation">.</span>setProperty <span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>dataSource <span class="token operator">=</span> <span class="token class-name">BasicDataSourceFactory</span><span class="token punctuation">.</span>createDataSource <span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">return</span> dataSource<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java,spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb</title>
      <link href="/2021/11/10/javaweb/"/>
      <url>/2021/11/10/javaweb/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Servlet"><a href="#一、Servlet" class="headerlink" title="一、Servlet"></a>一、Servlet</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1.概述"></a>1.1.概述</h3><ul><li><p>Servlet中有5个方法</p><p>public void init(ServletConfig config)  初始化时执行 </p><p>public ServletConfig getServletConfig();  获取Servlet的配置类</p><p>public void service(ServletRequest req, ServletResponse res)；访问Servlet时执行</p><p>public String getServletInfo();  获取Servlet的相关信息</p><p>public void destroy(); 在servlet销毁时执行</p></li><li><p>servlet的生命周期(三个阶段)</p><p>初始化阶段、响应阶段、终止阶段</p><img src="/2021/11/10/javaweb/servlet%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" class=""></li><li><p>HttpServlet </p><p>HttpServlet继承GenericServlet实现 Servlet</p><p>GenericServlet类重写了Servlet接口中无用的方法，HttpServlet重写了service方法</p></li></ul><h3 id="1-2-Servlet接口实现类开发步骤"><a href="#1-2-Servlet接口实现类开发步骤" class="headerlink" title="1.2.Servlet接口实现类开发步骤"></a>1.2.Servlet接口实现类开发步骤</h3><ul><li>第一步：创建一个Java类继承与HttpServlet</li><li>第二步：重写HttpServlet父类两个方法。doGet或则doPost</li><li>第三步：将Servlet接口实现类注册到web.xml中        </li></ul><h3 id="1-3-HttpServletResponse接口"><a href="#1-3-HttpServletResponse接口" class="headerlink" title="1.3.HttpServletResponse接口"></a>1.3.HttpServletResponse接口</h3><ul><li>告诉浏览器数据类型 setContentType（）</li><li>设置respon的编码格式 setCharacterEnconding（）</li><li>返回服务器的预设错误网址并显示错误信息 sendError（）</li><li>重定向页面 sendRedirect（）</li><li>获取通向浏览器的字节流 getOutputStream（）</li><li>获取通向浏览器的字符流 getWriter（）</li><li>回传路径 encodeRedirectURL（）</li><li>setHeader()设置消息头</li><li>setStatus()设置状态</li><li>addCookie()添加Cookie4.HttpServletRequest接口</li></ul><h3 id="1-4-HttpServletRequest接口"><a href="#1-4-HttpServletRequest接口" class="headerlink" title="1.4.HttpServletRequest接口"></a>1.4.HttpServletRequest接口</h3><ul><li>获取请求的方式 getMethod（）</li><li>目录的路径 getContextPath（）</li><li>获取servlet路径 getServletString（）</li><li>获得get请求参数 getQueryString（）</li><li>获取请求的url getRequestURL（）  getRequestURI（）</li><li>获得协议版本 getProtocol（）</li><li>获取客户的ip getRemoteAddr（）</li><li>获取请求参数的通用方式<ul><li>getParameter（String name）</li><li>根据参数的名称获得参数的数组 getParameterValues（String name）</li><li>获取所有请求参数的名称 getParameterNames（）</li><li>获得所有参数的集合 getParameterMap（）</li><li>获取session 对象 getSession（）     </li></ul></li></ul><h3 id="1-5-Http状态码"><a href="#1-5-Http状态码" class="headerlink" title="1.5.Http状态码"></a>1.5.Http状态码</h3><ul><li>1XX : 信息状态码，正在处理中<ul><li>100，返回的资源不是独立的资源,需在接收响应包后，向服务器要依赖的其他资源文件</li></ul></li><li>2XX： 成功状态码<ul><li>200，服务器处理请求成功并返回资源，成功结束请求。</li><li>204，服务器处理请求成功，但无资源返回。</li><li>206，请求对资源规定范围，成功处理，并返回部分资源。</li></ul></li><li>3xx:  重定向码<ul><li>302，通知浏览器本次返回的不是一个资源文件内容而是一个资源文件地址，需要浏览器根据这个地址自动发起请求来索要这个资源文件response.sendRedirect(“资源文件地址”)写入到响应头中Location而这个行为导致Tomcat将302状态码写入到状态行</li></ul></li><li>4XX: 客户端错误码<ul><li> 400: 报文错误，请求语法出现错误。</li><li> 403: 对于请求资源，服务器拒绝访问</li><li>404: 通知浏览器，由于在服务端没有定位到被访问的资源文件因此无法提供帮助</li><li>405：服务端已经定位到被访问的资源文件但对于浏览器采用的请求方式不能处理</li><li>415：资源媒体格式错误，与content-type 相关</li></ul></li><li>5xx: 服务器错误码<ul><li>500:通知浏览器，在服务端已经定位到被访问的资源文件且可以接收浏览器采用请求方式，在处理期间，Java异常导致处理失败</li></ul></li></ul><h3 id="1-6-Servlet之间调用规则"><a href="#1-6-Servlet之间调用规则" class="headerlink" title="1.6.Servlet之间调用规则"></a>1.6.Servlet之间调用规则</h3><h4 id="1-6-1-重定向解决方案"><a href="#1-6-1-重定向解决方案" class="headerlink" title="1.6.1.重定向解决方案"></a>1.6.1.重定向解决方案</h4><img src="/2021/11/10/javaweb/%E9%87%8D%E5%AE%9A%E5%90%91.png" class=""><p> 实现:<em><strong>*response.sendRedirect(“请求地址”)将地址写入到响应包中响应头中location属性*</strong></em></p><p>  特征:   </p><p><em><strong>*&lt;1*</strong></em>****请求地址****：</p><p>既可以把当前网站内部的资源文件地址发送给浏览器 （****/网站名/资源文件名****）</p><p>也可把其他网站资源地址发送给浏览器(<em><strong>*<a href="http://ip地址:端口号/网站名/资源文件名\">http://ip地址:端口号/网站名/资源文件名\</a>*</strong></em>)</p><p>&lt;2请求次数: 浏览器至少发送两次请求</p><p>  &lt;3)请求方式：</p><p>重定向中，通过地址栏通知浏览器发起下一次请求，因此通过重定向解决方案调用的资源文件接收的请求方式一定是GET</p><h4 id="1-6-2-请求转发解决方案"><a href="#1-6-2-请求转发解决方案" class="headerlink" title="1.6.2.请求转发解决方案"></a>1.6.2.请求转发解决方案</h4><img src="/2021/11/10/javaweb/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91.png" class=""><p>实现命令： 请求对象代替浏览器向Tomcat发送请求</p><p>1.通过当前请求对象生成资源文件申请报告对象</p><p><em><strong>*RequestDispatcher  report = request.getRequestDispatcher(“/资源文件名”);以”/“为开头*</strong></em></p><p>2.将报告对象发送给Tomcat</p><p><em><strong>*report.forward(当前请求对象，当前响应对象)*</strong></em></p><p>特征:</p><p>1)请求次数:在请求转发过程中，浏览器只发送一次请求</p><p> 2）请求地址</p><p>只能向Tomcat服务器申请调用当前网站下资源文件地址</p><p>3）请求方式</p><p><em><strong>*浏览器只发送一个了个Http请求协议包*<em><strong>。参与本次请求的</strong></em>*所有Servlet共享同一个请求*</strong></em></p><p>****协议包****，因此请求方式与浏览器发送的请求方式保持一致</p><h3 id="1-7-多个Servlet之间数据共享实现方案"><a href="#1-7-多个Servlet之间数据共享实现方案" class="headerlink" title="1.7.多个Servlet之间数据共享实现方案"></a>1.7.多个Servlet之间数据共享实现方案</h3><h4 id="1-7-1-ServletContext接口-全局作用域对象"><a href="#1-7-1-ServletContext接口-全局作用域对象" class="headerlink" title="1.7.1.ServletContext接口 全局作用域对象"></a>1.7.1.ServletContext接口 全局作用域对象</h4><p>工作原理：</p><p>当前网站中的所有Servlet都可以将数据放到作用域中，<em><strong>*也*</strong></em><em><strong>*都可以从全局作用域对象得到这个数据进行使用*</strong></em></p><p>  全局作用域对象生命周期：</p><p>&lt;1&gt;在Http服务器启动过程中，自动为当前网站在内存中创建一个全局作用域对象</p><p>  &lt;2&gt;在Http服务器运行期间时，<em><strong>*一个网站只有一个全局作用域对象*</strong></em></p><p>&lt;3&gt;在Http服务器运行期间，全局作用域对象一直处于存活状态</p><p>&lt;4&gt;在Http服务器准备关闭时，负责将当前网站中全局作用域对象销毁处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.获得作用域</span><span class="token class-name">ServletContext</span> application  <span class="token operator">=</span>  request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.添加数据  </span>application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span>数据<span class="token punctuation">)</span> <span class="token comment">//3.从全局作用域对象得到指定关键字对应数据</span><span class="token class-name">Object</span> 数据 <span class="token operator">=</span>  application<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-7-2-Cookie类"><a href="#1-7-2-Cookie类" class="headerlink" title="1.7.2.Cookie类"></a>1.7.2.Cookie类</h4><img src="/2021/11/10/javaweb/cookie.png" class=""><p>使用范围 :如果两个<em><strong>*Servlet来自于同一个网站，并且为同一个浏览器/用户提供服务*</strong></em></p><p>用户通过浏览器向网站发送请求申请期间创建一个Cookie存储与当前用户相关数据，工作完毕后，****将Cookie写入到响应头*<em><strong>交还给当前浏览器。浏览器收到响应响应包之后，将</strong></em>*cookie存储在浏览器的缓存*<em><strong>一段时间之后，用户通过</strong></em>*同一个浏览器*<em><strong>再次发送请求时。</strong></em>*浏览器需要无条件的将之前推送过来的Cookie，写入到请求头****发送过去</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建一个cookie对象，保存共享数据（当前用户数据）</span><span class="token class-name">Cookie</span> card <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Cookie</span> card1<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"key2"</span><span class="token punctuation">,</span><span class="token string">"efg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.cookie写入到响应头，交给浏览器</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span>resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>card1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3.调用请求对象从请求头得到浏览器返回的Cookie</span><span class="token class-name">Cookie</span>  cookieArray<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4.循环遍历数据得到每一个cookie的key 与 value</span><span class="token class-name">String</span> key <span class="token operator">=</span>   card<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 读取key <span class="token string">"key1"</span><span class="token class-name">String</span> value <span class="token operator">=</span> card<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>读取value <span class="token string">"abc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Cookie销毁时机</p><p>1.默认，Cookie对象存放在浏览器的缓存中。只要浏览器关闭，Cookie对象就被销毁掉</p><p>2.在手动设置情况下，可以要求浏览器将接收的Cookie存放在客户端计算机上硬盘上，同时需要指定Cookie在硬盘上存活时间。在存活时间范围内，关闭浏览器 关闭客户端计算机，关闭服务器，都不会导致Cookie被销毁。在存活时间到达时，Cookie自动从硬盘上被删除</p><p> cookie.setMaxAge(60); //cookie在硬盘上存活1分钟</p><h4 id="1-7-3-HttpSession接口-会话作用域对象"><a href="#1-7-3-HttpSession接口-会话作用域对象" class="headerlink" title="1.7.3.HttpSession接口 会话作用域对象"></a>1.7.3.HttpSession接口 会话作用域对象</h4><p>使用范围：两个Servlet来自于同一个网站，并且为同一个浏览器/用户提供服务</p><ul><li><p>HttpSession 与 Cookie 区别：</p><p>1）存储位置: </p><p>Cookie：存放在客户端计算机（浏览器内存/硬盘）HttpSession：存放在服务端计算机内存</p><p>2）数据类型：</p><p>Cookie对象存储共享数据类型只能是String；HttpSession对象可以存储任意类型的Object</p><p>\3) 数据数量:</p><p>一个Cookie对象只能存储一个共享数据</p><p>HttpSession使用map集合存储共享数据，所以可以存储任意数量共享数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.调用请求对象向Tomcat索要当前用户在服务端的HttpSession</span><span class="token class-name">HttpSession</span>  session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.将数据添加</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span>共享数据<span class="token punctuation">)</span><span class="token comment">//3.调用请求对象向Tomcat索要当前用户在服务端的HttpSession</span><span class="token class-name">HttpSession</span>  session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.从会话作用域对象得到OneServlet提供的共享数据</span><span class="token class-name">Object</span> 共享数据 <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>原理：</p><p>Tomcat在创建一个HttpSession对象时自动为这个HttpSession对象生成一个编号（箱号）。Tomcat将箱号保存到cookie对象中，    推送到当前浏览器缓存。格式为cookie：JSESSIONID=箱号。等到用户第二次访问，Tomcat根据请求头JSESSIONID确认用户是否有HttpSession以及哪一个HttpSession是当前用户。两个Servlet来自于同一个网站并且为同一个浏览器/用户提供服务。且不能禁用cookie，因为session是借助于cookie实现数据共享的。</p></li><li><p>getSession() 与 getSession(false)</p><p>1）getSession():如果当前用户在服务端尚未拥有HttpSession则创建一个HttpSession</p><p> 2)getSession(false):如果当前用    户在服务端尚未拥有HttpSession此时Tomcat将返回null</p></li><li><p>HttpSession销毁时机:</p><p>&lt;1用户与HttpSession关联时使用的Cookie只能存放在浏览器缓存中.在浏览器关闭时，意味着用户与他的HttpSession关系被切断由</p><p>&lt;2Tomcat为每一个HttpSession对象设置空闲时间这个空闲时间默认30分钟，如果当前HttpSession对象空闲时间达到30分钟,此时Tomcat就会销毁掉这个HttpSession</p><p>&lt;3.HttpSession空闲时间手动设置</p><p>Web.xml              </p><session-config><p><session-timeout>5</session-timeout> </p></session-config></li></ul><h4 id="1-7-4-HttpServletRequest接口-请求作用域对象"><a href="#1-7-4-HttpServletRequest接口-请求作用域对象" class="headerlink" title="1.7.4.HttpServletRequest接口 请求作用域对象"></a>1.7.4.HttpServletRequest接口 请求作用域对象</h4><p> &lt;1.介绍：</p><p> 使用范围：在同一个网站中，如果两个Servlet之间通过请求转发方式进行调用，彼此         </p><p>之间共享同一个请求协议包。而一个请求协议包只对应一个请求对象因此servlet之间</p><p>共享同一个请求对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span>将数据添加到请求作用域对象中attribute属性req<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span>数据<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//数据类型可以任意类型Object</span>      <span class="token number">2.</span>请求转发             req<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/two"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token number">3.</span>从当前请求对象得到<span class="token class-name">OneServlet</span>写入到共享数据<span class="token class-name">Object</span> 数据 <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​                             </p><h2 id="二、Filter"><a href="#二、Filter" class="headerlink" title="二、Filter"></a>二、Filter</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1.介绍"></a>2.1.介绍</h3><p>Filter接口在Http服务器调用资源文件前，对Http服务器进行拦截</p><h3 id="2-2-Filter接口实现类开发步骤："><a href="#2-2-Filter接口实现类开发步骤：" class="headerlink" title="2.2.Filter接口实现类开发步骤："></a>2.2.Filter接口实现类开发步骤：</h3><ol><li><p>创建一个Java类实现Filter接口</p></li><li><p>重写Filter接口中doFilter方法</p></li><li><p>web.xml将过滤器接口实现类注册到Http服务器</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>myfilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>MyFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>myfilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/lx.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-3-Filter的方法"><a href="#2-3-Filter的方法" class="headerlink" title="2.3.Filter的方法"></a>2.3.Filter的方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token comment">//初始化方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> doFilter <span class="token punctuation">(</span> <span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain <span class="token punctuation">)</span>；<span class="token comment">//过滤方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 销毁时调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-4-Filter拦截地址格式"><a href="#2-4-Filter拦截地址格式" class="headerlink" title="2.4.Filter拦截地址格式"></a>2.4.Filter拦截地址格式</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--以指定资源匹配。例如"/index.jsp"以目录匹配。例如"/servlet/*"以后缀名匹配，例如"*.jsp"通配符，拦截所有web资源。"/*"--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>oneFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>拦截地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Listener"><a href="#三、Listener" class="headerlink" title="三、Listener"></a>三、Listener</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1.介绍"></a>3.1.介绍</h3><p>监听器接口需要由开发人员亲自实现，程序员在实现之后，要在web.xml中声明</p><p>监听web对象创建与销毁.</p><p>监听web对象的属性变化</p><p>监听session绑定javaBean操作.</p><h3 id="3-2-监听器"><a href="#3-2-监听器" class="headerlink" title="3.2.监听器"></a>3.2.监听器</h3><ul><li><p>ServletContext：全局作用域</p><ul><li><p>对象创建和销毁 ServletContextListener</p></li><li><p>属性变化  ServletContextAttributeListener</p></li></ul></li><li><p>HttpSession : 会话作用域对象</p><ul><li>创建和销毁 HTTPSessionListener</li><li>属性变化  HttpSessionAttributeListener</li></ul></li><li><p>HttpServletRequest:请求作用域对象</p><ul><li>创建和销毁 ServletRequestListener</li><li>属性变化  ServletRequestAttributeListener</li></ul></li><li><p>监听session绑定javaBean(向session中set对象的时候触发</p><ul><li>HttpSessionBindingListener        </li><li>HttpSessionActivationListener</li></ul></li></ul><h3 id="3-3-监听器接口实现类开发规范："><a href="#3-3-监听器接口实现类开发规范：" class="headerlink" title="3.3.监听器接口实现类开发规范："></a>3.3.监听器接口实现类开发规范：</h3><ul><li>根据监听的实际情况，选择对应监听器接口进行实现</li><li>重写监听器接口声明【监听事件处理方法】</li><li>在web.xml文件将监听器接口实现类注册到Http服务器</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>Listen接口实现类的精准地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-4-ServletContextListener接口："><a href="#3-4-ServletContextListener接口：" class="headerlink" title="3.4.ServletContextListener接口："></a>3.4.ServletContextListener接口：</h3><ul><li>public void contextInitlized() :在全局作用域对象被Http服务器初始化被调用</li><li>public void contextDestory() : 在全局作用域对象被Http服务器销毁时候触发调用</li></ul><h3 id="3-5-ServletContextAttributeListener接口"><a href="#3-5-ServletContextAttributeListener接口" class="headerlink" title="3.5.ServletContextAttributeListener接口:"></a>3.5.ServletContextAttributeListener接口:</h3><ul><li>public void contextAdd():在全局作用域对象添加共享数据</li><li>public void contextReplaced():在全局作用域对象更新共享数据</li><li>public void contextRemove():在全局作用域对象删除共享数据</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm</title>
      <link href="/2021/10/11/jvm/"/>
      <url>/2021/10/11/jvm/</url>
      
        <content type="html"><![CDATA[<h2 id="一、java内存区域和内存溢出异常"><a href="#一、java内存区域和内存溢出异常" class="headerlink" title="一、java内存区域和内存溢出异常"></a>一、java内存区域和内存溢出异常</h2><h3 id="1-1-运行时数据区域"><a href="#1-1-运行时数据区域" class="headerlink" title="1.1.运行时数据区域"></a>1.1.运行时数据区域</h3><img src="/2021/10/11/jvm/jvm.png" class=""><h4 id="1-1-1-程序计数器"><a href="#1-1-1-程序计数器" class="headerlink" title="1.1.1.程序计数器"></a>1.1.1.程序计数器</h4><p>程序计数器(Program Counter Register)是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里(仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现)，字节码解释器工作时就是通过改变这个计数器的值来选取下一<br>条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p><p>每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储。</p><h4 id="1-1-2-虚拟机栈"><a href="#1-1-2-虚拟机栈" class="headerlink" title="1.1.2.虚拟机栈"></a>1.1.2.虚拟机栈</h4><p>线程私有，生命周期与线程相同。作用：存储局部变量表、操作数栈、动态连接、方法出口等信息。</p><p>局部变量表存放了基本数据类型，包括八个基础类型、对象引用和returnAddress(指向一条字节码指令的地址)</p><p>栈的两个异常：</p><ul><li>StackOverflowError：线程请求的栈深度大于虚拟机的深度</li><li>OutOfMemoryError：虚拟机栈容量可以动态扩展，当栈扩展无法申请到足够内存。</li></ul><h4 id="1-1-3-本地方法栈"><a href="#1-1-3-本地方法栈" class="headerlink" title="1.1.3.本地方法栈"></a>1.1.3.本地方法栈</h4><p>为虚拟机使用到的本地方法服务。</p><h4 id="1-1-4-堆"><a href="#1-1-4-堆" class="headerlink" title="1.1.4.堆"></a>1.1.4.堆</h4><p> 被所有线程共享的一块内存区域，虚拟机启动时创建。作用：存放对象实例。所有的对象和数组都应在堆上分配。</p><p>java堆是垃圾收集器管理的内存区域。</p><h4 id="1-1-5-方法区"><a href="#1-1-5-方法区" class="headerlink" title="1.1.5.方法区"></a>1.1.5.方法区</h4><p>​        保存在着被加载过的每一个类的信息；这些信息由类加载器在加载类的时候，从类的源文件中抽取出来；static变量信息也保存在方法区中；可以看做是将类（Class）的元数据，保存在方法区里；</p><p>​        方法区是线程共享的；当有多个线程都用到一个类的时候，而这个类还未被加载，则应该只有一个线程去加载类，让其他线程等待；</p><p>​        方法区的大小不必是固定的，jvm可以根据应用的需要动态调整。也可以允许用户和程序指定方法区的初始大小，最小和最大限制；</p><p>​        方法区同样存在垃圾收集，因为通过用户定义的类加载器可以动态扩展Java程序，这样可能会导致一些类，不再被使用，变为垃圾。这时候需要进行垃圾清理。</p><img src="/2021/10/11/jvm/%E6%96%B9%E6%B3%95%E5%8C%BA.png" class=""><ul><li><p>类型信息</p><ul><li>类的完整名称（比如，java.long.String）</li><li>类的直接父类的完整名称</li><li>类的直接实现接口的有序列表</li><li>类的修饰符</li></ul></li><li><p>类型的常量池 （运行时常量池）</p><ul><li>每一个Class文件中，都维护着一个常量池（保存在类文件里面，与方法区的运行时常量池不同），里面存放着编译时期生成的各种字面值和符号引用；这个常量池的内容，在类加载的时候，被复制到方法区的运行时常量池 ；</li></ul></li></ul><ul><li>字面值：就是像string, 基本数据类型，以及它们的包装类的值，以及final修饰的变量。</li></ul><ul><li><p>符号引用</p></li><li><p>字段信息</p><ul><li>声明的顺序</li><li>修饰符</li><li>类型</li><li>名字</li></ul></li><li><p>方法信息</p><ul><li>声明的顺序</li><li>修饰符</li><li>返回值类型</li><li>名字</li><li>参数列表（有序保存）</li><li>异常表（方法抛出的异常）</li><li>方法字节码（native、abstract方法除外，）</li><li>操作数栈和局部变量表大小</li></ul></li><li><p>类变量(即static变量）</p><ul><li><p>非final类变量</p><p>在java虚拟机使用一个类之前，它必须在方法区中为每个非final类变量分配空间。非final类变量存储在定义它的类中；</p></li><li><p>final类变量（不存储在这里）</p><p>由于final的不可改变性，因此，final类变量的值在编译期间，就被确定了，因此被保存在类的常量池里面，然后在加载类的时候，复制进方法区的运行时常量池里面 ；final类变量存储在运行时常量池里面，每一个使用它的类保存着一个对其的引用；</p></li></ul></li><li><p>方法表</p><p>jvm对每个加载的非虚拟类的类型信息中都添加了一个方法表，方法表是一组对类实例方法的直接引用(包括从父类继承的方法。jvm可以通过方法表快速激活实例方法。</p></li><li><p>实例解析</p></li></ul><h2 id="二、java对象"><a href="#二、java对象" class="headerlink" title="二、java对象"></a>二、java对象</h2><h3 id="2-1-对象创建"><a href="#2-1-对象创建" class="headerlink" title="2.1.对象创建"></a>2.1.对象创建</h3><h3 id="2-2-对象的内存布局"><a href="#2-2-对象的内存布局" class="headerlink" title="2.2.对象的内存布局"></a>2.2.对象的内存布局</h3><p>对象布局：对象头、实例数据、对齐填充</p><h4 id="2-2-1-对象头"><a href="#2-2-1-对象头" class="headerlink" title="2.2.1.对象头"></a>2.2.1.对象头</h4><ul><li><p>第一部分：MarkWord，存储对象自身的运行数据</p><img src="/2021/10/11/jvm/%E5%AF%B9%E8%B1%A1%E5%A4%B4.png" class=""></li><li><p>第二部分：类型指针，对象指向它的类型元数据的指针，虚拟机通过这个指针确定是哪个类的实例。</p></li></ul><h4 id="2-2-2-实例数据"><a href="#2-2-2-实例数据" class="headerlink" title="2.2.2.实例数据"></a>2.2.2.实例数据</h4><p>实例数据部分是对象真正存储的有效信息，即在代码中定义的各种类型的字段内容，无论是父类还是子类中的字段。</p><p>实例数据的存储顺序</p><h4 id="2-2-3-对齐填充"><a href="#2-2-3-对齐填充" class="headerlink" title="2.2.3.对齐填充"></a>2.2.3.对齐填充</h4><p>起到占位符的作用，虚拟机要求对象起始地址必须是8字节的整数倍，即任何对象的大小都必须是8字节的整数倍。若对象数据部分没有对齐的话，则需要对齐填充来补齐。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql3</title>
      <link href="/2021/10/07/mysql3/"/>
      <url>/2021/10/07/mysql3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis2</title>
      <link href="/2021/10/02/redis2/"/>
      <url>/2021/10/02/redis2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis(二)-</title>
      <link href="/2021/10/02/redis1/"/>
      <url>/2021/10/02/redis1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库"><a href="#一、数据库" class="headerlink" title="一、数据库"></a>一、数据库</h2><h3 id="1-1-redis服务器"><a href="#1-1-redis服务器" class="headerlink" title="1.1.redis服务器"></a>1.1.redis服务器</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">redisServer</span><span class="token punctuation">&#123;</span>    <span class="token comment">//一个数组，保存着服务器中的所有数据库</span>    redisDb <span class="token operator">*</span>db<span class="token punctuation">;</span>    <span class="token comment">//数据库数量，该值默认是16</span>    <span class="token keyword">int</span> dbnum<span class="token punctuation">;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-redis数据库"><a href="#1-2-redis数据库" class="headerlink" title="1.2.redis数据库"></a>1.2.redis数据库</h3><h4 id="1-2-1-数据库结构"><a href="#1-2-1-数据库结构" class="headerlink" title="1.2.1.数据库结构"></a>1.2.1.数据库结构</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisDb</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//</span>    <span class="token comment">//数据库键空间，保存着数据库中的所有键值对</span>    dict <span class="token operator">*</span>dict<span class="token punctuation">;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span> redisDb<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>键空间的键也就是数据库的键，每个键都是一个字符 串对象</li><li>键空间的值也就是数据库的值，每个值可以是字符串对象、列表对象、哈希表对象、</li></ul><h4 id="1-2-2-数据库命令操作"><a href="#1-2-2-数据库命令操作" class="headerlink" title="1.2.2.数据库命令操作"></a>1.2.2.数据库命令操作</h4><p>redis数据库的键空间就是一个字典，所有操作都是对键空间字典做的。</p><h2 id="二、持久化"><a href="#二、持久化" class="headerlink" title="二、持久化"></a>二、持久化</h2><h3 id="2-1-RDB持久化"><a href="#2-1-RDB持久化" class="headerlink" title="2.1.RDB持久化"></a>2.1.RDB持久化</h3><h4 id="2-1-1"><a href="#2-1-1" class="headerlink" title="2.1.1"></a>2.1.1</h4><h3 id="2-2-AOF持久化"><a href="#2-2-AOF持久化" class="headerlink" title="2.2.AOF持久化"></a>2.2.AOF持久化</h3>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建自己的GitHub个人博客</title>
      <link href="/2021/09/27/github-blog/"/>
      <url>/2021/09/27/github-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="一、github准备工作"><a href="#一、github准备工作" class="headerlink" title="一、github准备工作"></a>一、github准备工作</h1><h2 id="1-github账号注册"><a href="#1-github账号注册" class="headerlink" title="1.github账号注册"></a>1.github账号注册</h2><h2 id="2-新建博客仓库"><a href="#2-新建博客仓库" class="headerlink" title="2.新建博客仓库"></a>2.新建博客仓库</h2><h1 id="二、hexo环境搭建"><a href="#二、hexo环境搭建" class="headerlink" title="二、hexo环境搭建"></a>二、hexo环境搭建</h1><h2 id="1-Node-js环境搭建"><a href="#1-Node-js环境搭建" class="headerlink" title="1.Node.js环境搭建"></a>1.Node.js环境搭建</h2><h2 id="2-hexo本地安装"><a href="#2-hexo本地安装" class="headerlink" title="2.hexo本地安装"></a>2.hexo本地安装</h2><h1 id="三、博客美化"><a href="#三、博客美化" class="headerlink" title="三、博客美化"></a>三、博客美化</h1><h2 id="1-更换主题"><a href="#1-更换主题" class="headerlink" title="1.更换主题"></a>1.更换主题</h2>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello hexo</title>
      <link href="/2021/09/26/hello-world/"/>
      <url>/2021/09/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(三)</title>
      <link href="/2021/07/10/mysql2/"/>
      <url>/2021/07/10/mysql2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库事务"><a href="#一、数据库事务" class="headerlink" title="一、数据库事务"></a>一、数据库事务</h2><ol><li>事务特性ACID<ul><li>原子性：事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做</li><li>一致性：事 务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。</li><li>隔离性：一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</li><li>持久性：也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。</li></ul></li><li>事务的隔离级别<ul><li>读未提交：在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。 脏读，不可重复读，幻读</li><li>读已提交：一个事务只能看见已经提交事务所做的改变 。不可重复读，幻读</li><li>可重复读：MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。幻读</li><li>串行化：最高的隔离级别，它通过强制事务排序，使之不可能相互冲突</li></ul></li><li>事务可能出现的问题<ul><li>脏读：一个事务读取到另一个事务还未提交的数据。</li><li>不可重复读：在一个事务中多次读取同一个数据时，结果出现不一致。</li><li>幻读：在一个事务中使用相同的 SQL 两次读取，第二次读取到了其他事务新插入的行。</li><li>更新丢失：多个事务对同一行数据更新时，后面的事务的更新结果会覆盖前面的事务。</li></ul></li><li>事务控制 </li></ol><h2 id="二、SQL锁"><a href="#二、SQL锁" class="headerlink" title="二、SQL锁"></a>二、SQL锁</h2><ol><li><p>锁的分类</p><ul><li>表锁：开销小，加锁快，不出现锁，并发度最低。</li><li>行锁：开销大，加锁慢，出现死锁，并发度最高。</li><li>页锁：在表锁和行锁之间，会死锁，并发度一般。</li></ul></li><li><p>MyISAM表锁</p><ul><li><p>表锁分为：表共享读锁和表独占写锁。</p></li><li><p>表锁的读和写请求时串行执行的。</p></li><li><p>当用户获得读锁，其他用户可以读，但不可以写，当用户获得写锁，其他用户读和写都不可以。</p></li><li><p>当select时，表会自动加读锁，当update,delete,insert时，会自动加写锁。</p></li><li><p>MyISAM支持查询和插入并发</p><p>concurrent_insert为0时，不允许插入并发</p><p>concurrent_insert为1时，当表中没有空洞(没有行被删除)时，可以并发插入</p><p>concurrent_insert为2时，支持并发插入</p></li><li><p>锁的调度</p><p>当两个线程同时读请求和写请求时，Mysql优先让写请求获得锁。</p><p>set  low_priority_insert\update\delete =1   通过此命令来改变优先级</p></li></ul></li><li><p>InnoDB行锁</p><ul><li>行锁分为：共享锁和排他锁</li><li>InnoDB行锁和表锁共存，内部使用两种意向锁，都是表锁。<ul><li>意向共享锁：事务在给一个行加共享锁之前，必须获得意向共享锁。</li><li>意向排他锁：事务在给一个行加排他锁之前，必须后的意向排他锁。</li></ul></li><li>锁的兼容<ul><li>当前锁是排他锁，则其他请求不能获得任何锁。</li><li>当前锁是共享锁，则其他请求可以获得共享锁和意向共享锁</li><li>当前锁是意向排他锁， 其他请求可以获得两个意向锁</li><li>当前锁是意向共享锁，其他请求不能获得排他锁。</li></ul></li><li>意向锁InnoDB自动添加，Update、Insert、Delete会自动为相关数据集加排他锁。select不会加锁。</li><li>InnoDB的行锁实现<ol><li>InnoDB的行锁分为：<ul><li>Record lock：对索引项加锁</li><li>Gap lock: 对索引项的之间的间隙加锁</li><li>Next-key lock:前两种的结合。</li></ul></li><li>InnoDB通过对索引加锁，所以如果InnoDB不通过索引检索数据，则将对表中所以数据加锁，相当于表锁。</li><li>InnoDB是对索引加的锁，如果用到相同的索引键，是会出现锁冲突的。</li><li>sql的执行是由内部优化器选择对应的执行计划的，所以锁冲突时，可能是因为优化器没有选用索引。</li><li>Next-key锁<ul><li>当我们使用范围条件查询的时候，对符合的索引项加锁，对符合但不存在的数据”间隙”加Gap锁。</li><li>当我们使用相等条件查询一个不存的值时，也会使用Next-key锁。</li></ul></li></ol></li></ul></li><li><p>死锁情况</p><ul><li>MyISAM表锁 采取串行，不会出现死锁现象</li><li>InnoDB的死锁情况<ol><li>当事务在并发时，事务互相拥有对方的锁，造成死锁。</li><li>优化死锁的方法；<ul><li>约定不同事务以相同的顺序访问表</li><li>对表内数据进行排序，以顺序访问数据</li></ul></li></ol></li></ul></li></ol><h2 id="三、WAL"><a href="#三、WAL" class="headerlink" title="三、WAL"></a>三、WAL</h2><ol><li><p>WAL(Write-ahead logging，预写式日志)是数据库系统提供原子性和持久化的一系列技术。指的是 MySQL 的写操作并不是立刻更新到磁盘上，而是先记录在日志上，然后在合适的时间再更新到磁盘上。日志主要分为 undo log、redo log、binlog。</p></li><li><p>redo log 和 undo log</p><ul><li>redo log称为重做日志，每当有操作时，在数据变更之前将操作写入redo log，系统可以在重启后继续操作。</li><li>undo log称为撤销日志，当一些变更执行到一半无法完成时，可以根据撤销日志恢复到变更之间的状态。</li></ul></li></ol><h2 id="四、MVCC"><a href="#四、MVCC" class="headerlink" title="四、MVCC"></a>四、MVCC</h2><ol><li><p>当前读和快照读</p><ul><li>当前读：加共享锁和排他锁操作都是一种当前读，就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。</li><li>快照读：不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；快照读的实现是基于多版本并发控制，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</li></ul></li><li><p>MVCC的实现基于记录中的 隐式字段，undo日志 ，Read View </p><p>隐式字段和undolog构成了数据版本链，查询时生成ReadView记录了活跃的事务，通过比较版本链的事务id和ReadView的活跃事务来确定访问数据的版本。</p><ul><li><p>隐式字段</p><ul><li>一个保存了行的事务ID（DB_TRX_ID），记录创建这条记录/最后一次修改该记录的事务ID。事务开启即更新。</li><li>一个保存了行的回滚指针（DB_ROLL_PT）。指向这条记录的上一个版本（存储于rollback segment里）</li><li>每开始一个新的事务，都会自动递增产生一个新的事务id。事务开始时刻的会把事务id放到当前事务影响的行事务id中，当查询时需要用当前事务id和每行记录的事务id进行比较。</li></ul></li><li><p>undolog</p><ul><li>保存了事务发生之前的数据的一个版本，可以用于回滚，同时可以提供多版本并发控制下的读（MVCC），也即非锁定读</li><li>根据行为的不同，undo log分为两种： insert undo log 和 update undo log<ul><li>insert 操作中产生的undo log，因为insert操作记录只对当前事务本身，对于其他事务此记录不可见，所以 insert undo log 可以在事务提交后直接删除而不需要进行purge操作。</li><li>update 或 delete 操作中产生的 undo log。 因为会对已经存在的记录产生影响，为了提供 MVCC机制，因此update undo log 不能在事务提交时就进行删除，而是将事务提交时放到入 history list 上，等待 purge 线程进行最后的删除操作。</li><li>为了实现InnoDB的MVCC机制，更新或者删除操作都只是设置一下老记录的deleted_bit，并不真正将过时的记录删除。为了节省磁盘空间，InnoDB有专门的purge线程来清理deleted_bit为true的记录。为了不影响MVCC的正常工作，purge线程自己也维护了一个read view（这个read view相当于系统中最老活跃事务的read view）;如果某个记录的deleted_bit为true，并且DB_TRX_ID相对于purge线程的read view可见，那么这条记录一定是可以被安全清除的。</li></ul></li></ul></li><li><p>ReadView </p><ul><li><p>判断所有版本中哪个版本是当前事务可见的处理。</p><p>包含内容：</p><ol><li>m_ids：表示在生成ReadView时当前系统中活跃的读写事务的事务id列表。</li><li>min_trx_id：表示在生成ReadView时当前系统中活跃的读写事务中最小的事务id，也就是m_ids中的最小值。</li><li>max_trx_id：表示生成ReadView时系统中应该分配给下一个事务的id值。</li><li>creator_trx_id：表示生成该ReadView的事务的事务id。查询事务开启时生成ReadView。</li></ol></li><li><p>对于查询时的版本链数据是否看见的判断逻辑：</p><p>下述访问版本均指数据行的版本链的某一个版本，即判断版本链上的哪个版本可以被访问。</p><ul><li>如果被访问版本的 trx_id 属性值小于 m_ids 列表中最小的事务id，表明生成该访问版本的事务在生成 ReadView 前已经提交，所以该版本可以被当前事务访问。</li><li>如果被访问版本的 trx_id 属性值大于 m_ids 列表中最大的事务id，表明生成该访问版本的事务在生成 ReadView 后才提交，所以该版本不可以被当前事务访问。</li><li>如果被访问版本的 trx_id 属性值在 m_ids 列表中最 大的事务id和最小事务id之间，那就需要判断一下 trx_id 属性值是不是在 m_ids 列表中，如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问。</li><li>如果被访问版本的trx_id属性值与ReadView中的creator_trx_id值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问。</li></ul></li></ul><img src="/2021/07/10/mysql2/eg1.png" class=""><p>取T5时刻，事务777的版本链</p><img src="/2021/07/10/mysql2/eg2.png" class=""><p>T5时刻，事务999的查询语句生成的的Readview</p><p>此时的ReadView的列表情况 m_ids：[777] ，判断版本链上的每一个版本的事务id和ReadView的id表。如上面版本链，最新版本777和上一个版本777均不符合，版本111符合。</p><p>取T8时刻，版本链</p><img src="/2021/07/10/mysql2/eg3.png" class=""><p>T8时刻的事务999的查询语句生成的ReadView，</p><p>此时的ReadView的列表情况 m_ids：[888] ，判断版本链上的每一个版本的事务id和ReadView的id表。如上面版本链，最新版本888不符合，版本777符合。</p><p>若T5的ReadView的列表情况 m_ids：[777] ,判断版本链上的每一个版本的事务id和ReadView的id表。版本888和两个版本777均不符合，版本111符合。</p></li><li><p>读已提交和可重复读的实现。 </p><p>READ COMMITED实现原理</p><p>每次读取数据前都生成一个ReadView</p><p>REPEATABLE READ</p><p>在第一次读取数据时生成一个ReadView</p></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql(二)</title>
      <link href="/2021/07/08/mysql/"/>
      <url>/2021/07/08/mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库储存引擎"><a href="#一、数据库储存引擎" class="headerlink" title="一、数据库储存引擎"></a>一、数据库储存引擎</h2><ol><li><p>数据库的储存引擎是一种机制，规定了应用如何存储引用数据。Mysql5.5之前默认的存储引擎是MyISAM，之后是InnoDB.</p></li><li><p>MyISAM和InnoDB</p><p>MyISAM</p><ul><li>采用表锁</li><li>B树索引和全文索引</li><li>MyISAM表在磁盘的存储文件<ul><li>.frm  表结构文件</li><li>.MYD  MYDATA  表的数据文件</li><li>.MYI   MYIndex   表的索引文件</li></ul></li></ul><p>InnoDB</p><ul><li>采用行锁</li><li>支持事务和外键</li><li>B树索引和集群索引</li><li>InnoDB表在磁盘的存储文件<ul><li>user.frm：表结构文件</li><li>user.ibd：索引和数据文件（InnoDB Data）</li></ul></li></ul></li></ol><h2 id="二、索引"><a href="#二、索引" class="headerlink" title="二、索引"></a>二、索引</h2><ol><li><p>索引的本质是一个数据结构。</p></li><li><p>Mysql的索引结构</p><ul><li><p>B树索引</p><p>B-Tree</p><img src="/2021/07/08/mysql/Qa.png" class=""><p>B+Tree</p><img src="/2021/07/08/mysql/image-20211004175244727.png" class="" title="image-20211004175244727"><p>B-tree结构的基本思想：</p><img src="/2021/07/08/mysql/btree.png" class=""></li><li><p>hash索引</p><img src="/2021/07/08/mysql/image-20211004193746781.png" class="" title="image-20211004193746781"><p>哈希索引是基于哈希表实现，只有精确匹配索引所有列的查询才有效，对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码（hash code)，哈希码是一个较小的值，大部分情况下不同的键值的行计算出来的哈希码是不同的，但是也会有例外，就是说不同列值计算出来的hash值一样的（即所谓的hash冲突），哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每一个数据行的指针，hash很适合做索引，为某一列或几列建立hash索引，就会利用这一列或几列的值通过一定的算法计算出一个hash值，对应一行或几行数据</p><p>hash索引的限制： </p></li><li><p>全文索引</p></li><li><p>集群索引·</p></li></ul></li><li><p>联合索引</p><img src="/2021/07/08/mysql/image-20211002175058383.png" class=""><ul><li><p>最左匹配原则</p><p>假如一个联合索引为a,b,c；则检索(a,b,c)(a,b),(a,c)用到的这个联合索引，(b,c)不用这个索引</p><p>select * from table where id = a or name = b;select * from table where name=b or id=a;</p><p>上述两个语句均可用到索引abc,也就是说和语句中字段的顺序无关；</p></li></ul></li><li><p>不能用索引的情况</p></li><li><p>索引失效</p><ul><li>不遵守最左匹配原则的</li><li></li></ul></li><li><p>MyISAM和InnoDB的索引结构</p><ol><li><p>MyISAM</p><ul><li><p>MyISAM存储引擎的索引结构</p><p>MyISAM表的索引文件的key为索引列的数据，value为每个数据代表的行的磁盘地址</p></li></ul></li><li><p>InnoDB</p><img src="/2021/07/08/mysql/a.png" class=""><ul><li><p>InnoDB存储引擎的索引结构</p><p>InnoDB表的索引结构key为索引列的数据，每个key代表的整个行的数据也存储在索引表中。</p></li></ul></li></ol></li></ol><h2 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h2><h4 id="查询慢sql"><a href="#查询慢sql" class="headerlink" title="查询慢sql"></a>查询慢sql</h4><h4 id="查看分析sql执行情况"><a href="#查看分析sql执行情况" class="headerlink" title="查看分析sql执行情况"></a>查看分析sql执行情况</h4><ol><li><p>explain</p><p>explain +  sql 语句  可以分析这条语句的执行计划，得到如下结果  </p><img src="/2021/07/08/mysql/d.png" class=""><ul><li><p>select_type </p><ul><li>SIMPLE:简单，不使用表连接和子查询</li><li>PRIMARY：主查询，外层查询</li><li>UNION：UNION中的后面的查询</li><li>SUBQUERY：子查询中的第一个SELECT</li></ul></li><li><p>table</p><p>输出结果的表</p></li><li><p>type</p><ul><li>null&gt;system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all</li><li>all:全表扫描</li><li>index:遍历整个索引查询</li><li>range:索引范围扫描</li><li>ref: 采用非唯一索引</li><li>eq_ref：采用唯一索引，每个索引只对应一条数据</li><li>system\const：单表中至多只有一个匹配行</li><li>null:不用访问表，直接可以得到结果</li></ul></li><li><p>possible_keys</p><p>查询时可能使用的索引</p></li><li><p>key</p><p>查询时真正使用的索引</p></li><li><p>key_len</p><p>使用到索引字段的长度</p></li><li><p>ref</p></li><li><p>rows</p><p>扫描行数</p></li><li><p>Extra</p><p>执行说明</p></li></ul><p>show warnings</p><p>此命令可以查看mysql的内部优化器执行的sql语句</p></li><li><p>show profiles</p><ul><li>show profiles:列出执行sql的运行时间和queryID</li><li>show  profile  for query  query_ID :查看某个sql语句执行的各项具体时间</li><li>show profile  cpu\all\io…  for  query query_ID  查看明细类型的时间消耗</li></ul></li><li><p>show status</p><p>SHOW STATUS命令会显示每个服务器变量的名字和值</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html">https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html</a>  列出了不同的变量含义</p></li><li><p>trace  分析优化器如何选择执行文件 </p></li></ol><h4 id="sql优化措施"><a href="#sql优化措施" class="headerlink" title="sql优化措施"></a>sql优化措施</h4><ol><li><p>选择正确的数据类型</p><ul><li>选择储存空间小的</li><li>选择类型简单的</li><li>避免null值存在，null值存在使得索引相关更加复杂</li></ul></li><li><p>schema设计</p><ul><li><p>不要有太多的列</p><p>存储引擎在工作时，将缓冲数据在服务层转换，列数过多，资源消耗大</p></li><li><p>不要有太多的表关联</p></li><li><p>不要过度使用枚举</p></li></ul></li><li><p>查询优化</p><ul><li><p>不要查询到不需要的数据</p><ul><li><p>查询不需要的记录</p><p>如：select查询大量的结果，但只获取前N条记录，理想是需要几条就查几条</p></li><li><p>多表联查时，返回全部列，只返回需要的列最佳</p></li><li><p>select *</p></li><li><p>重复查相同的数据，可以将需要的数据查一次后缓存，不用重复查</p></li></ul></li><li></li><li><p>重构sql</p><ul><li><p>可以将一个复杂的查询分为数个简单查询</p></li><li><p>切分查询</p><p>将数据分段，每次完成查询的一部分</p></li><li><p>可能的情况下，分解关联查询，将join关联分为几个简单查询</p><p>缓存效率更高</p><p>减少锁的竞争</p></li></ul></li><li></li><li><p>​     </p></li></ul></li></ol><h3 id="数据库的三范式"><a href="#数据库的三范式" class="headerlink" title="数据库的三范式"></a><strong>数据库的三范式</strong></h3><p>第一范式（1NF）： 强调的是列的原子性，即列不能够再分成其他几列。    </p><p>第二范式（2NF）： 首先要满足它是1NF，另外还需要包含两部分内容：一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分(针对联合组件)。</p><p>第三范式（3NF）： 首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况</p><p>反范式化设计数据库，是为了用空间换时间，提高查询效率    </p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql(一)</title>
      <link href="/2021/07/05/mysql1/"/>
      <url>/2021/07/05/mysql1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Mysql概述"><a href="#一、Mysql概述" class="headerlink" title="一、Mysql概述"></a>一、Mysql概述</h2><p>常用mysql命令行命令</p><p>&lt;1.启动MYSQL服务  net start mysql</p><p>停止MYSQL服务  net stop mysql</p><p>&lt;2 . 在命令行中登陆MYSQL控制台 </p><p>  语法格式 mysql –user=root –password=123456 或 mysql –uroot –p123456</p><p>&lt;3 . 进入MYSQL命令行工具后 , 使用status; 或/s 查看运行环境信息</p><p>&lt;4 .显示所有数据库 : show databases;</p><pre><code>   &lt;5 .创建属于我们自己的数据库:     create database DB_name; </code></pre><p>&lt;6 .切换数据库的语法 : use DB_name;</p><p>&lt;7 .显示数据库中的所有表 : show tables;</p><p>&lt;8.初始化数据 ：source sql脚本的绝对路径；</p><p>文件以sql结尾，称为“sql脚本”。当一个文件的扩展名是.sql，并且该文件中编写了大量的sql语句，我们称这样的文件为sql脚本。</p><p>​    注意：直接使用source命令可以执行sql脚本。sql脚本中的数据量太大的时候，无法打开，请使用source命令完成初始化。</p><p>&lt;9 .显示某个表创建时的全部信息 : show create table table_name;</p><p>&lt;10 .查看表的具体属性信息及表中各字段的描述：Describe table_name; 缩写形式 : desc table_name;</p><p>&lt;11.删除数据库 drop database bjpowernode;</p><h2 id="二、基准测试"><a href="#二、基准测试" class="headerlink" title="二、基准测试"></a>二、基准测试</h2><ol><li><p>基准测试策略</p><p>集成式：针对整个系统测试</p><p>单组件式：针对Mysql单独测试</p></li><li><p>测试指标</p><ul><li>吞吐量：单位时间的处理事务量。</li><li>响应时间和延迟：测试任务所需时间</li><li>并发性：同时请求的线程数或连接数，以及并发数提高后，对其他性能的影响。</li><li>可扩展性：给系统增加一倍的资源，就可以获得两倍的效益。</li></ul></li><li><p>测试方法</p></li><li><p>测试工具</p><ul><li>集成式<ul><li>ab</li><li>http_load</li><li>JMeter</li></ul></li><li>单组件式<ul><li>mysqlslap</li><li>MySQL Benchmark Suite</li><li>Super Smack</li><li>Database Test Suite</li><li>sysbench</li></ul></li></ul></li></ol><h2 id="三、MySQL分区"><a href="#三、MySQL分区" class="headerlink" title="三、MySQL分区"></a>三、MySQL分区</h2><ol><li><p>分区：数据库中的一个表，按照规则分为若干个小表，不影响业务逻辑。</p></li><li><p>分区的优点</p><ul><li>可以储存更多的数据</li><li>优化查询，where包含分区条件时，可以只扫描几个分区表来提高效率，sum()等聚合函数在分区上处理更高效</li><li>删除无效的数据通过删除相关的分区，效率更高</li><li>分散数据，增加吞吐量</li></ul></li><li><p>分区概述</p><ul><li>分区根据分区键来分区，分区键可以是区间值，特定值，Hash函数等</li><li>同一个表的所有分区必须使用同一个储存引擎，不同表之间可以不同</li><li>分区类型<ul><li>RANGE</li><li>LIST</li><li>HASH</li><li>KEY</li></ul></li><li>5.1版本分区键类型必须是INT(KEY分区时可以使用BLOB、TEXT之外的类型)，5.5后RANGE和LIST支持非整数分区</li><li>如果表有主键或唯一键，其必须包含分区键，即分区表不能用主键\唯一键之外的键作为分区键分区</li></ul></li><li><p>各个分区</p><ul><li><p>RANGE</p><p>常用于分组删除和分组查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>    empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    deptno <span class="token keyword">int</span><span class="token punctuation">,</span>    birthdate <span class="token keyword">date</span><span class="token punctuation">,</span>    salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--分区的最后一个表的范围为maxvalue，因为如果指定3000，当增加数据大于3000时，则报错--></span><span class="token keyword">partition</span> <span class="token keyword">by</span> range<span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">partition</span> p1 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">partition</span> p2 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">partition</span> p3 <span class="token keyword">values</span> less than maxvalue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--在日期或字符串上进行分区，要使用函数转化--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--日期转换函数</span><span class="token keyword">year</span><span class="token punctuation">(</span><span class="token punctuation">)</span>to_days<span class="token punctuation">(</span><span class="token punctuation">)</span>to_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--></span><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>    empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    deptno <span class="token keyword">int</span><span class="token punctuation">,</span>    birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">partition</span> <span class="token keyword">by</span> range<span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">partition</span> p1 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">1980</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">partition</span> p2 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">partition</span> p3 <span class="token keyword">values</span> less than maxvalue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>LIST</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>    empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    deptno  <span class="token keyword">int</span><span class="token punctuation">,</span>    birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--通过枚举值来分区--></span><span class="token keyword">partition</span> <span class="token keyword">by</span> list<span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">partition</span> p1 <span class="token keyword">values</span> <span class="token operator">in</span>  <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">partition</span> p2 <span class="token keyword">values</span> <span class="token operator">in</span>  <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">partition</span> p3 <span class="token keyword">values</span>  <span class="token operator">in</span>  <span class="token punctuation">(</span><span class="token number">30</span>，<span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>HASH</p><ul><li>两种分区：常规取模分区，线性二次幂分区</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">int</span><span class="token punctuation">,</span>birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">partition</span> <span class="token keyword">by</span> <span class="token keyword">hash</span><span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span><span class="token punctuation">)</span>partitions <span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--线性，+linear--></span><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">int</span><span class="token punctuation">,</span>birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">partition</span> <span class="token keyword">by</span> linear <span class="token keyword">hash</span><span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span><span class="token punctuation">)</span>partitions <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>KEY</p><ul><li>key按照MySQL提供的hash函数分区 </li><li>若不指定，则主键为分区键，若无主键，非空唯一键为分区键</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deptno <span class="token keyword">int</span><span class="token punctuation">,</span>birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">partition</span> <span class="token keyword">by</span> <span class="token keyword">key</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span>partitions <span class="token number">4</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>COLUMNS分区</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--</span>整数类型：<span class="token keyword">tinyint</span>、<span class="token keyword">smallint</span>、<span class="token keyword">mediumint</span>、<span class="token keyword">int</span>、<span class="token keyword">bigint</span>日期时间类型：<span class="token keyword">date</span>、<span class="token keyword">datetime</span>字符类型：<span class="token keyword">char</span>、<span class="token keyword">varchar</span>、<span class="token keyword">binary</span>、<span class="token keyword">varbinary</span><span class="token punctuation">,</span>不支持<span class="token keyword">text</span>和<span class="token keyword">blob</span><span class="token comment">--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--多列分区</span>a<span class="token punctuation">,</span>b两个分区键<span class="token comment">--></span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_range_test <span class="token punctuation">(</span>    a <span class="token keyword">INT</span><span class="token punctuation">,</span>    b <span class="token keyword">INT</span> <span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token keyword">COLUMNS</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--</span>    less than <span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span>    分区条件判断：a值小于num1 <span class="token operator">or</span> a值等于num1<span class="token punctuation">,</span>b值小于num2    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>分在p2  <span class="token number">1</span><span class="token operator">&lt;</span><span class="token number">10</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> <span class="token number">10</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>分在p2  <span class="token number">10</span><span class="token operator">&lt;</span><span class="token number">10</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> <span class="token number">9</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>分在p3 <span class="token number">10</span><span class="token operator">&lt;</span><span class="token number">10</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> <span class="token number">10</span><span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment">--></span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span>MAXALUE<span class="token punctuation">,</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子分区</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ts <span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">,</span> purchased <span class="token keyword">DATE</span><span class="token punctuation">)</span>    <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span><span class="token keyword">YEAR</span><span class="token punctuation">(</span>purchased<span class="token punctuation">)</span><span class="token punctuation">)</span>    SUBPARTITION <span class="token keyword">BY</span> <span class="token keyword">HASH</span><span class="token punctuation">(</span>TO_DAYS<span class="token punctuation">(</span>purchased<span class="token punctuation">)</span><span class="token punctuation">)</span>    SUBPARTITIONS <span class="token number">2</span>    <span class="token punctuation">(</span>        <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE    <span class="token punctuation">)</span>； <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--</span> 表ts 有<span class="token number">3</span>个RANGE分区。这<span class="token number">3</span>个分区中的每一个分区p0<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> 和 p2<span class="token punctuation">,</span>又被进一步分成了<span class="token number">2</span>个子分区。 P0分为两个子区，两个子区值均小于<span class="token number">1990</span> p1分为两个子区，值均小于<span class="token number">2000</span> p3分为两个子区，小于maxvalue <span class="token comment">--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>null值得处理</p><ul><li>RANGE: 当做最小值处理</li><li>LIST：Null值必须在枚举中写出，否则不接受</li><li>HASH\KEY: 当做零值处理</li></ul></li><li><p>分区管理</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--删除分区</span>删除 RANGE和LIST分区<span class="token punctuation">,</span>删除分区之后，连同分区中的数据一同删除RANGE分区删除之后，增加数据后会分配到其他分区LIST分区删除之后，不能再添加已删除的分区键的数据<span class="token comment">--></span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">drop</span> <span class="token keyword">partition</span> p_numeg：<span class="token keyword">alter</span> <span class="token keyword">table</span> ts <span class="token keyword">drop</span> <span class="token keyword">partition</span> p1<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--增加分区</span>RANGE：只能在最大端加<span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">add</span> <span class="token keyword">partition</span><span class="token punctuation">(</span><span class="token keyword">partition</span> p5 <span class="token keyword">values</span> less than <span class="token punctuation">(</span>maxvalues<span class="token punctuation">)</span><span class="token punctuation">)</span> LIST<span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">add</span> <span class="token keyword">partition</span>（<span class="token keyword">partition</span> p5 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span>）<span class="token comment">--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--重新定义分区:保存原数据的情况下，同时改变结构</span>重新定义只能定义相邻的分区，不能跨分区，同时重新定义的范围必须原分区覆盖相同的范围，也不能改变分区表的类型<span class="token comment">--></span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name reorganize <span class="token keyword">partition</span> <span class="token keyword">into</span> xxxRANGE:将p3<span class="token punctuation">(</span><span class="token number">2005</span><span class="token operator">-</span><span class="token number">2015</span><span class="token punctuation">)</span>分为p2<span class="token punctuation">(</span><span class="token number">2005</span><span class="token operator">-</span><span class="token number">2010</span><span class="token punctuation">)</span>p3<span class="token punctuation">(</span><span class="token number">2010</span><span class="token operator">-</span><span class="token number">2015</span><span class="token punctuation">)</span><span class="token keyword">alter</span> <span class="token keyword">table</span> ts reorganize <span class="token keyword">partition</span> p3 <span class="token keyword">into</span> <span class="token punctuation">(</span>        <span class="token keyword">partition</span> p2 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">2010</span><span class="token punctuation">)</span>        <span class="token keyword">partition</span> p3 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    将p2<span class="token punctuation">(</span><span class="token number">2005</span><span class="token operator">-</span><span class="token number">2010</span><span class="token punctuation">)</span>p3<span class="token punctuation">(</span><span class="token number">2010</span><span class="token operator">-</span><span class="token number">2015</span><span class="token punctuation">)</span>合并为一个P3<span class="token punctuation">(</span><span class="token number">2005</span><span class="token operator">-</span><span class="token number">1015</span><span class="token punctuation">)</span>    <span class="token keyword">alter</span> <span class="token keyword">table</span> ts reorganize <span class="token keyword">partition</span> p2<span class="token punctuation">,</span>p3 <span class="token keyword">into</span> <span class="token punctuation">(</span>        <span class="token keyword">partition</span> p3 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>        LIST:    现有 p4 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    p5 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    将p4 变为 p4 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">alter</span> <span class="token keyword">table</span> ts <span class="token keyword">add</span> <span class="token keyword">partition</span> p6<span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">alter</span> <span class="token keyword">table</span> ts reorganize <span class="token keyword">partition</span> p4<span class="token punctuation">,</span>p5<span class="token punctuation">,</span>p6 <span class="token keyword">into</span> <span class="token punctuation">(</span>            <span class="token keyword">partition</span> p4 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>            <span class="token keyword">partition</span> p5 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--HASH和KEY分区管理--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--不能通过删除来减少分区，只能通过合并来减少--></span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">coalesce</span> <span class="token keyword">partition</span> <span class="token number">2</span>；<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--分区将合成为2个--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--增加分区--></span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">add</span> <span class="token keyword">partition</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--原来只有两个分区，增加2个，现在是四个--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="三、存储过程和函数"><a href="#三、存储过程和函数" class="headerlink" title="三、存储过程和函数"></a>三、存储过程和函数</h2><ol><li><p>概念</p><p>存储过程和函数是预先编译并存储在数据库中的一段SQL的集合，区别在于函数必须有返回值，存储过程的参数可以是IN,OUT,INOUT而函数只能是IN。</p></li><li><p>相关命令操作</p><ul><li><p>储存过程的创建<br>CREATE PROCEDURE 创建的存储过程名字(OUT|IN|INOUT 参数名 数据类型,…,…) 特征 过程体;</p><img src="/2021/07/05/mysql1/image-20211008004247560.png" class="" title="image-20211008004247560"><ul><li>特征值：<ul><li>LANGUAGE SQL：表明过程体使用SQL语言</li><li>[NOT] DETERMINISTIC : 每次输入一样，输出也一样的程序</li><li>{CONTAINS SQL|NO SQL|READS SQL DATA|MODIFIES DATA}<ul><li>CONTAINS SQL:子程序不包括读出后写的语句，默认值</li><li>NO SQL:自程序不包括SQL语句。</li><li>READS SQL DATA:包含读语句，不包含写</li><li>MPDIFIES DATA:包含写语句，不包括读语句</li></ul></li><li>SQL SECURITY {DEFINER|INVOKER}<ul><li>DEFINER 创建者许可执行</li><li>INVOKER 调用者许可执行</li></ul></li><li>COMMENT：注释信息</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $$<span class="token keyword">create</span> <span class="token keyword">procedure</span> GetScores<span class="token punctuation">(</span><span class="token keyword">out</span> minScore <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">out</span> avgScore <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">out</span> maxScore <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">into</span> minScore <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">into</span> avgScore <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">into</span> maxScore <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>函数的创建</p><p>CREATE FUNCTION 创建的存储函数名字(参数名称 参数类型,…,…)  RETURNS 返回值得类型  函数体;</p><img src="/2021/07/05/mysql1/image-20211008140250954.png" class="" title="image-20211008140250954"><pre class="line-numbers language-none"><code class="language-none">DELIMITER $$CREATE FUNCTION func_employee_sal (empno INT(11))   &#x2F;&#x2F;传入值    RETURNS DOUBLE(10,2)     &#x2F;&#x2F;返回值COMMENT&#39;查询某个雇员的工资&#39;BEGIN    RETURN (SELECT sal        FROM t_employee        WHERE t_employee.empno&#x3D;empno);END$$DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">procedure</span><span class="token operator">|</span><span class="token keyword">function</span> sp_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">procedure</span><span class="token operator">|</span><span class="token keyword">function</span> <span class="token keyword">status</span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span><span class="token operator">|</span><span class="token keyword">function</span> sp_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>变量的使用   </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> var_name<span class="token punctuation">[</span><span class="token punctuation">,</span>…<span class="token punctuation">]</span> <span class="token keyword">type</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> <span class="token keyword">value</span><span class="token punctuation">]</span><span class="token keyword">SET</span> var_name<span class="token operator">=</span>expr<span class="token punctuation">[</span><span class="token punctuation">,</span>…<span class="token punctuation">]</span><span class="token keyword">declare</span> prodDiscRate <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">set</span> prodDiscRate <span class="token operator">=</span> <span class="token number">0.88</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>条件定义和处理</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">---条件创建--></span> <span class="token keyword">DECLARE</span> condition_name CONDITION <span class="token keyword">FOR</span> <span class="token punctuation">[</span>condition_type<span class="token punctuation">]</span>SQLSTATE <span class="token punctuation">[</span><span class="token keyword">VALUE</span><span class="token punctuation">]</span> sqlstate_value <span class="token operator">|</span> mysql_erroe_code condition_type：条件类型，用于定义MySQL的错误，SQLSTATE是长度为<span class="token number">5</span>的字符串类型的错误代码； mysql_error_code是数值类型的错误代码。 例如ERROR <span class="token number">1142</span>（<span class="token number">42000</span>），sql_state_value的值是<span class="token string">'42000'</span>，mysql_error_code的值是<span class="token number">1142</span>。  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--条件处理--></span> <span class="token keyword">DECLARE</span> handler_type <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span>  condition_value<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> sp_statement（<span class="token number">1</span>）handler_type：指定错误处理方式    <span class="token keyword">CONTINUE</span>：遇到错误不处理，继续执行    <span class="token keyword">EXIT</span>：遇到错误立即退出    UNDO：遇到错误撤回之前的操作（<span class="token number">2</span>）condition_value：表示错误类型    SQLSTATE <span class="token punctuation">[</span><span class="token keyword">VALUE</span><span class="token punctuation">]</span> sqlstate_value：包含<span class="token number">5</span>个字符的字符串错误值    mysql_error_code：数值类型的错误代码    cond_name：定义条件的名称    SQLWARNING：匹配所有以<span class="token number">01</span>开头的SQLSTATE错误代码    <span class="token operator">NOT</span> FOUND：匹配所有以<span class="token number">02</span>开头的SQLSTATE错误代码    <span class="token keyword">SQL</span> EXCEPTION：匹配所有没有被SQLWARNING或<span class="token operator">NOT</span> FOUND捕获的SQLSTATE错误代码（<span class="token number">3</span>）sp_statement    程序语句段，表示在遇到定义的错误时执行的存储过程或函数。     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h2 id="四、触发器"><a href="#四、触发器" class="headerlink" title="四、触发器"></a>四、触发器</h2><ol><li></li><li><p>ss</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> 创建的触发器名字 BEFFOR<span class="token operator">|</span><span class="token keyword">AFTER</span>  <span class="token keyword">INSERT</span><span class="token operator">|</span><span class="token keyword">UPDATE</span><span class="token operator">|</span><span class="token keyword">DELETE</span><span class="token keyword">ON</span> 表名字 <span class="token keyword">FOR</span>  触发器的执行间隔   触发器的<span class="token keyword">SQL</span>语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2021/07/05/mysql1/image-20211008140419066.png" class="" title="image-20211008140419066"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> t1 <span class="token keyword">after</span><span class="token keyword">insert</span><span class="token keyword">on</span> ord<span class="token keyword">for each row</span><span class="token keyword">begin</span><span class="token keyword">update</span> goods <span class="token keyword">set</span> num<span class="token operator">=</span>num<span class="token operator">-</span><span class="token number">2</span> <span class="token keyword">where</span> gid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>查看已有触发器：<span class="token keyword">show</span> triggers    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>删除已有触发器：<span class="token keyword">drop</span> <span class="token keyword">trigger</span> triggerName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>触发器中引用行变量</p><p>（1）在触发目标上执行insert操作后会有一个新行，如果在触发事件中需要用到这个新行的变量，可以用new关键字表示<br>（2）在触发目标上执行delete操作后会有一个旧行，如果在触发事件中需要用到这个旧行的变量，可以用old关键字表示<br>（3）在触发目标上执行update操作后原纪录是旧行，新记录是新行，可以使用new和old关键字来分别操作</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-collection</title>
      <link href="/2021/06/26/collection/"/>
      <url>/2021/06/26/collection/</url>
      
        <content type="html"><![CDATA[<h2 id="一、继承结构图"><a href="#一、继承结构图" class="headerlink" title="一、继承结构图"></a>一、继承结构图</h2><img src="/2021/06/26/collection/collection%E7%BB%A7%E6%89%BF.png" class=""><img src="/2021/06/26/collection/Map%E7%BB%A7%E6%89%BF%E5%9B%BE.png" class="">]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket网络编程</title>
      <link href="/2020/12/10/computernetworking4/"/>
      <url>/2020/12/10/computernetworking4/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-API"><a href="#1-1-API" class="headerlink" title="1.1.API"></a>1.1.API</h3><p>API（Application Programming Interface，应用程序接口)是一些预先定义的接口（如函数、HTTP接口），或指软件系统不同组成部分衔接的约定。</p><p>应用程序接口又称为应用编程接口，是一组定义、程序及协议的集合，通过 API接口实现计算机软件之间的相互通信。API 的一个主要功能是提供通用功能集。</p><h3 id="1-2-Socket"><a href="#1-2-Socket" class="headerlink" title="1.2.Socket"></a>1.2.Socket</h3><p>对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。</p><ul><li><p>Socket标识符</p><p>对内：ip+端口号</p><p>对内：套接字描述符</p></li><li><p>应用进程创建套接字，操作系统分配一个数据结构存储套接字相关信息，并返回套接字描述符</p><img src="/2020/12/10/computernetworking4/socket%E6%8F%8F%E8%BF%B0%E7%AC%A6%E5%AF%B9%E5%BA%94%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" class=""></li></ul><h2 id="二、Socket类型"><a href="#二、Socket类型" class="headerlink" title="二、Socket类型"></a>二、Socket类型</h2><ul><li><p>流套接字(SOCK_STREAM)</p><p>流套接字用于提供面向连接、可靠的数据传输服务。该服务将保证数据能够实现无差错、无重复送，并按顺序接收。即TCP。</p></li><li><p>数据报套接字(SOCK_DGRAM)</p><p>数据报套接字提供一种无连接的服务。该服务并不能保证数据传输的可靠性,数据有可能在传输过程中丢失或出现数据重复，且无法保证顺序地接收到数据。即UDP 。</p></li><li><p>原始套接字(SOCK_RAW)</p><p>原始套接字可以读写内核没有处理的IP数据包，而流套接字只能读取TCP协议的数据，数据报套接字只能读取UDP协议的数据。因此，如果要访问其他协议发送的数据必须使用原始套接 。</p></li></ul><h2 id="三、Socket函数"><a href="#三、Socket函数" class="headerlink" title="三、Socket函数"></a>三、Socket函数</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>运输层</title>
      <link href="/2020/12/10/computernetworking3/"/>
      <url>/2020/12/10/computernetworking3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>运输层协议为运行在不同主机上的应用进程之间提供了逻辑通信。</p><p>网络层协议提供了主机间的通信。</p><p>运输层协议是在端系统中而不是在路由器中实现的。在发送端，运输层将收到的报文划分为较小的块，并为其加上一个运输层首部形成报文段；运送至网络层形成数据报；在接收端，运输层处理报文段，使其成为数据为进程使用。</p><p>运输层协议只工作在端系统，只负责将报文送至网络层，对其在网络层中的移动不作规定。</p><p>两种协议：TCP和UDP</p><p>TCP和UDP将两个端系统之间的IP交付服务扩展为两个进程之间的交付服务，这个过程称为多路复用和多路分解。</p><ul><li><p>多路复用和多路分解</p><p>多路分解：在接收端，运输层检查字段，标识出接收套接字，并将报文段定向到该套接字，将数据交付到正确的套接字</p><p>多路复用：在源主机从不同套接字中收集数据块为其加上首部信息，生成报文段，传递给网络层。</p></li></ul><h2 id="二、UDP"><a href="#二、UDP" class="headerlink" title="二、UDP"></a>二、UDP</h2><p>除了复用和分解及少量的差错检测外，几乎没有对IP协议增加别的东西。</p><h3 id="2-1-UDP的特性"><a href="#2-1-UDP的特性" class="headerlink" title="2.1.UDP的特性"></a>2.1.UDP的特性</h3><ul><li>应用层将数据传递给UDP时，UDP会立即将数据传送给网络层，没有阻塞机制</li><li>无需连接建立，在发送报文段之前，发送方和接受方之间不会握手，UDP是无连接的。</li><li>无连接状态，无需维持连接状态</li><li>分组首部开销小</li></ul><p>UDP可能的问题：如果每个人都采取高比特率传输而不采用任何阻塞机制，就会使路由器有大量的分组溢出，引起高的丢包率。</p><h3 id="2-2-UDP的报文段"><a href="#2-2-UDP的报文段" class="headerlink" title="2.2.UDP的报文段"></a>2.2.UDP的报文段</h3><img src="/2020/12/10/computernetworking3/UDP%E6%8A%A5%E6%96%87%E6%AE%B5.png" class=""><p>UDP检验和</p><p>发送方的UDP对报文段中所有16个比特字的和进行反码(将0换成1)运算，该反码运算结果作为检验和。在接收方，将所有的16个比特字和检验和加在一起，结果为1111…，则没有发生差错，若有0，则发生差错。</p><h2 id="三、TCP"><a href="#三、TCP" class="headerlink" title="三、TCP"></a>三、TCP</h2><h3 id="3-1-TCP的特点"><a href="#3-1-TCP的特点" class="headerlink" title="3.1.TCP的特点"></a>3.1.TCP的特点</h3><ul><li>TCP是面向连接的，发送数据之前，两个进程必须互相握手。</li><li>全双工服务：一台主机的线程A和另一台主机线程B连接后,A的应用层可以传到B，B也可以传到A</li><li>TCP的连接是点对点的，单个发送，单个接受。</li></ul><h3 id="3-2-TCP报文段结构"><a href="#3-2-TCP报文段结构" class="headerlink" title="3.2.TCP报文段结构"></a>3.2.TCP报文段结构</h3><img src="/2020/12/10/computernetworking3/TCP%E6%8A%A5%E6%96%87%E6%AE%B5.png" class=""><h3 id="3-3"><a href="#3-3" class="headerlink" title="3.3."></a>3.3.</h3><h3 id="3-TCP的连接管理"><a href="#3-TCP的连接管理" class="headerlink" title="3.TCP的连接管理"></a>3.TCP的连接管理</h3><ul><li><p>三次握手</p><img src="/2020/12/10/computernetworking3/TCP%E6%8F%A1%E6%89%8B.png" class=""><p>SYN=1：同步信号，表示建立连接，SYN=1时</p><p>seq=x:表示发送端的数据包的初始序号为x;</p><p>ack:确认序号，表示响应。</p><p>ack=x+1:表示我方收到x为止的所有数据，希望下次发送的序号是 x+1</p></li><li><p>四次挥手</p><img src="/2020/12/10/computernetworking3/TCP%E6%8C%A5%E6%89%8B.png" class=""><ul><li>FIN：=1，发起关闭信号</li></ul></li></ul><h2 id="四、TCP可靠传输的实现"><a href="#四、TCP可靠传输的实现" class="headerlink" title="四、TCP可靠传输的实现"></a>四、TCP可靠传输的实现</h2><h3 id="4-1-ARQ协议"><a href="#4-1-ARQ协议" class="headerlink" title="4.1.ARQ协议"></a>4.1.ARQ协议</h3><img src="/2020/12/10/computernetworking3/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A31.png" class=""><p>控制报文使得接收方可以让发送方知道哪些内容被正确接受。基于重传机制的可靠数据协议称为自动重传请求协议(ARQ)。</p><p>ARQ包括停止等待ARQ协议和连续ARQ协议</p><ul><li><p>停止等待ARQ协议</p><p>发送方这时自然发送每次只能发送一个，并且必须等待这个数据包的ACK，才能发送下一个。</p></li><li><p>连续ARQ协议</p><p>由于停止等待ARQ协议信道利用率太低，所以需要使用连续ARQ协议来进行改善。这个协议会连续发送一组数据包，然后再等待这些数据包的ACK。</p><p>发送方采用流水线传输。流水线传输就是发送方可以连续发送多个分组，不必每发完一个分组就停下来等待对方确认。如下图所示：</p><img src="/2020/12/10/computernetworking3/%E8%BF%9E%E7%BB%ADARQ.png" class=""></li></ul><h3 id="4-2-滑动窗口协议"><a href="#4-2-滑动窗口协议" class="headerlink" title="4.2.滑动窗口协议"></a>4.2.滑动窗口协议</h3><p>滑动窗口协议在在发送方和接收方之间各自维持一个滑动窗口，发送发是发送窗口，接收方是接收窗口，而且这个窗口是随着时间变化可以向前滑动的。它允许发送方发送多个分组而不需等待确认。TCP的滑动窗口是以字节为单位的。</p><p>如下图所示，发送窗口中有四个概念：已发送并收到确认的数据（不在发送窗口和发送缓冲区之内）、已发送但未收到确认的数据（位于发送窗口之内）、允许发送但尚未发送的数据（位于发送窗口之内）、发送窗口之外的缓冲区内暂时不允许发送的数据。</p><p>接收窗口中也有四个概念：已发送确认并交付主机的数据（不在接收窗口和接收缓冲区之内）、未按序收到的数据（位于接收窗口之内）、允许的数据（位于接收窗口之内）、不允许接收的数据（位于发送窗口之内）。</p><img src="/2020/12/10/computernetworking3/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A33.png" class=""><p>(1)凡是已经发送过的数据，在未收到确认之前，都必须暂时保留，以便在超时重传时使用。</p><p>(2))只有当发送方A收到了接收方的确认报文段时，发送方窗口才可以向前滑动几个序号。</p><p>(3))当发送方A发送的数据经过一段时间没有收到确认（由超时计时器控制），就要使用回退N步协议，回到最后接收到确认号的地方，重新发送这部分数据</p><ul><li><p>回退N步(GBN)协议</p><p>发送的窗口大小为n，接受方的窗口仍然为1。采用累积确认，即如果一个序号为n被正确接受到，并且是按序的（前n-1个数据被正确按序接受，其他情况下，接收方放弃分组） 。这里假设n=10:首先发送方一口气发送9个数据帧，前面两个帧正确返回了，数据帧2出现了错误，这时发送方被迫重新发送2-8这7个帧，接受方也必须丢弃之前接受的3-8这几个帧。 后退n协议的好处无疑是提高了效率，但是一旦网络情况糟糕，则会导致大量数据重发，反而不如上面的停等协议。</p><img src="/2020/12/10/computernetworking3/GBN.png" class=""></li><li><p>选择重传(SR)协议</p><p>接收端总会缓存所有收到的帧，当某个帧出现错误时，只会要求重传这一个帧，只有当某个序号后的所有帧都正确收到后，才会一起提交给高层应用。重传协议的缺点在于接受端需要更多的缓存。</p><img src="/2020/12/10/computernetworking3/%E9%80%89%E6%8B%A9%E9%87%8D%E4%BC%A0.png" class=""></li></ul><h3 id="4-3-流量控制"><a href="#4-3-流量控制" class="headerlink" title="4.3.流量控制"></a>4.3.流量控制</h3><h3 id="4-4-阻塞机制"><a href="#4-4-阻塞机制" class="headerlink" title="4.4.阻塞机制"></a>4.4.阻塞机制</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ComputerNetworking2</title>
      <link href="/2020/12/10/computernetworking2/"/>
      <url>/2020/12/10/computernetworking2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>应用层(一)</title>
      <link href="/2020/12/10/computernetworking1/"/>
      <url>/2020/12/10/computernetworking1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-网络应用程序体系结构"><a href="#1-网络应用程序体系结构" class="headerlink" title="1.网络应用程序体系结构"></a>1.网络应用程序体系结构</h2><ul><li><p>客户-服务器(c-s)</p><p>客户之间相互不通信</p><p>服务器有固定的地址，即IP地址。</p></li><li><p>P2P</p><p>对于服务器有最小的依赖或没有依赖。应用程序在间断连接的主机对之间直接通信，互为对等方。</p><p>有较高的字扩展性。</p></li></ul><h2 id="2-进程通信"><a href="#2-进程通信" class="headerlink" title="2.进程通信"></a>2.进程通信</h2><p>多个端系统之间进行通信的是进程，通过交换报文进行通信。</p><ul><li>在一对进程之间的通信会话场景中，发起通信的进程是客户进程，等待联系的是服务器进程。</li><li>进程之间通过套接字向网络中发送报文或从网络中接收报文。socket是网络中不同主机的应用程序之间进行双向通信的端点的抽象，称为应用程序和网络之间的API，是应用程序和运输层协议之间的接口。</li><li>进程之间通信寻址，要了解主机地址和目的端口号。</li></ul><h2 id="3-应用层协议"><a href="#3-应用层协议" class="headerlink" title="3.应用层协议"></a>3.应用层协议</h2><p>应用层协议分为公开协议(由RFC文档定义的，位于公共域中)和私有协议。</p><p>应用层协议定义了：</p><ul><li>交换的报文的类型</li><li>报文语法</li><li>字段语义</li><li>进程发送报文和对报文的响应的规则</li></ul><h2 id="4-email"><a href="#4-email" class="headerlink" title="4.email"></a>4.email</h2><p>三个组成部分：用户代理、邮件服务器、简单邮件传输协议(SMTP协议)</p><h3 id="4-1-SMTP协议"><a href="#4-1-SMTP协议" class="headerlink" title="4.1.SMTP协议"></a>4.1.SMTP协议</h3><p>SMTP协议用于从发送方的邮件服务器发送报文到接收方的邮件服务器。</p><ul><li><p>SMTP的应用</p><img src="/2020/12/10/computernetworking1/%E9%82%AE%E4%BB%B6SMTP.png" class=""><p>运行发送邮件服务器主机上的客户SMTP在25号端口建立一个到运行在接受邮件服务器主机上的服务器SMTP的TCP连接。SMTP依赖TCP提供的可靠传输将数据传输到邮件服务器上。</p></li><li><p>与HTTP</p><ul><li>HTTP是拉协议，用户使用HTTP从服务器拉取信息。SMTP是一个推协议，有发送服务器推向接受服务器。</li><li>SMTP要求每个报文采用7个比特ASCII码格式。</li><li>HTTP把每个对象封装到自己的HTTP响应报文中，而SMTP将所有报文对象放在一个报文中。</li></ul></li></ul><h3 id="4-2-报文格式"><a href="#4-2-报文格式" class="headerlink" title="4.2.报文格式"></a>4.2.报文格式</h3><p>报文首部+空白行+ACSII格式表示的报文体</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--首部结构--></span>From: alice@crepes.frTo: bob@hamburger.eduSubject: Searching for the meaning of life <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-邮件访问协议"><a href="#4-3-邮件访问协议" class="headerlink" title="4.3.邮件访问协议"></a>4.3.邮件访问协议</h3><p>获取报文不能使用SMTP协议，SMTP是一个推协议，目前流行的邮件访问协议：POP3、IMAP、HTTP。</p><img src="/2020/12/10/computernetworking1/%E9%82%AE%E4%BB%B6%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE.png" class=""><h2 id="5-DNS"><a href="#5-DNS" class="headerlink" title="5.DNS"></a>5.DNS</h2><p>DNS是一个有分层的DNS服务器实现的分布式数据库，DNS是一个使得主机能够查询到分布式数据库的应用层协议，运行在UDP上，使用53号端口。</p><h3 id="5-1-提供的服务"><a href="#5-1-提供的服务" class="headerlink" title="5.1.提供的服务"></a>5.1.提供的服务</h3><ul><li>主机名到IP地址的转换的目录服务。</li><li>主机别名：获得主机别名对应的规范主机名已经IP地址。</li><li>邮件服务器别名：对主机别名进行解析，以获得该主机的规范主机名及IP地址。</li><li>负载分配：在冗余的服务器之间进行负载分配。</li></ul><h3 id="5-2-集中式和分布式"><a href="#5-2-集中式和分布式" class="headerlink" title="5.2.集中式和分布式"></a>5.2.集中式和分布式</h3><ul><li><p>集中式的问题</p><p>单点故障、通信容量、远距离、维护问题</p></li><li><p>分布式</p><img src="/2020/12/10/computernetworking1/DSN%E5%88%86%E5%B8%83%E5%BC%8F.png" class=""><ul><li><p>根DNS服务器：提供TLD服务器的IP地址。</p></li><li><p>顶级域服务器：提供权威DNS服务器的IP地址。每个顶级域和所有国家的顶级域，都有TLD服务器。(服务器集群)</p><p>顶级域：</p></li><li><p>权威DNS服务器：具有公共可访问主机的机构的IP地址。</p></li><li><p>本地DNS服务器：不属于服务器层次，每个ISP都有一台本地DNS服务器。</p></li></ul></li><li><p>DNS访问过程</p><p>查询过程分为：递归查询和迭代查询</p><img src="/2020/12/10/computernetworking1/DNS%E6%B5%81%E7%A8%8B.png" class=""><p>请求主机发送到本地DNS服务器是递归查询，其他的三个查询时迭代查询。</p></li></ul><h3 id="5-3-DNS缓存"><a href="#5-3-DNS缓存" class="headerlink" title="5.3.DNS缓存"></a>5.3.DNS缓存</h3><p>在一个请求链中，当某DNS服务器接收一个DNS回答时，它能将映射缓存在本地存储器中。在一段时间后(通常2天)将丢弃缓存信息。</p><h3 id="5-4-DNS记录和报文"><a href="#5-4-DNS记录和报文" class="headerlink" title="5.4.DNS记录和报文"></a>5.4.DNS记录和报文</h3><ul><li><p>DNS存储了资源记录(Resource Record),RR提供了主机名到IP地址的映射。</p><p>资源记录包含了字段四元组：(Name，Value，Type，TTL)</p><ul><li>TTL是该记录的生存时间，记录了RR应当从缓存中删除的时间。</li><li>Type=A时，Name是主机名，Value是IP地址。</li><li>Type=NS,Name是个域，Value是知道如何获得该域中主机IP地址的权威DNS服务器的主机名。</li><li>Type=CNAME，Value是别名为Name的主机对应的规范主机名。</li><li>Type=MX，Value是别名为Name的邮件服务器的规范主机名。</li></ul></li><li><p>报文格式</p><p>DNS只有两种报文：查询和回答报文，且两种报文有相同的格式。</p><img src="/2020/12/10/computernetworking1/DNS%E6%8A%A5%E6%96%87.png" class=""></li></ul><h2 id="6-P2P"><a href="#6-P2P" class="headerlink" title="6.P2P"></a>6.P2P</h2><img src="/2020/12/10/computernetworking1/P2P.png" class=""><h3 id="6-1-BitTorrent"><a href="#6-1-BitTorrent" class="headerlink" title="6.1.BitTorrent"></a>6.1.BitTorrent</h3><p>BitTorrent是用于文件分发的流行P2P协议。</p><img src="/2020/12/10/computernetworking1/BT.png" class=""><p>参与一个特定文件分发的所有对等方的集合被称为一个洪流。在一个洪流中的对等方彼此下载等长度的文件块。当一个对等方首次加入一个洪流中，它没有块，随着时间它积累越来越多的块。它在下载的同时，也在为其他对等方上载多个块。当获取整个文件时，它可以离开洪流也可以留在洪流中。</p><p>每一个洪流都有一个追踪器，当一个对等方加入洪流中，它向追踪器注册自己，并周期性的向追踪器通知。追踪器追踪洪流中的对等方。</p><p>请求什么？</p><p>使用最稀缺优先，最稀缺的块就是在对等方中副本数量最少的块，首先请求哪些最稀缺的块。</p><p>给谁发送？</p><p>对于能够以高速率提供数据的对等方，给出优先权。每十秒，重新计算接受数据的速率，确定4个高速率对等方。每30秒会随机选另外一个对等方发送块。除了这5个对等方(4个优先方和1个试探方)，其他对等方均被阻塞。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ComputerNetworking</title>
      <link href="/2020/12/10/computernetworking/"/>
      <url>/2020/12/10/computernetworking/</url>
      
        <content type="html"><![CDATA[<h2 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h2><ol><li><p>计算机网络模型</p><ul><li><p>五层因特网模型</p><ul><li><p>应用层</p></li><li><p>运输层</p><p>重要设备：网关</p><p>主要协议：UDP和TCP</p></li><li><p>网络层</p><p>重要设备：路由器</p><p>主要协议：IP、ICMP、ARP、RAPP</p></li><li><p>链路层</p><p>重要设备：网桥和交换机</p></li><li><p>物理层</p></li></ul></li><li><p>OSI七层模型</p><ul><li>应用层：是用户与网络的接口</li><li>表示层：表示层处理流经结点的数据编码的表示方式问题，以保证一个系统应用层发出的信息可被另一系统的应用层读出</li><li>会话层：会话层主要功能是管理和协调不同主机上各种进程之间的通信（对话），即负责建立、管理和终止应用程序之间的会话</li><li>运输层：传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题</li><li>网络层：网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。网络层将数据链路层提供的帧组成数据包</li><li>链路层：数据链路层是为网络层提供服务的，解决两个相邻结点之间的通信问题</li><li>物理层：它利用传输介质为数据链路层提供物理连接</li></ul></li></ul></li></ol><h2 id="三、运输层"><a href="#三、运输层" class="headerlink" title="三、运输层"></a>三、运输层</h2><ol start="3"><li><p>UDP和TCP区别</p><ul><li>TCP面向连接，UDP无连接</li><li>TCP传输更加可靠，但UDP传输更快</li><li>TCP是点对点，UDP可以一对多</li></ul></li><li><p>TCP保证可靠传输的机制</p><ul><li>确认机制</li><li>重传机制</li><li>滑动窗口</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-IO</title>
      <link href="/2020/07/30/java4/"/>
      <url>/2020/07/30/java4/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="数据单位"><a href="#数据单位" class="headerlink" title="数据单位"></a>数据单位</h4><ul><li><p>位，Bit，位是最小的存储单位，每个位存储一个二进制码。数值取0，1</p></li><li><p>字节，byte,八个位组成一个字节，计算机中数据处理的基本单位</p></li><li><p>字，Word，代表计算机处理指令或数据的二进制数位数，是计算机进行数据存储和数据处理的运算的单位。</p><p>对于32位计算机与64位计算机，字的大小往往不同。32位 计算机：1字=32位=4字节，64位计算机：1字=64位=8字节</p></li><li><p>字符</p><ul><li><p> ASCIIS码</p></li><li><p>1个英文字母（不分大小写）= 1个字节的空间</p></li><li><p>1个中文汉字 = 2个字节的空间</p></li><li><p>1个ASCII码 = 一个字节</p></li><li><p>UTF-8编码</p><ul><li>1个英文字符 = 1个字节</li><li>英文标点 = 1个字节</li><li>1个中文（含繁体） = 3个字节</li><li>中文标点 = 3个字节</li></ul></li><li><p>Unicode编码</p><ul><li>1个英文字符 = 2个字节</li><li>英文标点 = 2个字节</li><li>1个中文（含繁体） = 2个字节</li><li>中文标点 = 2个字节</li></ul></li><li><p>GBK</p><ul><li>中文2个字节</li><li>英文1个字节</li></ul></li></ul></li></ul><h3 id="一、IO"><a href="#一、IO" class="headerlink" title="一、IO"></a>一、IO</h3><h4 id="1-1-IO流定义"><a href="#1-1-IO流定义" class="headerlink" title="1.1.IO流定义"></a>1.1.IO流定义</h4><ul><li><p>I : Input；O : Output；通过IO可以完成硬盘文件的读和写。</p><img src="/2020/07/30/java4/IO.png" class=""></li></ul><h4 id="1-2-IO流的分类"><a href="#1-2-IO流的分类" class="headerlink" title="1.2.IO流的分类"></a>1.2.IO流的分类</h4><ul><li><p>按照流的方向进行分类：</p><ul><li><p>以内存作为参照物，往内存中去，叫做输入(Input)。或者叫做读(Read)。</p></li><li><p>从内存中出来，叫做输出(Output)。或者叫做写(Write)。</p><img src="/2020/07/30/java4/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81.png" class=""></li></ul></li><li><p>按照读取数据方式不同进行分类：</p><ul><li><p>按照字节的方式读取数据，一次读取1个字节byte，等同于一次读取8个二进制位。这种流是万能的，什么类型的文件都可以读取。包括：文本文件，图片，声音文件，视频文件等….</p></li><li><p>按照字符的方式读取数据的，一次读取一个字符，这种流是为了方便读取普通文本文件而存在的，这种流不能读取：图片、声音、视频等文件。只能读取纯文本文件，连word文件都无法读取。</p></li></ul></li><li><p>综上所述：流的分类    </p><ul><li>输入流、输出流 </li><li>字节流、字符流</li></ul></li><li><p>java-IO</p><ul><li><p>java.io.InputStream  字节输入流</p><img src="/2020/07/30/java4/InputSteam.png" class=""></li><li><p>java.io.OutputStream 字节输出流</p><img src="/2020/07/30/java4/OutputSteam.png" class=""></li><li><p>java.io.Reader    字符输入流</p><img src="/2020/07/30/java4/Reader.png" class=""></li><li><p>java.io.Writer        字符输出流</p><img src="/2020/07/30/java4/Writer.png" class=""></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*所有的流都实现了：java.io.Closeable接口，都是可关闭的，都有close()方法。流相当于内存和硬盘之间的通道，用完之后一定要关闭，不然会耗费(占用)很多资源。所有的输出流都实现了：java.io.Flushable接口，都是可刷新的，都有flush()方法。输出流在最终输出之后，一定要记得flush()刷新表示将通道/管道当中剩余未输出的数据强行输出完。注意：如果没有flush()可能会导致丢失数据。注意：在java中只要“类名”以Stream结尾的都是字节流。以“Reader/Writer”结尾的都是字符流。*/</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">InputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OutputStream</span> <span class="token keyword">implements</span> <span class="token class-name">Closeable</span><span class="token punctuation">,</span> <span class="token class-name">Flushable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*read()和write()执行时都将阻塞，直至字节完全被读入和写出；完成读写后，都应该用close()关闭流；输出流关闭时，还应用flush()方法冲刷；*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="二、常用流"><a href="#二、常用流" class="headerlink" title="二、常用流"></a>二、常用流</h3><h4 id="2-1-文件流"><a href="#2-1-文件流" class="headerlink" title="2.1 文件流"></a>2.1 文件流</h4><img src="/2020/07/30/java4/%E6%96%87%E4%BB%B6%E6%B5%81.png" class=""><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* java.io.FileInputStreamvoid close()  关闭流  int read()    从文件中读取一个字节int read(byte[] b)  从文件中读取数组长度个字节，并返回读取个数int available()  返回文件中未读取的字节个数long skip(long n)  跳过n个字节后继续读取*/</span><span class="token comment">//read()读取一个字节</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis<span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"e://h.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span> i <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"e://h.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">=</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*java.io.FileOutputStream    FileOutputStream(File file, boolean append) true 时，从指定文件的末尾写进    FileOutputStream(File file)  清空指定文件后写进 */</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>“相对路径or绝对路径”<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//写一个数组存字节</span>            bytes <span class="token operator">=</span> <span class="token string">"\n我是中国人"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将字符串转换成数组</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将字节写进</span>            fos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//要刷新</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//java.io.FileReader</span><span class="token class-name">FileReader</span> fr  <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"绝对路径or相对路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 准备一个字符数组</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//java.io.FileWriter</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈"</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">getChars</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"IO(input and output)//test"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fw <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-标准输出流"><a href="#2-2-标准输出流" class="headerlink" title="2.2.标准输出流"></a>2.2.标准输出流</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*标准输出流：java.io.PrintWriterjava.io.PrintStream标准输出流不用关闭*/</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"Thread//test"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//PrintStream(OutputStream out)</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//改变System.out.println()的输出方向</span>            <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>  输出的内容将直接进入指定的路径中        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-数据流"><a href="#2-3-数据流" class="headerlink" title="2.3.数据流"></a>2.3.数据流</h4><img src="/2020/07/30/java4/%E6%95%B0%E6%8D%AE%E6%B5%81.png" class=""><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//数据专属流 可以将数据和数据的类型一并写入文件中，而且此文件只能用DateInputStream 读出</span><span class="token comment">//java.io.DataInputStream</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"Thread//data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b <span class="token operator">=</span>dis<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> s <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> l <span class="token operator">=</span>dis<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> f <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> bn <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>s<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>l<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>f<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>d<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>bn<span class="token operator">+</span><span class="token string">"\n"</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                dis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//java.io.DataOutputStream</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">400L</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">1.0F</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">1.00</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> bn <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">;</span>    <span class="token class-name">DataOutputStream</span> dos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"Thread//data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeFloat</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span>bn<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-转换流"><a href="#2-4-转换流" class="headerlink" title="2.4.转换流"></a>2.4.转换流</h4><img src="/2020/07/30/java4/%E8%BD%AC%E6%8D%A2%E6%B5%81.png" class=""><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*中文乱码问题：读取的文件的保存格式是GBK编码，则读取到的是GBK解码出的内容，而程序是以UTF-8编码的，则会出现乱码。我们通过转换流，可以指定编码方式。 转换流：（将字节流转换成字符流）java.io.InputStreamReaderjava.io.OutputStreamWriter*/</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InputStreamReader</span> inputStreamReader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"e://hh.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//关闭流只需关闭最外层</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">OutputStreamWriter</span> osw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"e://hhh.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            osw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-对象流"><a href="#2-5-对象流" class="headerlink" title="2.5.对象流"></a>2.5.对象流</h4><img src="/2020/07/30/java4/%E5%AF%B9%E8%B1%A1%E6%B5%81.png" class=""><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*序列化和反序列化序列化 (Serialization)是将对象的状态信息转换为可以存储或传输的形式的过程。在序列化期间，对象将其当前状态写入到临时或持久性存储区。以后，可以通过从存储区中读取或反序列化对象的状态，重新创建该对象。序列化主要有两个用途:把对象的字节序列永久保存到硬盘上，通常存放在一个文件中（序列化对象）在网络上传送对象的字节序列（网络传输对象）实际上就是将数据持久化，防止一直存储在内存当中，消耗内存资源。而且序列化后也能更好的便于网络运输何传播序列化：将java对象转换为字节序列反序列化：把字节序列回复为原先的java对象当修改序列化的类后，之前序列化得到的文件将不能被反序列化*/</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vip</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>   <span class="token comment">//必须实现接口，实现此接口后 类会获得 唯一的序列号，才可以被序列化</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>   <span class="token comment">//加 transient 关键字后不能被序列化</span>    <span class="token keyword">public</span> <span class="token class-name">Vip</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Vip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Vip&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span>  <span class="token class-name">ObjectOutputStreamTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"e://Vip.java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Vip</span> vip <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vip</span><span class="token punctuation">(</span><span class="token string">"hhh"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Vip</span> vip2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vip</span><span class="token punctuation">(</span><span class="token string">"jjj"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vip<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>vip2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>vip<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将对象写入</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>vip2<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectInputStreamTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"e://Vip.java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将序列化后的对象文件传入</span>            <span class="token class-name">Object</span> oj <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> oj2 <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>oj<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>oj2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ois <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-包装流"><a href="#2-6-包装流" class="headerlink" title="2.6.包装流"></a>2.6.包装流</h4><p>节点流和包装流</p><ol><li>节点流是底层、低级流，直接跟数据源相接。</li><li>包装流包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方式来完成输入输出。</li><li>包装流对节点流进行包装，使用了修饰器设计模式，不会直接与数据源相连。</li></ol><img src="/2020/07/30/java4/%E5%8C%85%E8%A3%85%E6%B5%81.png" class=""><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">/*包装流专属：    java.io.BufferedReader         BufferedReader(Reader in)java.io.BufferedWriter         BufferedWriter(Writer out)java.io.BufferedInputStream    BufferedInputStream(InputStream in)java.io.BufferedOutputStream    BufferedOutputStream(OutputStream out)*/</span><span class="token comment">//当一个流的构造方法需要传入一个流，那么传入的流叫做节点流，外面的流叫做包装流</span>        <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedReader</span> br <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"路径"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token operator">=</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">// 以字符串的形式输出文件的一行；当文本读完会返回null</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span><span class="token punctuation">&#123;</span>                       <span class="token comment">//关闭流的时候不用关闭节点流，在关闭包装流的时候节点流也会关闭</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>br <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.7. Properties</p><pre class="line-numbers language-none"><code class="language-none">5.IO + Properties联合使用。*** 改进 配置文件解除固定化，看reflect的相关内容Properties：用来读取配置文件，程序中一些代码需要时常改变，我们通常将其写入配置文件中，通过修改配置文件来达到修改代码的目的；Properties:是一个Map集合，key和value都是String类型。写配置文件时，要采用键值对的方式写IO流：文件的读和写public static void main(String[] args) &#123;        FileInputStream fis &#x3D; null;        try &#123;            fis &#x3D; new FileInputStream(&quot;Thread&#x2F;&#x2F;src&#x2F;&#x2F;text&quot;);        &#125; catch (FileNotFoundException e) &#123;            e.printStackTrace();        &#125;        Properties p &#x3D; new Properties();        try &#123;            p.load(fis);  &#x2F;&#x2F;调用load方法 传入一个输入流，就会将 &#x3D; 左边传入key &#x3D; 右边传入value            String s &#x3D; p.getProperty(&quot;hhh&quot;);  通过传入配置文件中，key关键字，来获得value            System.out.println(s);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;finally&#123;            if (fis !&#x3D; null) &#123;                try &#123;                    fis.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、FIie"><a href="#三、FIie" class="headerlink" title="三、FIie"></a>三、FIie</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*读取文件、生成文件、删除文件、修改文件的属性时经常会用到的本类，通过File对象可以访问文件的属性。*/</span><span class="token comment">/*构造方法    File(File parent, String child)  从父抽象路径名和子路径名字符串创建新的 File实例。    File(String pathname)  通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。     File(String parent, String child)  从父路径名字符串和子路径名字符串创建新的 File实例。     File(URI uri)  通过将给定的 file: URI转换为抽象路径名来创建新的 File实例。 */</span><span class="token comment">/*常用方法    boolean isDirectory()  判断是否为目录    boolean isFile() 判断是否为文件    boolean exists()  判断目录是否存在    boolean createNewFile()  创造一个新文件    boolean mkdir()  创建一个新目录    boolean mkdirs() 创建新目录及其父目录    String getParent()  以字符串形式返回父路径    File getParentFIle() 以文件形式返回父路径    File getAbsoluteFile()   获得绝对路径    String getAbsolutePath()    String getName()  返回该路径的文件或者目录    long length()  返回该路径的文件得大小    String[] list()  返回一个字符串数组，获得该路径下的所有子文件    File[] listFiles()  返回file数组，获得该路径下的所有子文件*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注释的分类</p><p>单行注释 //</p><p>多行注释 /**/</p><p>文档注释 /** */</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-线程</title>
      <link href="/2020/07/20/java3/"/>
      <url>/2020/07/20/java3/</url>
      
        <content type="html"><![CDATA[<h3 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h3><h4 id="1-线程的特性"><a href="#1-线程的特性" class="headerlink" title="1.线程的特性"></a>1.线程的特性</h4><ul><li>原子性:所有操作要不全部成功要不全部失败</li><li>可见性：在一个线程上对变量的修改，立即能在另一个线程上可见</li><li>有序行：每个线程的代码都是按顺序执行的</li></ul><h4 id="2-并行，并发，串行"><a href="#2-并行，并发，串行" class="headerlink" title="2.并行，并发，串行"></a>2.并行，并发，串行</h4><ul><li>并行：多个CPU处理多个任务，真正意义上的同时进行</li></ul><ul><li>并发：多个任务在同一CPU上按时间片交替一次进行，逻辑上是同时进行</li></ul><ul><li>串行：多个任务在CPU上按照顺序一次执行</li></ul><h4 id="3-线程和进程"><a href="#3-线程和进程" class="headerlink" title="3.线程和进程"></a>3.线程和进程</h4><ul><li>进程是系统资源分配的单位，而线程是任务调度器的单位</li></ul><ul><li>一个进程至少包含一个线程，也可包含多个进程</li></ul><ul><li>多个进程之间的资源分配互不影响，同一进程的多个线程之间相互影响</li></ul><h4 id="4-上下文切换"><a href="#4-上下文切换" class="headerlink" title="4.上下文切换"></a>4.上下文切换</h4><ul><li>一个进程在CPU上时间片用完进入就绪状态，由另一个线程执行，是一次上下文切换 </li></ul><h3 id="二、线程"><a href="#二、线程" class="headerlink" title="二、线程"></a>二、线程</h3><h4 id="2-1-线程对象的状态"><a href="#2-1-线程对象的状态" class="headerlink" title="2.1.线程对象的状态"></a>2.1.线程对象的状态</h4><ul><li>新建状态 线程还没开始运行</li><li>就绪状态 争夺时间片的状态</li><li>运行状态 线程运行</li><li>阻塞状态/等待状态 线程暂时停止运行，直到线程重新被激活。</li><li>死亡状态 run结束，正常终止。或者出现异常，意外死亡。</li></ul><img src="/2020/07/20/java3/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.png" class=""><img src="/2020/07/20/java3/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%812.png" class=""><h4 id="2-2-实现线程的方法"><a href="#2-2-实现线程的方法" class="headerlink" title="2.2.实现线程的方法"></a>2.2.实现线程的方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第一种 编写一个类继承Thread，重写run方法</span>    <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>         <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token class-name">MyThread</span> mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建一个线程类</span>mt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 开辟一块新的栈空间，并且调用run方法,此时两个栈同时进行，即两个循环同时进行</span><span class="token comment">//第二种 编写一个类实现Runnable接口,可以用匿名内部类的方法实现</span>    <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token class-name">Thread</span> tr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tr<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内部类实现</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第三种 实现Callable接口获得一个FutureTask重写call方法，作为参数传入线程，这种方法可以返回值</span>    <span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//匿名内部类</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Thread</span> th <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futuretask<span class="token punctuation">)</span><span class="token punctuation">;</span>th<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用get方法会得到子线程的返回值，不过这会造成主线程阻塞，必须等到子线程结束得到返回值，主线程才会继续。</span><span class="token comment">/*run() 和 start()start()方法代表开启线程，新建一个线程，线程进入新建状态，调用start()方法，线程进入就绪状态，当分到时间片后，自动调用run()方法执行。单独执行run()方法，相当于将线程当做一个main方法，在此run方法结束之前，其他线程不会执行。start方法执行一次，就可启动线程Runnable与CallableRunnable 接口 run 方法无返回值；Callable 接口 call 方法有返回值，是个泛型，和Future、FutureTask配合可以用来获取异步执行的结果Runnable 接口 run 方法只能抛出运行时异常，且无法捕获处理；Callable 接口 call 方法允许抛出异常，可以获 取异常信息 注：Callalbe接口支持返回执行结果，需要调用FutureTask.get()得到，此方法会阻塞主进程的继续往下执行，如果不调用不会阻塞。Future 和 Futuretask*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-线程的方法"><a href="#2-3-线程的方法" class="headerlink" title="2.3.线程的方法"></a>2.3.线程的方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获得当前线程，在main方法中使用该方法，返回main方法的线程，在其他run方法中使用，返回其他线程</span><span class="token keyword">static</span> <span class="token class-name">Thread</span> <span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得线程名字,通过 thread.getName()调用</span>    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改线程名字   </span><span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token comment">//当前线程进入休眠状态，静态方法，出现在哪个线程里，哪个线程睡眠，进入阻塞状态</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span><span class="token comment">/*sleep()与wait()方法        sleep是Thread的静态方法，wait是Object的方法sleep不会释放锁，而wait会释放锁sleep多用于暂停线程，而wait用于通信交流sleep在时间到会自动苏醒，wait需要notify唤醒*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-中断线程"><a href="#2-4-中断线程" class="headerlink" title="2.4.中断线程"></a>2.4.中断线程</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 请求中断线程</span><span class="token comment">/*调用此方法之后，将会设置该线程的中断状态位，即设置为true，中断的结果是线程死亡、等待新的任务或是继续运行，线程可以自主选择在合适的时候处理该中断请求，也可以不理会该请求，就像这个线程没有被中断一样。线程会不时地检测这个中断标示位，以判断线程是否应该被中断（中断标示值是否为true）。它并不像stop方法那样会中断一个正在运行的线程。 当线程处于阻塞状态时，调用此方法之后，会抛出InterruptedException*/</span><span class="token keyword">void</span> <span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//终止线程的方法</span><span class="token comment">//已过时，不建议使用</span><span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//检测线程是否为中断状态</span><span class="token comment">//判断当前线程是否被中断，断返回true，并且清除中断状态</span><span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//设置标记：给线程类添加一个标识符，通过修改这个标识符，来控制是否终止</span><span class="token keyword">boolean</span> run <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">//当需要关闭时，将run改为false</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>       <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-线程的调度"><a href="#2-5-线程的调度" class="headerlink" title="2.5.线程的调度"></a>2.5.线程的调度</h4><ul><li><p>常见的线程调度模型</p><ul><li>抢占式调度模型：线程的优先级比较高，抢到的CPU时间片的概率就高一些/多一些。</li><li>均分式调度模型：平均分配CPU时间片。每个线程占有的CPU时间片时间长度一样。</li><li>线程有优先级 （最低优先级1；默认优先级是5；最高优先级10）</li><li>线程优先级决定线程抢占cpu时间片的概率，优先级越高，概率越高</li></ul></li><li><p>相关方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获得线程优先级</span><span class="token keyword">int</span> <span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//改变线程优先级</span>    <span class="token keyword">void</span> <span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token keyword">int</span> newPriority<span class="token punctuation">)</span> <span class="token comment">//线程让位:当前正在执行的线程暂停一次(礼让)，允许其他线程执行，不阻塞，线程进入就绪状态，如果没有其他等待执行的线程，这个时候当前线程就会马上恢复执行</span><span class="token comment">//静态方法 暂停线程，使线程回到就绪状态</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//线程合并:调用该方法的线程强制执行完成，其它线程处于阻塞状态，该线程执行完毕，其它线程再执行 </span><span class="token comment">//线程合并并不是两个栈合并到一个栈中，而是两个栈发生等待关系，调用了join()的栈会先执行，其他栈会等待        </span><span class="token comment">//线程对象在其他线程中调用，其他线程进入阻塞状态，执行该线程对象到结束，接着执行其他线程   </span>    <span class="token keyword">void</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-6-线程安全"><a href="#2-6-线程安全" class="headerlink" title="2.6.线程安全"></a>2.6.线程安全</h4><ul><li><p>编程模型</p><ul><li>异步编程模型：各自执行各自的，多线程并发</li><li>同步编程模型：两个线程之间发生了等待关系，必须其中一个执行完毕另一个才可以执行，这就是同步编程模型。</li></ul></li><li><p>多线程不安全：    </p><ul><li>多线程并发 </li><li>有共享数据</li><li> 要修改数据    </li></ul></li><li><p>解决线程安全</p><ul><li>加锁Lock</li><li>同步synchronized</li></ul></li><li><p>synchronized的使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//synchronized的三种写法</span><span class="token comment">//1.同步代码块</span><span class="token comment">//在括号中填的是，共享对象，当线程运行到此处会判断自己是否共享此对象，如果共享且其他线程占用对象锁，需要排队，如果没有则占用对象锁，开始运行，每一个对象都有一个对象锁，一把锁只能一个线程来开</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                      <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//2.同步方法，synchronized 关键字写在实例方法中，那么共享对象自动是this</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//3.在静态方法上使用，那么就会找类锁来执行。对象锁是一个对象一把，类锁只有一把</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>死锁情况</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//出现synchronized()&#123;&#125; 嵌套</span><span class="token comment">// 调用此方法首先锁住 对象Obj1 再锁住obj2 然后执行下面代码，之后结束</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSome begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//调用此方法首先锁住 对象Obj2 再锁住obj1 然后执行下面代码，之后结束</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">others</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"others begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*当两个线程同时执行doSome和others两个方法doSome方法已经锁住 Obj1，线程休息了1秒，此时另一个线程执行了others方法，锁住obj2，接下来doSome需要锁obj2而此时obj2已经在另一个线程被锁住，doSome只有等另一个线程中的others执行完，释放obj2锁，而others要执行完才可以释放obj2锁，那么others要执行完，必须锁住obj1，此时obj1锁在doSome，所以造成了死锁；重要的是 死锁不会报错。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、守护线程"><a href="#三、守护线程" class="headerlink" title="三、守护线程"></a>三、守护线程</h3><h4 id="3-1-守护线程"><a href="#3-1-守护线程" class="headerlink" title="3.1.守护线程"></a>3.1.守护线程</h4><ul><li>java语言中线程分为两大类：<ul><li>用户线程 主线程main方法是一个用户线程</li><li>守护线程（后台线程）其中具有代表性的就是：垃圾回收线程（守护线程）</li></ul></li></ul><h3 id="四、生产者和消费者模式"><a href="#四、生产者和消费者模式" class="headerlink" title="四、生产者和消费者模式"></a>四、生产者和消费者模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*生产线程负责生产，消费线程负责销售，两个线程要达到平衡；通过wait和notify方法是Object的方法；要实现线程同步wait()使正在某对象上活跃的线程进入等待，并释放掉对象锁notify()使等待某状态的线程重新进入就绪状态，但不会释放被占用的对象锁；*/</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaitAndNotify</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> th1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">MT01</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> th2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">MT02</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> MT01 <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MT01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">MT01</span><span class="token punctuation">(</span><span class="token class-name">List</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"生产了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> MT02 <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MT02</span><span class="token punctuation">(</span><span class="token class-name">List</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">MT02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"消费了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-异常</title>
      <link href="/2020/07/10/java2/"/>
      <url>/2020/07/10/java2/</url>
      
        <content type="html"><![CDATA[<h2 id="1、异常的分类"><a href="#1、异常的分类" class="headerlink" title="1、异常的分类"></a>1、异常的分类</h2><img src="/2020/07/10/java2/%E5%BC%82%E5%B8%B8.png" class=""><ul><li>异常可分为可查异常和不可查异常，其中Error和Exception中的 RuntimeException(运行时异常) 是不可查异常；</li></ul><ul><li>Exception的直接子类(除运行时异常)是可查异常，即编译时异常。</li></ul><ul><li>Error通常为JVM异常，多为内部错误和资源耗尽错误。如内存不足，堆栈溢出。</li></ul><ul><li>RuntimeException是程序错误导致的异常</li></ul><ul><li>Exception通常是应用程序本身的问题，可以通过try catch 捕获处理</li></ul><ul><li>编译时异常和运行时异常，都是发生在运 行阶段。编译阶段异常是不会发生的。编译时异常一般发生的概率比较高。运行时异常一般    发生的概率比较低。</li></ul><ul><li>编译时异常又称 受检异常(CheckedException),受控异常</li></ul><ul><li>运行时异常又称 未受检异常(UnCheckedException),非受控异常</li></ul><h2 id="2、异常的处理方式"><a href="#2、异常的处理方式" class="headerlink" title="2、异常的处理方式"></a>2、异常的处理方式</h2><ul><li><p>抛出</p><ul><li><p>throws  用来声明一个方法可能产生的所有异常，不做任何处理而是将异常往上传，谁调用就抛给谁。向调用者抛出异常，调用者必须要处理；当异常抛向main方法必须处理，否则main抛给JVM，程序不能执行。</p></li><li><p>throw  用来抛出一个具体的异常类型。用在方法体内，跟一个异常对象名， 表示抛出异常 ，由方法体内的语句处理，执行throw则一定抛出了某种异常  </p></li><li><p>throws 和 thow 的区别</p><p>throws出现在方法函数头；而throw出现在函数体。throws表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某种异常。</p></li></ul></li><li><p> 捕获</p></li></ul>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>   <span class="token comment">//将要执行的语句放在try中，catch( )中填要捕获的异常引用，&#123; &#125;中写捕获异常之后的操作</span><span class="token comment">//当try语句块中任何代码抛出了异常，则程序将跳过try语句块，执行catch语句的异常处理代码，</span><span class="token comment">//之后执行try，catch语句块后代码</span>    <span class="token comment">//try可以接多个catch，异常由小向大自上而下排列</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、创建一个异常类"><a href="#3、创建一个异常类" class="headerlink" title="3、创建一个异常类"></a>3、创建一个异常类</h2><p>①创建一个类继承Exception ②写出无参和有参构造</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FileException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">FileException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">FileException</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、异常类的常用方法"><a href="#4、异常类的常用方法" class="headerlink" title="4、异常类的常用方法"></a>4、异常类的常用方法</h2><p>①getMessage() 获得异常类对象的详细描述信息</p><p>②getMessage() 获得堆栈轨迹</p><h2 id="5、finally语句块"><a href="#5、finally语句块" class="headerlink" title="5、finally语句块"></a>5、finally语句块</h2><p>①finally语句块 ：放在finally语句块中的语句是必须执行的，即使有异常也会执行</p><p>②finally语句块必须跟try，可以不跟catch</p><p>③return问题，当try中有return语句，finally在return前执行，如果try和catch中都有return，那么finally中的return结 果将覆盖try中return结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>执行结果 ： <span class="token number">30</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> a<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>执行结果：<span class="token number">40</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>④带资源的try语句（主要用于资源的关闭，可以简化在关闭资源时，代码的冗余）</p><p>问题：当在finally语句块中关闭多个资源时，都要捕获异常，造成代码的冗余</p><p>try(资源){ } </p><p>执行此代码块后，资源将自动关闭；其中资源可以填多个，用封号隔开，结束之后都会自动关闭</p><h2 id="6、断言"><a href="#6、断言" class="headerlink" title="6、断言"></a>6、断言</h2><p>断言机制允许在测试期间向代码中插入一些检查语句。当代码发布时，这些语句将会自动移走。</p><pre class="line-numbers language-none"><code class="language-none">格式一：assert 条件；格式二：assert 条件：表达式；当条件结果为false时，则抛出AssertionError异常。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-基础(二)</title>
      <link href="/2020/06/30/java1/"/>
      <url>/2020/06/30/java1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、面向对象"><a href="#一、面向对象" class="headerlink" title="一、面向对象"></a>一、面向对象</h2><h3 id="1-面向对象和面向过程"><a href="#1-面向对象和面向过程" class="headerlink" title="1.面向对象和面向过程"></a>1.面向对象和面向过程</h3><h4 id="1-1-面向过程和面向对象有什么区别？"><a href="#1-1-面向过程和面向对象有什么区别？" class="headerlink" title="1.1.面向过程和面向对象有什么区别？"></a>1.1.面向过程和面向对象有什么区别？</h4><p>从语言方面出发：</p><ul><li>对于C语言来说，是完全面向过程的。</li><li>对于C++语言来说，是一半面向过程，一半是面向对象。（C++是半面向对象的）</li><li>对于Java语言来说，是完全面向对象的。</li></ul><p>面向过程的开发方式：</p><p>注重步骤，注重的是实现这个功能的步骤。面向过程中没有对象的概念。只是实现这个功能的步骤以及因果关系。面向过程缺点是耦合度高，扩展力差。面向过程优点是快速开发，性能好。</p><p>面向对象的开发方式：</p><p>采用面向对象的方式进行开发，更符合人类的思维方式。（面向对象成为主流的原因）人类就是以“对象”的方式去认识世界的。所以面向对象更容易让我们接受。</p><p>​    采用面向对象的方式进行开发：耦合度低，扩展力强。但相对面向过程，性能较差</p><p>​    面向过程主要关注的是：实现步骤以及整个过程。</p><p>​    面向对象主要关注的是：对象A，对象B，对象C，然后对象ABC组合，或者CBA组合…..</p><h3 id="2-类和对象"><a href="#2-类和对象" class="headerlink" title="2.类和对象"></a>2.类和对象</h3><h4 id="2-1-类"><a href="#2-1-类" class="headerlink" title="2.1.类"></a>2.1.类</h4><p>类是一个抽象的概念。是一个模板。是进行“思考、总结、抽象”的一个结果。类本质上是现实世界当中某些事物具有共同特征，将这些共同特征提取出来形成的概念就是一个“类”，“类”就是一个模板。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">语法格式<span class="token operator">:</span><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> <span class="token keyword">class</span> 类名 <span class="token punctuation">&#123;</span>  （修饰符列表可以省略。）           <span class="token comment">//类体 = 属性 + 方法(属性在代码上以“变量”的形式存在（描述状态）；方法描述动作/行为)</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-1-1类-属性-代表对象的状态"><a href="#2-1-1类-属性-代表对象的状态" class="headerlink" title="2.1.1类.属性 代表对象的状态"></a>2.1.1类.属性 代表对象的状态</h5><ul><li><p>①属性是以变量的形式存在，属性就是变量。</p></li><li><p>②属性的分类：静态域(静态全局变量)和实例域(动态实例变量）</p></li><li><p>③域通常要用private修饰 ; 常量  public static final </p></li><li><p>④域的初始化</p><ul><li>构造方法初始化; （数值为0  布尔类型为false  引用为null）</li><li>在声明时初始化;</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//初始化块：只要构造对象就会初始化（静态初始化块，对象初始化块）</span><span class="token comment">//static静态代码块</span><span class="token keyword">static</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//非静态代码块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>局部变量和成员变量区别</p><ul><li>声明位置</li><li>存储位置</li><li>初始值</li><li>声明周期</li><li>作用域</li></ul></li><li><p>静态变量与实例变量</p><ul><li>存储位置和存储次数，静态变量存储在静态区，只在类加载时分配一次内存，</li><li>实例变量在堆中，创建对象时就会分配内存</li><li>作用域 静态变量在所有对象中均相等，实例变量不同对象有自己的值</li></ul></li><li><p> final</p></li></ul><p>  ​    final修饰类   类不能被继承</p><p>  ​    final修饰方法  父类的方法不能被子类重写</p><p>  ​    final修饰变量  变量只能赋值一次，赋值后不能改变</p><h5 id="2-1-2类-方法-可以执行的动作"><a href="#2-1-2类-方法-可以执行的动作" class="headerlink" title="2.1.2类.方法 可以执行的动作"></a>2.1.2类.方法 可以执行的动作</h5><ul><li><p>①方法概念：方法是一段可以完成某个特定功能的并且可以被重复利用的代码片段。方法的出现，让代码具有了很强的复用性</p></li><li><p>②方法定义</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> 返回值类型 方法名<span class="token punctuation">(</span>形式参数列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>方法体<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">/*修饰符列表:  访问权限  同类  同包  不同包,子类  不同包,非子类  public    ∨    ∨     ∨           ∨  protect   ∨    ∨     ∨           ×  default   ∨    ∨     ×            ×  private   ∨    ×      ×            × 关于返回值：第一：返回值一般指的是一个方法执行结束之后的结果(一般都为数据)。数据得有类型。这就是返回值类型。第二：返回值类型可以是任何类型，java中合法的数据类型都可，数据类型包括基本数据类型和引用数据类型。第三：当一个方法执行结束不返回任何值的时候，返回值类型也不能空白，必须写上void关键字。如果返回值类型是void，在方法体当中          不能有“return + 值;”语句。但可有“return;”语句。语句“return;”是用来终止当前方法的。第四：返回值类型“不是void”，在方法体执行结束的时候必须使用"return 值;"没有“return 值;” 第五：只要有“return”关键字的语句执行，当前方法必然结束。return只要执行，当前所在的方法结束。       形参列表(简称：形参)形式参数列表中的每一个参数都是“局部变量”，方法结束之后内存释放。形参和实参：调用方法传入的是实参，传入方法中变为形参，方法中使用的是形参    显式参数，就是平时见到的在方法名括号中间的参数，就是所谓能看得见的参数。    隐式参数，是在类的方法中调用了类的实例域。这个被调用的实例域就是隐式参数。方法体由Java语句构成。java语句以“;”结尾。方法体当中编写的是业务逻辑代码，完成某个特定功能。在方法体中的代码遵循自上而下的顺序依次逐行执行。在方法体中处理业务逻辑代码的时候需要数据，数据来源就是这些形参。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 按值调用和按引用调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法可以改变传递引用所对应的变量值；不能修改传递值对应的变量值。java中采用按值调用。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tripleValue</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/06/30/java1/%E5%80%BC%E4%BC%A0%E9%80%92.png" class=""><pre class="line-numbers language-none"><code class="language-none">public class Employee&#123;    public int salary;&#125;public static void tripleValue(Employee e)&#123;    e.salary &#x3D; e.salary * 3;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2020/06/30/java1/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92.png" class=""></li><li><p>③方法的分类</p><ul><li>static修饰的方法是静态方法，通过类名来调用，也可用引用来调用，但一般不用。静态方法中无法使用实例变量</li><li> 实例方法：通过引用来调用</li><li>构造方法(分为无参构造和有参构造)</li><li>无参构造  (缺省构造器)：当一个类中没有提供任何构造方法，系统默认提供一个无参数的构造方法。</li><li>当一个类中提供了构造方法，系统将不再默认提供无参数构造方法。建议提供无参构造   </li></ul></li><li><p> ④方法重载overload 构成方法重载的条件：</p></li></ul><p>  条件1：在同一个类当中；条件2：方法名相同；条件3：形式参数列表不同（类型、个数、顺序）</p><p>  方法名和形参列表组成方法签名； 方法重载和返回值类型无关，和修饰符列表无关。</p><ul><li><p>⑤this关键字</p><p>this是一个关键字，是一个引用，保存内存地址指向自身。</p><p>this可以使用在实例方法中，也可以使用在构造方法中。this出现在实例方法中其实代表的是当前对象。</p><p>this.大部分情况下可以省略，但是用来区分局部变量和实例变量的时候不能省略。</p><p>this()这种语法只能出现在构造方法第一行，表示当前构造方法调用本类其他的构造方法，目的是代码复用。</p></li><li><p>静态方法和实例方法</p><p>静态方法内只可访问静态变量和方法，实例方法无此限制</p></li></ul><h5 id="2-1-3类与类的关系"><a href="#2-1-3类与类的关系" class="headerlink" title="2.1.3类与类的关系"></a>2.1.3类与类的关系</h5><p>​    uses-a  依赖，通过一个类的方法可以访问另一个类</p><p>​    has-a   聚合，类A包含类B</p><p>​    is-a    继承，is a 是单向的</p><p>​    like a   接口</p><h4 id="2-2-对象"><a href="#2-2-对象" class="headerlink" title="2.2.对象"></a>2.2.对象</h4><p>&lt;1对象的定义：对象就是通过类创建出的个体。对象是实际存在的个体。（真实存在的个体）</p><p>&lt;2对象的创建：在java语言中，要想得到“对象”，必须先定义“类”，“对象”是通过“类”这个模板创造出来的。</p><h4 id="2-3-包"><a href="#2-3-包" class="headerlink" title="2.3.包"></a>2.3.包</h4><h5 id="2-3-1-import"><a href="#2-3-1-import" class="headerlink" title="2.3.1.import"></a>2.3.1.import</h5><ul><li>导入类：import  java.util.Date</li><li>导入包：import  java.util.*</li><li>导入静态方法：import static java.lang.System</li><li>导入静态域：import static java.lang.System.out</li><li>import 放在源文件开头(但在package后面)</li></ul><h5 id="2-3-2-package"><a href="#2-3-2-package" class="headerlink" title="2.3.2.package"></a>2.3.2.package</h5><ul><li>package com.xxx.xx 将一个类放进包中</li><li>package放在源文件的开头</li></ul><h3 id="3-面向对象包括三大特征"><a href="#3-面向对象包括三大特征" class="headerlink" title="3.面向对象包括三大特征"></a>3.面向对象包括三大特征</h3><h4 id="3-1-封装"><a href="#3-1-封装" class="headerlink" title="3.1.封装"></a>3.1.封装</h4><p>将属性私有化，并提供外界访问的方法</p><h5 id="3-1-1封装的作用"><a href="#3-1-1封装的作用" class="headerlink" title="3.1.1封装的作用"></a>3.1.1封装的作用</h5><ol><li>第一个作用：保证内部结构的安全。</li><li>第二个作用：屏蔽复杂，暴露简单。    </li></ol><h5 id="3-1-2怎么进行封装"><a href="#3-1-2怎么进行封装" class="headerlink" title="3.1.2怎么进行封装"></a>3.1.2怎么进行封装</h5><p>封装的代码实现两步：</p><ul><li>第一步：属性私有化</li><li>第二步：1个属性对外提供两个set和get方法(访问器和更改器)。外部程序只能通过set方法修改，只能通过get方法读取，可以在set方法中设立关卡来保证数据的安全性。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">set和get方法都是实例方法，不能带<span class="token keyword">static</span>。不带<span class="token keyword">static</span>的方法称为实例方法，实例方法的调用必须先<span class="token keyword">new</span>对象。set和get方法写的时候有严格的规范要求： <span class="token keyword">public</span> <span class="token keyword">void</span> set<span class="token operator">+</span>属性名首字母大写<span class="token punctuation">(</span><span class="token number">1</span>个参数<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> xxx <span class="token operator">=</span> <span class="token number">1</span>个参数<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> 返回值类型 get<span class="token operator">+</span>属性名首字母大写<span class="token punctuation">(</span>无参<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> xxx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>***** clone() 方法</p><p>​    不要编写返回引用可变对象的访问器方法；例如:Date 类 setTime() 方法 可以改变对象对此，要调用clone() 方法</p><h4 id="3-2-继承"><a href="#3-2-继承" class="headerlink" title="3.2.继承"></a>3.2.继承</h4><h5 id="3-2-1继承的作用："><a href="#3-2-1继承的作用：" class="headerlink" title="3.2.1继承的作用："></a>3.2.1继承的作用：</h5><p>​    基本作用：子类继承父类，代码可以得到复用。</p><p>​    主要(重要)作用：有了继承关系，才有了方法覆盖和多态机制。</p><h5 id="3-2-2继承的相关特性"><a href="#3-2-2继承的相关特性" class="headerlink" title="3.2.2继承的相关特性"></a>3.2.2继承的相关特性</h5><ul><li>① B类继承A类，则称A类为超类(superclass)、父类、基类，B类则称为子类(subclass)、派生类、扩展类。</li><li>② java 中的继承只支持单继承，不支持多继承，(class B extends A,C{ } 这是错误的),C++中支持多继承，虽然 java 中不支持多继承，但有的时候会产生间接继承的效果，形成继承链。</li><li>③java 中规定，子类继承父类，除构造方法不能继承之外，剩下都可以继承。但是私有的属性无法在子类中直接访问。(父类中private修饰的不能在子类中直接访问。可以通过间接的手段来访问。)根据修饰符的权限范围，public和protected修饰的属性和方法，子类可完全继承；当无修饰时，同包内的子类可继承，不同包的子类不可继承，private修饰的子类均不能继承；构造函数不能继承，但子类对象在new时，在调用子类的构造函数时，会通过super执行父类的构造函数，直至连锁到Object类</li><li>④java中的类默认继承Object类，Object类是 java 语言提供的根类，一个对象有Object类型中所有的特征。</li><li>⑤继承也存在一些缺点，会导致它们之间的耦合度非常高. </li></ul><h5 id="3-2-3继承的使用"><a href="#3-2-3继承的使用" class="headerlink" title="3.2.3继承的使用"></a>3.2.3继承的使用</h5><ul><li>①子类继承了父类之后，父类中的方法就属于子类了，可以使用子类对象来调用。</li><li>②在实际开发中， 凡是采用“is a”能描述的，都可以继承。例如：Cat is a Animal：猫是一个动物</li><li>当某个类比其父类更具有意义时使用继承;程序代码应该被基本类型所共享时，应该使用继承</li></ul><h5 id="3-2-4方法覆盖"><a href="#3-2-4方法覆盖" class="headerlink" title="3.2.4方法覆盖"></a>3.2.4方法覆盖</h5><ol><li><p>使用方法覆盖:父类中的方法无法满足子类的业务需求，子类有必要对继承过来的方法进行覆盖。</p></li><li><p>什么条件满足的时候构成方法覆盖？</p><p>第一：有继承关系的两个类</p><p>第二：具有相同方法名、返回值类型、形式参数列表（方法名和形式参数列表是一个方法的签名）对于返回值类型是基本数据类型来说，必须一致。对于返回值类型是引用数据类型来说，重写之后返回值类型可以变的更小（但意义不大）。</p><p>第三：访问权限不能更低。(如父类方法是public，子类覆盖时访问权限不能低于public)</p><p>第四：抛出异常不能更多。(父类方法不抛出异常，子类覆盖时不能抛出异常)</p></li><li><p>方法重载和方法覆盖有什么区别？</p><p>方法重载发生在同一个类当中，方法名相同，参数列表不同。</p><p>方法覆盖是发生在具有继承关系的父子类之间。重写之后的方法必须和之前的方法一致：</p><p>方法名一致、参数列表一致、返回值类型一致。</p></li><li><p>私有方法无法覆盖。方法覆盖只是针对于“实例方法”，“静态方法覆盖”没有意义。（这是因为方法覆盖通常和多态联合起来）总结两句话：私有不能覆盖。静态不谈覆盖。</p></li></ol><h5 id="3-2-5-super关键字"><a href="#3-2-5-super关键字" class="headerlink" title="3.2.5.super关键字"></a>3.2.5.super关键字</h5><p>&lt;1 super关键字代表的就是“当前对象”的那部分父类型特征。</p><p>&lt;2 super能出现在实例方法(super.)和构造方法中(super()),super不能使用在静态方法中。</p><p>&lt;3 super. 大部分情况下是可以省略的。</p><p> super. 不能省略：父类和子类中有同名属性，或同样的方法，如果要在子类中访问“父类的特征”，super. 不能省略。</p><p>&lt;4 super() 只能出现在构造方法第一行，通过当前的构造方法去调用“父类”中的构造方法.</p><p>当一个构造方法第一行：既没有this()又没有super()的话，默认会有一个super();</p><p>表示通过当前子类的构造方法调用父类的无参数构造方法。所以必须保证父类的无参数构造方法是存在的。</p><p>this()和super() 不能共存，它们都是只能出现在构造方法第一行。</p><p>​    super的使用：</p><p>​         super.属性名    【访问父类的属性】</p><p>​        super.方法名(实参)    【访问父类的方法】</p><p>​        super(实参)        【调用父类的构造方法】</p><h4 id="3-3-多态"><a href="#3-3-多态" class="headerlink" title="3.3.多态"></a>3.3.多态</h4><p>将父对象赋值成为与其子对象相等的状态，父对象根据赋值子对象的特性运行。</p><h5 id="3-3-1向上转型和向下转型的概念。"><a href="#3-3-1向上转型和向下转型的概念。" class="headerlink" title="3.3.1向上转型和向下转型的概念。"></a>3.3.1向上转型和向下转型的概念。</h5><ul><li><p>向上转型：子—&gt;父 (upcasting)，又被称为自动类型转换</p></li><li><p>向下转型：父—&gt;子 (downcasting)，又被称为强制类型转换：Cat c = (Cat)a; 需要添加强制类型转换符即()。</p></li><li><p>什么时候需要向下转型？</p><p>需要调用或者执行子类对象中特有的方法。必须进行向下转型，才可以调用。</p><p>向下转型有风险:容易出现ClassCastException（类型转换异常）</p><p>为避免风险：instanceof运算符，可以在程序运行阶段动态的判断某个引用指向的对象是否为某一种类型。</p><p>不管是向上转型还是向下转型，首先他们之间必须有继承关系。</p></li></ul><h5 id="3-3-2多态的概念。"><a href="#3-3-2多态的概念。" class="headerlink" title="3.3.2多态的概念。"></a>3.3.2多态的概念。</h5><p>多种形态，多种状态，编译和运行有两个不同的状态。</p><p>Animal a = new Cat();</p><p>​        编译期叫做静态绑定。编译时编译器发现a的类型是Animal，编译器会去Animal类中找方法，绑定，编译通过。</p><p>​        运行期叫做动态绑定。真正执行的时候会自动调用“堆内存中真实对象”的相关方法。a.move();</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"wangwang,run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//采用 父类引用 a = new 子类对象; a.方法只能调用父类中有的方法；</span><span class="token comment">//a.run()可以；a.eat不可以</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3-3多态在开发中的作用是："><a href="#3-3-3多态在开发中的作用是：" class="headerlink" title="3.3.3多态在开发中的作用是："></a>3.3.3多态在开发中的作用是：</h5><p>降低程序的耦合度，提高程序的扩展力。这里提到了一个软件开发原则：七大原则最基本的原则：OCP（对扩展开放，对修改关闭）目的是：降低程序耦合度，提高程序扩展力。面向抽象编程，不建议面向具体编程。</p><h3 id="4-抽象类和接口"><a href="#4-抽象类和接口" class="headerlink" title="4.抽象类和接口"></a>4.抽象类和接口</h3><h4 id="4-1-抽象类"><a href="#4-1-抽象类" class="headerlink" title="4.1.抽象类"></a>4.1.抽象类</h4><ul><li><p>① 抽象类 的定义：类和类之间具有共同特征，将这些共同特征提取出来，形成的就是抽象类。</p></li><li><p>②抽象类是引用数据类型，是无法实例化的，无法创建对象的，但抽象类有构造方法，是供子类使用的。抽象类是用来被子类继承的。抽象类的子类可以是抽象类。也可以是非抽象类（非抽象类继承抽象类，必将抽象类中的抽象方法实现了）。</p></li><li><p>③抽象类语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> 类名<span class="token punctuation">&#123;</span>类体<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>抽象类的作用：降低实现接口实现类在实现过程中的难度，在实现接口时，有些方法用不到，可以写一个抽象类对用不到的方法进行空白重写处理。</p></li><li><p>抽象方法</p><ul><li>①抽象方法表示没有实现的方法，没有方法体的方法。例如：public abstract void doSome();</li><li>②抽象方法特点是：没有方法体，以分号结尾。前面修饰符列表中有abstract关键字。</li><li>③抽象类中不一定有抽象方法，抽象方法必须出现在抽象类中。抽象类中可以有非抽象方法。</li><li>④抽象方法在子类中实现，如果子类不是抽象类 ，则必须实现抽象父类的所有抽象方法，若子类是抽象类则可以部分或不实现抽象方法，所以可以以抽象类实现抽象父类，以减少非抽象子类的实现压力。</li></ul></li></ul><h4 id="4-2-接口"><a href="#4-2-接口" class="headerlink" title="4.2.接口"></a>4.2.接口</h4><ul><li><p>接口也是一种“引用数据类型”。接口是完全抽象的。（抽象类是半抽象。）或者也可以说接口是特殊的抽象类。</p></li><li><p>接口语法：接口中只包含两部分内容，一部分是：常量，一部分是：抽象方法；（接口中的方法不能有方法体）</p></li><li><p>接口中所有的元素都是public修饰的。（都是公开的。）接口中的抽象方法定义时：public abstract修饰符可以省略。在实现接口时，方法的实现必须为public，不可省略接口中的常量的public static final可以省略。</p></li><li><p>接口支持多继承，一个接口可以继承多个接口。</p></li><li><p>接口中的方法也可以有方法体</p><p> 一种是静态方法，意义不大；通常的做法是将静态方法放在伴随类中，如Collection/Collections</p><p> 一种是方法的默认实现，可不再必须覆盖；也可覆盖，不覆盖即按照默认实现。default关键字</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*默认方法冲突第一种情况：超类A和接口B定义相同的方法 C extends A implements B 超类优先第二种情况：接口A和接口B定义相同的方法 C implements A,B两个均为默认方法，报错，需选择实现一个为抽象方法一个为默认方法，报错两个均为抽象方法，不报错，选择实现或不实现均可*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接口的实例化</p><p> 接口变量必须引用实现了接口的类对象。</p><p> 接口可以用匿名内部类的方式实现（抽象类也可以）;</p></li><li><p>当一个非抽象的类实现接口的话，必须将接口中所有的抽象方法全部实现（覆盖、重写）。    </p></li><li><p>接口A和接口B没有继承关系，互转时编译器通过。但是运行时可能出现：ClassCastException；</p></li><li><p>接口与静态方法</p><p> 在标准库中，有很多成对的接口和工具类，通常将静态方法放在工具类中，如 Collection和Collections</p></li><li><p>常见的接口</p><ul><li>Comparator<T>{}       专门写一个类加比较器接口，在此类中书写规则，具体比较时，实例化一个比较器调用compare()方法</li></ul><pre class="line-numbers language-none"><code class="language-none">Comparable&lt;T&gt;&#123;      int compareTo(T o)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>Cloneable</p><p>Cloneable接口是一个标记接口，要实现clone方法，必须实现cloneable接口，否则在调用的时候抛出一个CloneNotSupported-Exception.</p><p>clone是Object的一个protected的方法。所有数组类型都有一个public的clone方法，不是protected.</p></li></ul></li></ul><h4 id="4-3-抽象类和接口有什么区别"><a href="#4-3-抽象类和接口有什么区别" class="headerlink" title="4.3.抽象类和接口有什么区别"></a>4.3.抽象类和接口有什么区别</h4><ul><li>抽象类是半抽象的。接口是完全抽象的。</li><li>抽象类中有构造方法。接口中没有构造方法。</li><li>接口和接口之间支持多继承。类和类之间只能单继承。</li><li>一个类可以同时实现多个接口。一个抽象类只能继承一个类（单继承）。</li><li>接口中只允许出现常量和抽象方法。</li></ul><h4 id="4-4-lambda表达式"><a href="#4-4-lambda表达式" class="headerlink" title="4.4.lambda表达式"></a>4.4.lambda表达式</h4><h5 id="4-4-1-函数式接口"><a href="#4-4-1-函数式接口" class="headerlink" title="4.4.1.函数式接口"></a>4.4.1.函数式接口</h5><p>只有一个抽象方法的接口。@FunctionalInterface用来修饰函数式接口</p><h5 id="4-4-2-语法"><a href="#4-4-2-语法" class="headerlink" title="4.4.2.语法"></a>4.4.2.语法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建不同情况下的接口</span><span class="token comment">/**多参数无返回*/</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">NoReturnMultiParam</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**无参无返回值*/</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">NoReturnNoParam</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**一个参数无返回*/</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">NoReturnOneParam</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**多个参数有返回值*/</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReturnMultiParam</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** 无参有返回*/</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReturnNoParam</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**一个参数有返回值*/</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReturnOneParam</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//语法形式为 () -> &#123;&#125;，其中 () 用来描述参数列表，&#123;&#125; 用来描述方法体，-> 为 lambda运算符 ，读作(goes to)。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//无参无返回</span>        <span class="token class-name">NoReturnNoParam</span> noReturnNoParam <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NoReturnNoParam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        noReturnNoParam<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//一个参数无返回</span>        <span class="token class-name">NoReturnOneParam</span> noReturnOneParam <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NoReturnOneParam param:"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        noReturnOneParam<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//多个参数无返回</span>        <span class="token class-name">NoReturnMultiParam</span> noReturnMultiParam <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NoReturnMultiParam param:"</span> <span class="token operator">+</span> <span class="token string">"&#123;"</span> <span class="token operator">+</span> a <span class="token operator">+</span><span class="token string">","</span> <span class="token operator">+</span> <span class="token operator">+</span> b <span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        noReturnMultiParam<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//无参有返回值</span>        <span class="token class-name">ReturnNoParam</span> returnNoParam <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ReturnNoParam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> returnNoParam<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"return:"</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//一个参数有返回值</span>        <span class="token class-name">ReturnOneParam</span> returnOneParam <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ReturnOneParam param:"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res2 <span class="token operator">=</span> returnOneParam<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"return:"</span> <span class="token operator">+</span> res2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//多个参数有返回值</span>        <span class="token class-name">ReturnMultiParam</span> returnMultiParam <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ReturnMultiParam param:"</span> <span class="token operator">+</span> <span class="token string">"&#123;"</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> b <span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res3 <span class="token operator">=</span> returnMultiParam<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"return:"</span> <span class="token operator">+</span> res3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简化格式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.简化参数类型，可以不写参数类型，但是必须所有参数都不写</span>        <span class="token class-name">NoReturnMultiParam</span> lamdba1 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简化参数类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        lamdba1<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.简化参数小括号，如果只有一个参数则可以省略参数小括号</span>        <span class="token class-name">NoReturnOneParam</span> lambda2 <span class="token operator">=</span> a <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简化参数小括号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        lambda2<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.简化方法体大括号，如果方法条只有一条语句，则可以胜率方法体大括号</span>        <span class="token class-name">NoReturnNoParam</span> lambda3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简化方法体大括号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lambda3<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.如果方法体只有一条语句，并且是 return 语句，则可以省略方法体大括号</span>        <span class="token class-name">ReturnOneParam</span> lambda4 <span class="token operator">=</span> a <span class="token operator">-></span> a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lambda4<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReturnMultiParam</span> lambda5 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lambda5<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用方法：利用 lambda表达式的接口快速指向一个已经被实现的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//语法： 方法归属者::方法名 静态方法的归属者为类名/普通方法归属者为对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exe1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ReturnOneParam</span> lambda1 <span class="token operator">=</span> a <span class="token operator">-></span> <span class="token function">doubleNum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lambda1<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//lambda2 引用了已经实现的 doubleNum 方法</span>        <span class="token class-name">ReturnOneParam</span> lambda2 <span class="token operator">=</span> <span class="token class-name">Exe1</span><span class="token operator">::</span><span class="token function">doubleNum</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lambda2<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Exe1</span> exe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exe1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//lambda4 引用了已经实现的 addTwo 方法</span>        <span class="token class-name">ReturnOneParam</span> lambda4 <span class="token operator">=</span> exe<span class="token operator">::</span><span class="token function">addTwo</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lambda4<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 要求     * 1.参数数量和类型要与接口中定义的一致     * 2.返回值类型要与接口中定义的一致     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">doubleNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造方法的引用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">ItemCreatorBlankConstruct</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Item</span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">ItemCreatorParamContruct</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Item</span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exe2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ItemCreatorBlankConstruct</span> creator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Item</span> item <span class="token operator">=</span> creator<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ItemCreatorBlankConstruct</span> creator2 <span class="token operator">=</span> <span class="token class-name">Item</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">Item</span> item2 <span class="token operator">=</span> creator2<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ItemCreatorParamContruct</span> creator3 <span class="token operator">=</span> <span class="token class-name">Item</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">Item</span> item3 <span class="token operator">=</span> creator3<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">,</span> <span class="token string">"鼠标"</span><span class="token punctuation">,</span> <span class="token number">135.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JDK提供的函数式接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*调用集合的 public void forEach(Consumer&lt;? super E> action) 方法，通过 lambda 表达式的方式遍历集合中的元素。以下是 Consumer 接口的方法以及遍历集合的操作。Consumer 接口是 jdk 为我们提供的一个函数式接口*/</span><span class="token annotation punctuation">@FunctionalInterface</span>   <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>       <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//....</span>   <span class="token punctuation">&#125;</span>     <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//lambda表达式 方法引用</span>     list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>element <span class="token operator">-></span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">/*  通过public boolean removeIf(Predicate&lt;? super E> filter)方法来删除集合中的某个元素，Predicate 也是 jdk 为我们提供的一个函数式接口，可以简化程序的编写 */</span>     <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">"小牙刷"</span><span class="token punctuation">,</span> <span class="token number">12.05</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"日本马桶盖"</span><span class="token punctuation">,</span> <span class="token number">999.05</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"格力空调"</span><span class="token punctuation">,</span> <span class="token number">888.88</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">"肥皂"</span><span class="token punctuation">,</span> <span class="token number">2.00</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"冰箱"</span><span class="token punctuation">,</span> <span class="token number">4200.00</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     items<span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>ele <span class="token operator">-></span> ele<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//通过 foreach 遍历，查看是否已经删除</span>     items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-内部类"><a href="#5-内部类" class="headerlink" title="5.内部类"></a>5.内部类</h3><p>1、内部类的定义：在类的内部又定义了一个新的类。被称为内部类。</p><p>2、内部类的分类：静态内部类，成员内部类，局部内部类，匿名内部类；</p><p>静态内部类：定义在类中的静态类，可以访问外部类的静态属性，通过  外部类.内部类 xx = new 外部类.内部类() 调用</p><p>成员内部类：定义在类中的非静态类，可以访问所用外部类的属性，通过 外部类.内部类 xx = new 外部类对象.内部类()</p><p>局部内部类：定义在外部类方法中的类，跟局部变量一样不能修饰，定义在静态方法中的内部类只可访问静态属性，定义    在实例方法中的可以访问所有属性。</p><p>3、匿名内部类是局部内部类的一种。因为这个类没有名字而得名，叫做匿名内部类。</p><p>类内部不能定义静态属性和方法，方法不能是抽象的，必须实现接口和抽象类的抽象方法，匿名内部类只可访问外部类的</p><p>静态方法和静态属性。</p><p>4、匿名内部类有两个缺点：</p><p>​            缺点1：太复杂，太乱，可读性差。</p><p>​            缺点2：类没有名字，以后想重复使用，不能用。</p><h2 id="二、Object"><a href="#二、Object" class="headerlink" title="二、Object"></a>二、Object</h2><h3 id="1-equals方法"><a href="#1-equals方法" class="headerlink" title="1.equals方法"></a>1.equals方法</h3><p>equals方法检测<strong>一个对象是否等于另一个对象</strong>，Object的默认实现是判断两个对象是否有相同的引用。</p><ul><li> a.equals(b),若a为null，则会出现空指针异常。Objects.equals方法可以解决这个问题。</li></ul><p>  Objects.equals(a,b),ab都为null，返回true;有一个为null，返回false；都不为null，则调用a.equals(b)</p><ul><li><p>equals方法特性 </p><ul><li>自反性:对于任何非空引用x，x.equals(x)应该返回true。</li><li>对称性:对于任何引用x和y，当且仅当y.equals(x)返回true, x.equals(y) 也应该返回true。</li><li>传递性:对于任何引用x、y和z.如果x.equas(y)返回true, y.equals(z) 返回true,x.equals(z)也应该返回true。</li><li>一致性:如果x和y引用的对象没有发生变化，反复调用x.equals(y)应该返回同样的结果。</li><li>对于任意非空引用x，x.equals(null)应该返回false。</li></ul></li><li><p>提出问题：a.equals(b),如果a和b不是同一个类，那么用什么条件判断？</p><p>java重写的equals方法中采用instanceof检测，getClass检测，捕获ClassCastException异常。</p></li></ul><h3 id="2-hashCode方法"><a href="#2-hashCode方法" class="headerlink" title="2.hashCode方法"></a>2.hashCode方法</h3><ul><li>Object类中hashCode的默认实现为对象的储存地址；</li><li>重写equals()方法，就必须重写hashCode()的方法；<ul><li>每个函数都有自己的hash值，通过重写Object的hashcode()函数来获得hash值；官方说明，相同的对象的hash值应该一致，所以在重写equals方法时，应该重写hashcode()方法来对应equals()</li><li>当有 a.equals(b) == true 时，则 a.hashCode() == b.hashCode() 必然成立，</li><li> 反过来，当 a.hashCode() == b.hashCode() 时，a.equals(b) 不一定为 true。</li></ul></li><li>hashCode()由native方法底层实现</li><li>String类的equals( )和hashcode( )方法重写</li></ul><h3 id="3-clone方法"><a href="#3-clone方法" class="headerlink" title="3.clone方法"></a>3.clone方法</h3><p>clone()：克隆会在内存上分配一个与源对象大小相同的内存，然后以源对象的字段填充，返回源对象的克隆体</p><ul><li>深拷贝和浅拷贝,在于对引用类型字段的复制 </li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//浅拷贝</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> s<span class="token punctuation">;</span><span class="token class-name">A</span> a<span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//深拷贝</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> s<span class="token punctuation">;</span><span class="token class-name">A</span> a<span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">C</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">C</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span>a <span class="token operator">=</span> c<span class="token punctuation">.</span>a<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token operator">==</span>b<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false //对象和克隆体地址不同</span>b<span class="token punctuation">.</span>a <span class="token operator">==</span> b<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">//true //浅拷贝所有字段和源对象相同，只进行单纯复制</span><span class="token class-name">C</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span> <span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span>a <span class="token operator">==</span> c<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">//false 深拷贝</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-toString方法"><a href="#4-toString方法" class="headerlink" title="4.toString方法"></a>4.toString方法</h3><p>toString方法主要是用来<strong>标识</strong>该对象的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Address&#123;"</span> <span class="token operator">+</span>            <span class="token string">"provinceNo="</span> <span class="token operator">+</span> provinceNo <span class="token operator">+</span>            <span class="token string">", cityNo="</span> <span class="token operator">+</span> cityNo <span class="token operator">+</span>            <span class="token string">", streetNo="</span> <span class="token operator">+</span> streetNo <span class="token operator">+</span>            <span class="token string">'&#125;'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-notify-和wait"><a href="#5-notify-和wait" class="headerlink" title="5.notify()和wait()"></a>5.notify()和wait()</h3><p>线程相关</p><h3 id="6-finalize"><a href="#6-finalize" class="headerlink" title="6.finalize()"></a>6.finalize()</h3><p>GC，垃圾处理器相关</p><h3 id="7-getClass"><a href="#7-getClass" class="headerlink" title="7.getClass()"></a>7.getClass()</h3><p>获取调用该方法的对象的类</p><h2 id="三、包装类和自动装箱"><a href="#三、包装类和自动装箱" class="headerlink" title="三、包装类和自动装箱"></a>三、包装类和自动装箱</h2><h3 id="1-八大包装类"><a href="#1-八大包装类" class="headerlink" title="1.八大包装类"></a>1.八大包装类</h3><p>八种基本类型都有对应的包装类</p><p>byte-Byte    short-Short    int-Integer    long-Long     Float-Float    double-Double    boolean-Boolean    char-Character</p><img src="/2020/06/30/java1/%E5%8C%85%E8%A3%85%E7%B1%BB.png" class=""><h3 id="2-自动装箱和自动拆箱"><a href="#2-自动装箱和自动拆箱" class="headerlink" title="2.自动装箱和自动拆箱"></a>2.自动装箱和自动拆箱</h3><p>基本类型和包装类型之间的互相自动转换为自动拆装箱；</p><p>Integer的取值范围和int的取值范围一致</p><p>Integer的缓存取值范围是-128-127</p><p>Integer  a = 128, b = 128, c = 127, d = 127;</p><p>a==b false 不在缓存范围内，所以会创建两个新的对象</p><p>c==d true  在缓存范围内，直接从缓存中取相同的对象</p><h2 id="四、常用类和接口"><a href="#四、常用类和接口" class="headerlink" title="四、常用类和接口"></a>四、常用类和接口</h2><h3 id="4-1-String"><a href="#4-1-String" class="headerlink" title="4.1.String"></a>4.1.String</h3><ul><li><p>String、StringBuilder、StringBuffer</p><ul><li>String 是不可变的，其他两种均是可变的</li><li>String和StringBuffer是线程安全的，StringBuffer有同步锁</li><li>a,b,ab String会创建a,b,ab三个 其他两个会对字符串进行操作 a+b=ab</li><li> 当操作量少是用string，单线程大操作用StringBuilder 多线程大操作用StringBuffer</li></ul></li><li><pre><code class="java">//存储在字符串常量池，字符串存储在堆内存上的字符串常量池中，每次创建字符串时都会先到常量池中搜索， 若是有相同内容，则直接返回String a = “ABC” String b = “ABC” //a与b地址相同,若内容相同则不再创建a==b  /true      //存储在堆内存上    String c = new String(“ABC”)  String d = new String(“ABC”) //c和d地址不同,每new一次都会创建c==d  /false      //创建了几个对象？两个，在堆上创建了一次，同时在字符串常量池中也创建了一次String c = new String(“ABC”)</code></pre></li><li><p>char与String的区别</p><ul><li>char代表一个值(ASCII码)，而String代表地址</li></ul></li><li><p> String 具有不变性 ，因为 以  private final char[] 来存储字符串</p></li></ul><h3 id="4-2-枚举"><a href="#4-2-枚举" class="headerlink" title="4.2.枚举"></a>4.2.枚举</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-基础(一)</title>
      <link href="/2020/06/20/java/"/>
      <url>/2020/06/20/java/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h2><h3 id="1-main方法"><a href="#1-main方法" class="headerlink" title="1.main方法"></a>1.main方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/*main()方法必须是public吗？jdk1.4后必须是public*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h3><h4 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1.整型"></a>2.1.整型</h4><img src="/2020/06/20/java/%E6%95%B4%E5%BD%A2.png" class=""><ul><li>整型的范围和运行java代码的机器无关</li><li>0b或0B前缀代表二进制，如0b1001是9；0前缀代表八进制；0x或0X代表十六进制</li></ul><h4 id="2-2-浮点类型"><a href="#2-2-浮点类型" class="headerlink" title="2.2.浮点类型"></a>2.2.浮点类型</h4><img src="/2020/06/20/java/%E6%B5%AE%E7%82%B9.png" class=""><ul><li>float数值有后缀f或F；double数值 后缀为d或D；没有f或F后缀的默认是double类型；</li><li>三个特殊的浮点数值；<ul><li>正无穷大；1/0；常量Double.POSITIVE_INFINITY代表;</li><li>负无穷大；-1/0; 常量Double.NEGATIVE_INFINITY代表;</li><li>NaN,不是一个数字；0/0; 常量Double.NaN代表;</li></ul></li></ul><h4 id="2-3-char和boolean类型"><a href="#2-3-char和boolean类型" class="headerlink" title="2.3.char和boolean类型"></a>2.3.char和boolean类型</h4><ul><li>char字符类型，要用单引号引起来  </li></ul><h3 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3.运算符"></a>3.运算符</h3><h4 id="3-1-浮点数据的精度"><a href="#3-1-浮点数据的精度" class="headerlink" title="3.1. 浮点数据的精度"></a>3.1. 浮点数据的精度</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> w<span class="token operator">=</span>x<span class="token operator">*</span>y<span class="token operator">/</span>z<span class="token punctuation">;</span><span class="token comment">/*不同的计算方式&lt;1.处理器计算x *y,并且将结果存储在80位的寄存器中，再除以z并将结果截断为64位。得到更精确的计算结果，并且还能够避免产生指数溢出。&lt;2.所有的中间计算过程进行截断，使用strictfp关键字标记的方法必须使用严格的浮点计算*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-数值类型的转换"><a href="#3-2-数值类型的转换" class="headerlink" title="3.2.数值类型的转换"></a>3.2.数值类型的转换</h4><ul><li>如果两个操作数中有一个是double类型，另一个操作数就会转换为double类型。</li><li>否则，如果其中一个操作数是float类型，另一个操作数将会转换为float 类型。</li><li>否则，如果其中-个操作数是long类型，另一个操作数将会转换为long类型。</li><li>否则，两个操作数都将被转换为int类型。</li></ul><h4 id="3-3-boolean运算符"><a href="#3-3-boolean运算符" class="headerlink" title="3.3.boolean运算符"></a>3.3.boolean运算符</h4><p>&amp;&amp;、||</p><p>只要“||”前面为false,不管“||”后面是true还是false，都返回“||”后面的值。只要“||”前面为true,不管“||”后面是true还是false，都返回“||”前面的值。</p><p>只要“&amp;&amp;”前面是false，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”前面的值;只要“&amp;&amp;”前面是true，无论“&amp;&amp;”后面是true还是false，结果都将返“&amp;&amp;”后面的值;</p><h4 id="3-4-位运算符"><a href="#3-4-位运算符" class="headerlink" title="3.4.位运算符"></a>3.4.位运算符</h4><p>&amp;、|、^、~、&gt;&gt;、&lt;&lt;</p><p>a&amp;b是把a和b都转换成二进制数然后再进行与的运算</p><img src="/2020/06/20/java/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6.png" class=""><h3 id="4-控制流程"><a href="#4-控制流程" class="headerlink" title="4.控制流程"></a>4.控制流程</h3><h4 id="4-1-if"><a href="#4-1-if" class="headerlink" title="4.1.if"></a>4.1.if</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行代码</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-switch"><a href="#4-2-switch" class="headerlink" title="4.2.switch"></a>4.2.switch</h4><p>switch case语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</p><p>switch case语句中的变量类型可以是：byte、short、int、String</p><p>同时case标签必须为字符串常量或者字面量</p><img src="/2020/06/20/java/Switch.png" class=""><h4 id="4-3-while"><a href="#4-3-while" class="headerlink" title="4.3.while"></a>4.3.while</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//循环内容</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-4-do…while"><a href="#4-4-do…while" class="headerlink" title="4.4.do…while"></a>4.4.do…while</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span><span class="token punctuation">&#123;</span>    <span class="token comment">//循环内容</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-5-for"><a href="#4-5-for" class="headerlink" title="4.5.for"></a>4.5.for</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化；布尔表达式；更新<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-6-中断控制语句"><a href="#4-6-中断控制语句" class="headerlink" title="4.6.中断控制语句"></a>4.6.中断控制语句</h4><ul><li><p>break</p><p>结束循环</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*结果012*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>continue</p><p>结束本次循环，执行下次循环</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*结果0124*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带标签的break和continue</p><ul><li>带标签的break：结束带有标签的外层循环，标签写在希望要结束的外层循环前，且必须带冒号；</li><li>带标签的continue：结束本次循环，跳到与标签匹配的循环首部</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>           <span class="token keyword">break</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>     x<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*结果01220121*/</span><span class="token comment">//带标号的break </span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>a<span class="token operator">:</span><span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">break</span> a<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    x<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*结果012*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
