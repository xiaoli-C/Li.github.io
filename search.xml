<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java5</title>
      <link href="/2021/10/23/java5/"/>
      <url>/2021/10/23/java5/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java4</title>
      <link href="/2021/10/23/java4/"/>
      <url>/2021/10/23/java4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linuxanzhuang</title>
      <link href="/2021/10/09/linuxanzhuang/"/>
      <url>/2021/10/09/linuxanzhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟机安装JDK"><a href="#虚拟机安装JDK" class="headerlink" title="虚拟机安装JDK"></a>虚拟机安装JDK</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql3</title>
      <link href="/2021/10/07/mysql3/"/>
      <url>/2021/10/07/mysql3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库储存引擎"><a href="#一、数据库储存引擎" class="headerlink" title="一、数据库储存引擎"></a>一、数据库储存引擎</h2><ol><li><p>数据库的储存引擎是一种机制，规定了应用如何存储引用数据。Mysql5.5之前默认的存储引擎是MyISAM，之后是InnoDB.</p></li><li><p>MyISAM和InnoDB</p><p>MyISAM</p><ul><li>采用表锁</li><li>B树索引和全文索引</li><li>MyISAM表在磁盘的存储文件<ul><li>.frm  表结构文件</li><li>.MYD  MYDATA  表的数据文件</li><li>.MYI   MYIndex   表的索引文件</li></ul></li></ul><p>InnoDB</p><ul><li>采用行锁</li><li>支持事务和外键</li><li>B树索引和集群索引</li><li>InnoDB表在磁盘的存储文件<ul><li>user.frm：表结构文件</li><li>user.ibd：索引和数据文件（InnoDB Data）</li></ul></li></ul></li></ol><h2 id="二、索引"><a href="#二、索引" class="headerlink" title="二、索引"></a>二、索引</h2><ol><li><p>索引的本质是一个数据结构。</p></li><li><p>Mysql的索引结构</p><ul><li><p>B树索引</p><p>B-Tree</p><img src="/2021/10/07/mysql3/Qa.png" class=""><p>B+Tree</p><img src="/2021/10/07/mysql3/image-20211004175244727.png" class="" title="image-20211004175244727"></li><li><p>hash索引</p><img src="/2021/10/07/mysql3/image-20211004193746781.png" class="" title="image-20211004193746781"><p>哈希索引是基于哈希表实现，只有精确匹配索引所有列的查询才有效，对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码（hash code)，哈希码是一个较小的值，大部分情况下不同的键值的行计算出来的哈希码是不同的，但是也会有例外，就是说不同列值计算出来的hash值一样的（即所谓的hash冲突），哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每一个数据行的指针，hash很适合做索引，为某一列或几列建立hash索引，就会利用这一列或几列的值通过一定的算法计算出一个hash值，对应一行或几行数据</p></li><li><p>全文索引</p></li><li><p>集群索引</p></li></ul></li><li><p>联合索引</p><img src="/2021/10/07/mysql3/image-20211002175058383.png" class=""><ul><li><p>最左匹配原则</p><p>假如一个联合索引为a,b,c；则检索(a,b,c)(a,b),(a,c)用到的这个联合索引，(b,c)不用这个索引</p><p>select * from table where id = a or name = b;select * from table where name=b or id=a;</p><p>上述两个语句均可用到索引abc,也就是说和语句中字段的顺序无关；</p></li></ul></li><li><p>常用索引的情况</p></li><li><p>不能用索引的情况</p></li><li><p>索引失效</p></li><li><p>MyISAM和InnoDB的索引结构</p><ol><li><p>MyISAM</p><ul><li><p>MyISAM存储引擎的索引结构</p><p>MyISAM表的索引文件的key为索引列的数据，value为每个数据代表的行的磁盘地址</p></li></ul></li><li><p>InnoDB</p><img src="/2021/10/07/mysql3/a.png" class=""><ul><li><p>InnoDB存储引擎的索引结构</p><p>InnoDB表的索引结构key为索引列的数据，每个key代表的整个行的数据也存储在索引表中。</p></li></ul></li></ol></li></ol><h2 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h2><h4 id="查询慢sql"><a href="#查询慢sql" class="headerlink" title="查询慢sql"></a>查询慢sql</h4><h4 id="查看分析sql执行情况"><a href="#查看分析sql执行情况" class="headerlink" title="查看分析sql执行情况"></a>查看分析sql执行情况</h4><ol><li><p>explain</p><p>explain +  sql 语句  可以分析这条语句的执行计划，得到如下结果  </p><img src="/2021/10/07/mysql3/d.png" class=""><ul><li><p>select_type </p><ul><li>SIMPLE:简单，不使用表连接和子查询</li><li>PRIMARY：主查询，外层查询</li><li>UNION：UNION中的后面的查询</li><li>SUBQUERY：子查询中的第一个SELECT</li></ul></li><li><p>table</p><p>输出结果的表</p></li><li><p>type</p><ul><li>null&gt;system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all</li><li>all:全表扫描</li><li>index:遍历整个索引查询</li><li>range:索引范围扫描</li><li>ref: 采用非唯一索引</li><li>eq_ref：采用唯一索引，每个索引只对应一条数据</li><li>system\const：单表中至多只有一个匹配行</li><li>null:不用访问表，直接可以得到结果</li></ul></li><li><p>possible_keys</p><p>查询时可能使用的索引</p></li><li><p>key</p><p>查询时真正使用的索引</p></li><li><p>key_len</p><p>使用到索引字段的长度</p></li><li><p>ref</p></li><li><p>rows</p><p>扫描行数</p></li><li><p>Extra</p><p>执行说明</p></li></ul><p>show warnings</p><p>此命令可以查看mysql的内部优化器执行的sql语句</p></li><li><p>show profiles</p><ul><li>show profiles:列出执行sql的运行时间和queryID</li><li>show  profile  for query  query_ID :查看某个sql语句执行的各项具体时间</li><li>show profile  cpu\all\io…  for  query query_ID  查看明细类型的时间消耗</li></ul></li><li><p>show status</p><p>SHOW STATUS命令会显示每个服务器变量的名字和值</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html">https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html</a>  列出了不同的变量含义</p></li><li><p>trace  分析优化器如何选择执行文件 </p></li></ol><h4 id="sql优化措施"><a href="#sql优化措施" class="headerlink" title="sql优化措施"></a>sql优化措施</h4><ol><li><p>选择正确的数据类型</p><ul><li>选择储存空间小的</li><li>选择类型简单的</li><li>避免null值存在，null值存在使得索引相关更加复杂</li></ul></li><li><p>schema设计</p><ul><li><p>不要有太多的列</p><p>存储引擎在工作时，将缓冲数据在服务层转换，列数过多，资源消耗大</p></li><li><p>不要有太多的表关联</p></li><li><p>不要过度使用枚举</p></li></ul></li><li><p>查询优化</p><ul><li><p>不要查询到不需要的数据</p><ul><li><p>查询不需要的记录</p><p>如：select查询大量的结果，但只获取前N条记录，理想是需要几条就查几条</p></li><li><p>多表联查时，返回全部列，只返回需要的列最佳</p></li><li><p>select *</p></li><li><p>重复查相同的数据，可以将需要的数据查一次后缓存，不用重复查</p></li></ul></li><li></li><li><p>重构sql</p><ul><li><p>可以将一个复杂的查询分为数个简单查询</p></li><li><p>切分查询</p><p>将数据分段，每次完成查询的一部分</p></li><li><p>可能的情况下，分解关联查询，将join关联分为几个简单查询</p><p>缓存效率更高</p><p>减少锁的竞争</p></li></ul></li><li></li><li></li><li></li><li><p>数据库三范式和反范式</p><p>第一范式：要求表中业务字段，逻辑上不可再分</p><p>第二范式：要求表中必须存在业务主键 (单一业务主键 或 联合业务主键)<br>非业务主键，必须依赖于 单一业务主键 或 全部的联合业务主键</p></li></ul></li></ol><p>第三范式：要求非业务主键列不能相互依赖</p><p>反范式化设计数据库，是为了用空间换时间，提高查询效率</p><p><strong>第一范式（1NF）：</strong> <strong>强调的是列的原子性，即列不能够再分成其他几列。</strong>    </p><p> <strong>第二范式（2NF）：</strong> <strong>首先要满足它是1NF，另外还需要包含两部分内容：一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。</strong></p><p> <strong>第三范式（3NF）：</strong> <strong>首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis2</title>
      <link href="/2021/10/02/redis2/"/>
      <url>/2021/10/02/redis2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis(二)-</title>
      <link href="/2021/10/02/redis1/"/>
      <url>/2021/10/02/redis1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库"><a href="#一、数据库" class="headerlink" title="一、数据库"></a>一、数据库</h2><h3 id="1-1-redis服务器"><a href="#1-1-redis服务器" class="headerlink" title="1.1.redis服务器"></a>1.1.redis服务器</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">redisServer</span><span class="token punctuation">&#123;</span>    <span class="token comment">//一个数组，保存着服务器中的所有数据库</span>    redisDb <span class="token operator">*</span>db<span class="token punctuation">;</span>    <span class="token comment">//数据库数量，该值默认是16</span>    <span class="token keyword">int</span> dbnum<span class="token punctuation">;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-redis数据库"><a href="#1-2-redis数据库" class="headerlink" title="1.2.redis数据库"></a>1.2.redis数据库</h3><h4 id="1-2-1-数据库结构"><a href="#1-2-1-数据库结构" class="headerlink" title="1.2.1.数据库结构"></a>1.2.1.数据库结构</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisDb</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//</span>    <span class="token comment">//数据库键空间，保存着数据库中的所有键值对</span>    dict <span class="token operator">*</span>dict<span class="token punctuation">;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span> redisDb<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>键空间的键也就是数据库的键，每个键都是一个字符 串对象</li><li>键空间的值也就是数据库的值，每个值可以是字符串对象、列表对象、哈希表对象、</li></ul><h4 id="1-2-2-数据库命令操作"><a href="#1-2-2-数据库命令操作" class="headerlink" title="1.2.2.数据库命令操作"></a>1.2.2.数据库命令操作</h4><p>redis数据库的键空间就是一个字典，所有操作都是对键空间字典做的。</p><h2 id="二、持久化"><a href="#二、持久化" class="headerlink" title="二、持久化"></a>二、持久化</h2><h3 id="2-1-RDB持久化"><a href="#2-1-RDB持久化" class="headerlink" title="2.1.RDB持久化"></a>2.1.RDB持久化</h3><h4 id="2-1-1"><a href="#2-1-1" class="headerlink" title="2.1.1"></a>2.1.1</h4><h3 id="2-2-AOF持久化"><a href="#2-2-AOF持久化" class="headerlink" title="2.2.AOF持久化"></a>2.2.AOF持久化</h3>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis(一)-数据结构和数据类型</title>
      <link href="/2021/10/02/redis/"/>
      <url>/2021/10/02/redis/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-Redis中的数据结构"><a href="#一、-Redis中的数据结构" class="headerlink" title="一、 Redis中的数据结构"></a>一、 Redis中的数据结构</h2><h3 id="1-简单动态字符串SDS"><a href="#1-简单动态字符串SDS" class="headerlink" title="1.简单动态字符串SDS"></a>1.简单动态字符串SDS</h3><h4 id="1-1-SDS的定义结构"><a href="#1-1-SDS的定义结构" class="headerlink" title="1.1.SDS的定义结构"></a>1.1.SDS的定义结构</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">sdshdr</span> <span class="token punctuation">&#123;</span><span class="token comment">// 记录buf 数组中已使用字节的数量</span><span class="token comment">//等于SDS所保存字符串的长度</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment">//记录buf数组中未使用字节的数量</span>    <span class="token keyword">int</span> free<span class="token punctuation">;</span><span class="token comment">//字节数组，用于保存字符串</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/10/02/redis/SDS%E7%BB%93%E6%9E%84.png" class=""><ul><li>free=0,表示数组中没有未使用的字节；</li><li>len=5,表示字符串的长度为5，SDS的字符串以空字符结尾，但这个空字符不计入len的长度之中。</li></ul><h4 id="1-2-SDS和C字符串"><a href="#1-2-SDS和C字符串" class="headerlink" title="1.2.SDS和C字符串"></a>1.2.SDS和C字符串</h4><ol><li><p>通过使用SDS而不是C字符串，Redis 将获取字符串长度所需的复杂度从O(N)降低到了O(1)</p><p>C字符串中没有len属性，返回字符串长度需要遍历，SDS直接返回len属性即可。</p></li><li><p>SDS的空间分配策略完全杜绝了发生缓冲区溢出的可能性:当SDS的API需要对SDS进行修改时，API会先检查SDS的空间是否满足修改所需的要求，如果不满足的话，API会自动将SDS的空间扩展至执行修改所需的大小，然后才执行实际的修改操作，所以使用SDS既不需要手动修改SDS的空间大小，也不会出现前面所说的缓冲区溢出问题。</p></li><li><p>内存分配</p><ul><li><p>c</p><p>如果程序执行的是增长字符串的操作，比如拼接操作( append),那么在执行这个操作之前，程序需要先通过内存重分配来扩展底层数组的空间大小一如果忘了这一步就会产生缓冲区溢出。<br>如果程序执行的是缩短字符串的操作，比如截断操作( trim),那么在执行这个操作之后，程序需要通过内存重分配来释放字符串不再使用的那部分空间一如果忘了这一步就会产生内存泄漏。</p></li><li><p>SDS</p><p>空间预分配</p><p>在SDS扩展空间之前，SDS API会检查未使用空间是否足够，足够则直接使用，不足则进行分配。</p><p>如果对SDS进行修改之后，SDS的长度( 也即是len属性的值)将小于1MB,那么程序分配和len属性同样大小的未使用空间，这时SDSlen属性的值将和free属性的值相同。举个例子，如果进行修改之后，SDS的len将变成13字节，那么程序也会分配13字节的未使用空间，SDS的buf数组的实际长度将变成13+13+1=27字节( 额外的一字节用于保存空字符)。<br>如果对SDS进行修改之后，SDS的长度将大于等于1MB，那么程序会分配1MB的未使用空间。举个例子，如果进行修改之后，SDS的len将变成30MB，那么程序会分配1MB的未使用空间，SDS 的buf数组的实际长度将为30MB + 1MB + lbyte。</p><p>惰性空间释放<br>惰性空间释放用于优化SDS的字符串缩短操作:当SDS的API需要缩短SDS保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。与此同时，SDS也提供了相应的API,让我们可以在有需要时，真正地释放SDS的未使用空间，所以不用担心惰性空间释放策略会造成内存浪费。</p></li></ul></li><li><p>二进制安全</p><p>SDS可以储存二进制数据，数据在写入时是什么样子，读出时还是什么样子。</p></li></ol><h3 id="2-链表"><a href="#2-链表" class="headerlink" title="2.链表"></a>2.链表</h3><h4 id="2-1-链表节点和链表的实现"><a href="#2-1-链表节点和链表的实现" class="headerlink" title="2.1.链表节点和链表的实现"></a>2.1.链表节点和链表的实现</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token punctuation">&#123;</span><span class="token comment">//前置节点</span>    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span> prev<span class="token punctuation">;</span><span class="token comment">//后置节点</span>    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token comment">//节点的值</span><span class="token keyword">void</span> <span class="token operator">*</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> listNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//表头节点</span>    listNode <span class="token operator">*</span> head<span class="token punctuation">;</span>    <span class="token comment">//表尾节点</span>    listNode <span class="token operator">*</span> tail<span class="token punctuation">;</span>    <span class="token comment">//链表所包含的节点数量</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>    <span class="token comment">//节点值复制函数</span>    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>dup<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">//节点值释放函数</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">//节点值对比函数</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span> list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-字典"><a href="#3-字典" class="headerlink" title="3.字典"></a>3.字典</h3><h4 id="3-1-字典的实现"><a href="#3-1-字典的实现" class="headerlink" title="3.1.字典的实现"></a>3.1.字典的实现</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dict</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 类型特定函数</span>    dictType <span class="token operator">*</span>type<span class="token punctuation">;</span>    <span class="token comment">//私有数据</span>    <span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">;</span>    <span class="token comment">//哈希表</span>    dictht ht<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>    <span class="token comment">// rehash 索引</span>    <span class="token comment">//当rehash不在进行时，值为-1</span>    in trehashidx<span class="token punctuation">;</span> <span class="token comment">/* rehashing not in progress' if rehashidx == -1 */</span><span class="token punctuation">&#125;</span> dict<span class="token punctuation">;</span><span class="token comment">//两个哈希表，只使用ht[0]，ht[1]只在ht[0]rehash的时候使用到。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictType</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//计算哈希值的函数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>hashFunction<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">//复制键的函数</span>    <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>keyDup<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata， <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">//复制值的函数</span>    <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>valDup<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">//对比键的函数</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>keyCompare<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key2<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">//销毁键的函数</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>keyDestructor<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">//销毁值的函数</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>valDestructor<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span> dictType<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictht</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//哈希表数组</span>    dictEntry <span class="token operator">*</span><span class="token operator">*</span>table<span class="token punctuation">;</span>    <span class="token comment">//哈希表大小</span>    <span class="token keyword">unsigned</span> <span class="token number">1</span>ong size<span class="token punctuation">;</span> <span class="token punctuation">.</span>    <span class="token comment">//哈希表大小掩码，用于计算索引值</span>    <span class="token comment">//总是等于size-1</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> si zemask<span class="token punctuation">;</span>    <span class="token comment">//该哈希表已有节点的数量</span>    <span class="token keyword">unsigned</span> <span class="token number">1</span>ong used<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> dictht<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//键</span>    <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>    <span class="token comment">//值</span>    <span class="token keyword">union</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> val<span class="token punctuation">;</span>    uint64_ tu64<span class="token punctuation">;</span>    int64_ ts64<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> V<span class="token punctuation">;</span>    <span class="token comment">// 指向下个哈希表节点， 形成链表</span>    <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> dictEntry<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/10/02/redis/dict%E7%BB%93%E6%9E%84.png" class=""><h4 id="3-2-rehash"><a href="#3-2-rehash" class="headerlink" title="3.2.rehash"></a>3.2.rehash</h4><p>​        随着操作的不断执行，哈希表保存的键值对会逐渐地增多或者减少，为了让哈希表的负载因子(loadfactor)维持在一个合理的范围之内，当哈希表保存的键值对数量太多或者太少时，程序需要对哈希表的大小进行相应的扩展或者收缩。扩展和收缩哈希表的工作可以通过执行rehash (重新散列)操作来完成，Redis 对字典的哈希表执行rehash的步骤如下:</p><ul><li><p>为字典的ht[1]哈希表分配空间，这个哈希表的空间大小取决于要执行的操作，以及ht[0]当前包含的键值对数量</p><ul><li>如果执行的是扩展操作，那么ht[1]的大小为第一个大于等于ht[0] .used*2的2^n(2的n次方幂);</li><li>如果执行的是收缩操作，那么ht [1]的大小为第-个大于等于ht [0] .used的2^n(2的n次方幂)。</li></ul></li><li><p>将保存在ht[0]中的所有键值对rehash到ht[1]上面: </p><p>rehash指的是重新计算键的哈希值和索引值，然后将键值对放置到ht[1]哈希表的指定位置上。</p></li><li><p>当ht[0]包含的所有键值对都迁移到了ht[1]之后(ht[0]变为空表),释放ht[0]，将ht[1]设置为ht[0]，并在ht[1]新创建-一个空白哈希表，为下一次rehash做准备。</p></li></ul><h3 id="4-跳跃表"><a href="#4-跳跃表" class="headerlink" title="4.跳跃表"></a>4.跳跃表</h3><h4 id="4-1-实现及结构"><a href="#4-1-实现及结构" class="headerlink" title="4.1.实现及结构"></a>4.1.实现及结构</h4><img src="/2021/10/02/redis/%E8%B7%B3%E8%B7%83%E8%A1%A8.png" class=""><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplist</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//表头节点和表尾节点</span>    structz skiplistNode <span class="token operator">*</span>header<span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span>    <span class="token comment">//表中节点的数量</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> length<span class="token punctuation">;</span>    <span class="token comment">//跳跃表中层数最大的节点的层数</span>    <span class="token keyword">int</span> level<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> zskiplist<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*层，每个层两个属性：前进指针和跨度    前进指针：访问向表尾方向的其他节点    跨度：前进指针所指节点和当前节点的距离    */</span>    <span class="token keyword">struct</span> <span class="token class-name">zskiplistLevel</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//前进指针</span>        <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>forward<span class="token punctuation">;</span>        <span class="token comment">//跨度</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> span<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> level<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//后退指针，指向位于当前节点的前一个节点</span>    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>backward<span class="token punctuation">;</span>    <span class="token comment">//分值，跳跃表中的节点各自的分值从小到大排列</span>    <span class="token keyword">double</span> score<span class="token punctuation">;</span>    <span class="token comment">//成员对象</span>    robj <span class="token operator">*</span>obj <span class="token punctuation">;</span><span class="token punctuation">&#125;</span> zskiplistNode<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>层</p><p>跳跃表节点的level数组可以包含多个元素，每个元素都包含一个指向其他节点的指针，程序可以通过这些层来加快访问其他节点的速度，一般来说，层的数量越多，访问其他节点的速度就越快。每次创建一个新跳跃表节点的时候，程序都根据幂次定律(powerlaw,越大的数出现的概率越小)随机生成一个介于1和32之间的值作为level数组的大小，这个大小就是层的“高度”。</p></li><li><p>前进指针</p><p>用于从表头访问节点</p><p>遍历路线如虚线所示：</p><img src="/2021/10/02/redis/%E8%B7%B3%E8%B7%83%E8%A1%A8%E9%81%8D%E5%8E%86.png" class=""></li><li><p>跨度</p><p>两个节点之间跨度越大，其距离越远，指向null的跨度都为0；</p><p>跨度是用来计算在查找某个节点的排位，即将经过的节点的跨度相加。</p></li><li><p>后退指针</p><p>从表尾向表头访问节点，每个节点的后退指针只能后退至前一个节点。</p></li><li><p>分值和对象</p><p>节点的分值( score属性)是一个double类型的浮点数，跳跃表中的所有节点都按分值从小到大来排序。<br>节点的成员对象(obj属性)是一个指针，它指向一个字符串对象，而字符串对象则保存着一个SDS值。<br>在同一个跳跃表中，各个节点保存的成员对象必须是唯一的，但是多个节点保存的分值却可以是相同的:分值相同的节点将按照成员对象在字典序中的大小来进行排序，成员对象较小的节点会排在前面(靠近表头的方向)，而成员对象较大的节点则会排在后面(靠近表尾的方向)。</p></li></ul><h3 id="5-整数集合"><a href="#5-整数集合" class="headerlink" title="5.整数集合"></a>5.整数集合</h3><h4 id="5-1-集合的结构"><a href="#5-1-集合的结构" class="headerlink" title="5.1.集合的结构"></a>5.1.集合的结构</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">intset</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//编码方式</span>    uint32_ t encoding<span class="token punctuation">;</span>    <span class="token comment">//集合包含的元素数量</span>    uint32_ t length<span class="token punctuation">;</span>    <span class="token comment">//保存元素的数组</span>    int8_ t contents<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span> intset<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>保存的类型：int16_t,int32_t,int64_t</li><li>各个项在数组中从小到大排序，且没有重复项</li></ul><h4 id="5-2-数据类型的升级"><a href="#5-2-数据类型的升级" class="headerlink" title="5.2.数据类型的升级"></a>5.2.数据类型的升级</h4><p>每当我们要将一个新元素添加到整数集合里面，并且新元素的类型比整数集合现有所有元素的类型都要长时，整数集合需要先进行升级(upgrade),然后才能将新元素添加到整数集合里面。升级整数集合并添加新元素共分为三步进行:</p><ul><li>根据新元素的类型，扩展整数集合底层数组的空间大小，并为新元素分配空间。</li><li>将底层数组现有的所有元素都转换成与新元素相同的类型，并将类型转换后的元素放置到正确的位上，而且在放置元素的过程中，需要继续维持底层数组的有序性质不变。</li><li>将新元素添加到底层数组里面。</li></ul><p>数据类型不支持降级。</p><h3 id="6-压缩列表"><a href="#6-压缩列表" class="headerlink" title="6.压缩列表"></a>6.压缩列表</h3>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树</title>
      <link href="/2021/10/01/hongheishu/"/>
      <url>/2021/10/01/hongheishu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、树概述"><a href="#一、树概述" class="headerlink" title="一、树概述"></a>一、树概述</h2><img src="/2021/10/01/hongheishu/a.png" class=""><p>有关树的常用术语</p><ul><li>节点：每个储存数据的圆圈都是节点；</li><li>节点的路径：从根节点到本节点经历的节点和分支的顺序排序。</li><li>路径的长度：指节点的路径包含的分支数，即边数。</li><li>节点的度：指该节点拥有的子树的个数；</li><li>树的度：所有的节点的度中，最大值。</li><li>叶节点：即终端节点。</li><li>分支节点：树中除了叶节点之外的节点都是分支节点。</li><li>子节点：指该节点的子树的根节点。</li><li>父节点：拥有子树的节点。</li><li>节点的层次：根节点的层次为0，依次向下加一；</li><li>树的深度：节点的层数；</li></ul><h2 id="二、二叉树"><a href="#二、二叉树" class="headerlink" title="二、二叉树"></a>二、二叉树</h2><img src="/2021/10/01/hongheishu/b.png" class=""><pre class="line-numbers language-none"><code class="language-none">前：8 3 1 6 4 7 10 14 13中：1 3 4 6 7 8 10 13 14后：1 4 7 6 3 13 14 10 8二叉树节点：public class TreeNode &#123;    private Object data;    private TreeNode left;    private TreeNode right;Constructor 构造方法Setter and Getter  &#125;二叉树递归遍历： 前：public static void pre(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            System.out.println(t.getData());            pre(t.getLeft());            pre(t.getRight());        &#125;     &#125;   中：public static void in(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            in(t.getLeft());            System.out.println(t .getData());            in(t.getRight());        &#125;     &#125;   后：public static void post(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            post(t.getLeft());            post(t.getRight());            System.out.println(t.getData());        &#125;     &#125;二叉查找树左子树的值均小于根节点的值，右子树的值均大于根节点的值。且每个子树均是二叉查找树。二叉平衡树在二叉查找树的基础上，通过对数据的调整，达到数据平衡的效果。   二叉查找树(二叉排序树)public class Tree &#123;    private TreeNode root;    public Tree(TreeNode root) &#123;        this.root &#x3D; root;    &#125;    public Tree() &#123;    &#125;    public TreeNode getRoot() &#123;        return root;    &#125;    public void setRoot(TreeNode root) &#123;        this.root &#x3D; root;    &#125;    public void add(TreeNode treeNode)&#123;        if(root &#x3D;&#x3D; null)&#123;            root &#x3D; treeNode;        &#125;else&#123;            root.add(treeNode);        &#125;    &#125;    public TreeNode search(int data)&#123;        if(root &#x3D;&#x3D; null)&#123;            return null;        &#125;else&#123;            return root.search(data);        &#125;    &#125;    public TreeNode parentSearch(int data)&#123;        if(root&#x3D;&#x3D;null)&#123;            return null;        &#125;else&#123;            return root.searchParent(data);        &#125;    &#125;    public void delete(int data)&#123;        if(root&#x3D;&#x3D;null) return;        else&#123;            TreeNode target &#x3D; this.search(data);            if(target&#x3D;&#x3D;null)&#123;                return;            &#125;            TreeNode parentNode &#x3D; this.parentSearch(data);            if(target.getLeft()&#x3D;&#x3D;null&amp;&amp;target.getRight()&#x3D;&#x3D;null)&#123;                if(parentNode.getLeft().getData()&#x3D;&#x3D;data)&#123;                    parentNode.setLeft(null);                &#125;else&#123;                    parentNode.setRight(null);                &#125;            &#125;            &#x2F;&#x2F;删除两个节点            if(target.getLeft()!&#x3D;null&amp;&amp;target.getRight()!&#x3D;null)&#123;                TreeNode node &#x3D; target.getRight();                int min &#x3D; node.getData();                while(node.getLeft()!&#x3D;null)&#123;                    node &#x3D; node.getLeft();                    min &#x3D; node.getData();                &#125;                delete(min);                target.setData(min);            &#125;            &#x2F;&#x2F;删除只有子节点的节点            if(target.getLeft()&#x3D;&#x3D;null&amp;&amp;target.getRight()!&#x3D;null)&#123;                parentNode.setRight(target.getRight());            &#125;else if(target.getLeft()!&#x3D;null&amp;&amp;target.getRight()&#x3D;&#x3D;null)&#123;                parentNode.setLeft(target.getLeft());            &#125;        &#125;    &#125;    &#x2F;&#x2F;遍历    public void preRoot()&#123;        if(root!&#x3D;null)&#123;            preRoot(root);        &#125;    &#125;    public void preRoot(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            System.out.println(t.getData());            preRoot(t.getLeft());            preRoot(t.getRight());        &#125;    &#125;    public void inRoot()&#123;        if(root!&#x3D; null)&#123;            inRoot(root);        &#125;    &#125;    public void inRoot(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            inRoot(t.getLeft());            System.out.println(t.getData());            inRoot(t.getRight());        &#125;    &#125;    public void postRoot()&#123;        if(root!&#x3D;null)&#123;            postRoot(root);        &#125;    &#125;    public void postRoot(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            postRoot(t.getLeft());            postRoot(t.getRight());            System.out.println(t.getData());        &#125;    &#125;&#125;class TreeNode &#123;    private int data;    private TreeNode left;    private TreeNode right;    public TreeNode(int data) &#123;        this.data &#x3D; data;    &#125;    public TreeNode() &#123;    &#125;    public int getData() &#123;        return data;    &#125;    public void setData(int data) &#123;        this.data &#x3D; data;    &#125;    public TreeNode getLeft() &#123;        return left;    &#125;    public void setLeft(TreeNode left) &#123;        this.left &#x3D; left;    &#125;    public TreeNode getRight() &#123;        return right;    &#125;    public void setRight(TreeNode right) &#123;        this.right &#x3D; right;    &#125;    public void add(TreeNode treeNode)&#123;        if(treeNode&#x3D;&#x3D;null) return;        if(treeNode.data&lt;&#x3D;this.data)&#123;            if(this.left&#x3D;&#x3D;null)&#123;                this.left&#x3D;treeNode;            &#125;else&#123;                this.left.add(treeNode);            &#125;        &#125;else&#123;            if(this.right&#x3D;&#x3D;null)&#123;                this.right&#x3D;treeNode;            &#125;else&#123;                this.right.add(treeNode);            &#125;        &#125;    &#125;    public TreeNode search(int data)&#123;        if(data&#x3D;&#x3D;this.data) &#123;            return this;        &#125;else if(data&lt;this.data)&#123;            if(this.left&#x3D;&#x3D;null)&#123;                return null;            &#125;            return this.left.search(data);        &#125; else&#123;            if(this.right&#x3D;&#x3D;null)&#123;                return null;            &#125;            return this.right.search(data);        &#125;    &#125;    public TreeNode searchParent(int data)&#123;        if((this.left!&#x3D;null&amp;&amp;this.left.data&#x3D;&#x3D;data)||(this.right!&#x3D;null&amp;&amp;this.right.data&#x3D;&#x3D;data))&#123;            return this;        &#125;else if(data&lt;this.data&amp;&amp;this.left!&#x3D;null)&#123;            return this.left.searchParent(data);        &#125;else if(data&gt;this.data&amp;&amp;this.right!&#x3D;null)&#123;            return this.right.searchParent(data);        &#125;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="/2021/09/30/zhan/"/>
      <url>/2021/09/30/zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="一、栈概述"><a href="#一、栈概述" class="headerlink" title="一、栈概述"></a>一、栈概述</h2><p>栈的插入删除只能在表的尾端进行，即后入先出，进行插入删除操作的位置是栈顶，另一段是栈底  插入称为入栈，删除称为出栈</p><h2 id="二、栈的实现"><a href="#二、栈的实现" class="headerlink" title="二、栈的实现"></a>二、栈的实现</h2><ol><li> 顺序储存，数组实现</li></ol>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top<span class="token punctuation">;</span>      <span class="token comment">//栈顶指针</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>objects <span class="token operator">=</span> objects<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> top<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> top<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objects<span class="token punctuation">.</span>length<span class="token operator">==</span>top<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"满了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        objects<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"空了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> objects<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">peak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> objects<span class="token punctuation">[</span>top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"栈顶为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>链式储存，链表实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStack2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">StackNode</span> top<span class="token punctuation">;</span>  <span class="token comment">//栈帧</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack2</span><span class="token punctuation">(</span><span class="token class-name">StackNode</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> top<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">StackNode</span> n <span class="token operator">=</span> top<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">peak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> top<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StackNode</span> stackNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StackNode</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        stackNode<span class="token punctuation">.</span>next <span class="token operator">=</span> top<span class="token punctuation">;</span>        top <span class="token operator">=</span> stackNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">StackNode</span> s <span class="token operator">=</span> top<span class="token punctuation">;</span>            top <span class="token operator">=</span> top<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StackNode</span> stackNode <span class="token operator">=</span> top<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>stackNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stackNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stackNode <span class="token operator">=</span> stackNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">StackNode</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> data<span class="token punctuation">;</span>    <span class="token class-name">StackNode</span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StackNode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token class-name">StackNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2021/09/29/jisuanjiwangluo/"/>
      <url>/2021/09/29/jisuanjiwangluo/</url>
      
        <content type="html"><![CDATA[<h2 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h2><ol><li>计算机网络模型<ul><li>五层因特网模型<ul><li><p>应用层</p></li><li><p>运输层</p><p>重要设备：网关</p><p>主要协议：UDP和TCP</p></li><li><p>网络层</p><p>重要设备：路由器</p><p>主要协议：IP、ICMP、ARP、RAPP</p></li><li><p>链路层</p><p>重要设备：网桥和交换机</p></li><li><p>物理层</p></li></ul></li><li>OSI七层模型<ul><li>应用层：是用户与网络的接口</li><li>表示层：表示层处理流经结点的数据编码的表示方式问题，以保证一个系统应用层发出的信息可被另一系统的应用层读出</li><li>会话层：会话层主要功能是管理和协调不同主机上各种进程之间的通信（对话），即负责建立、管理和终止应用程序之间的会话</li><li>运输层：传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题</li><li>网络层：网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。网络层将数据链路层提供的帧组成数据包</li><li>链路层：数据链路层是为网络层提供服务的，解决两个相邻结点之间的通信问题</li><li>物理层：它利用传输介质为数据链路层提供物理连接</li></ul></li></ul></li></ol><h2 id="二、应用层"><a href="#二、应用层" class="headerlink" title="二、应用层"></a>二、应用层</h2><h2 id="三、运输层"><a href="#三、运输层" class="headerlink" title="三、运输层"></a>三、运输层</h2><ol><li><p>UDP</p><p>UDP在发送报文段之前，发送方和接受方之间不会握手，UDP是无连接的。</p><p>UDP的特性</p><ul><li>应用层将数据传递给UDP时，UDP会立即将数据传送给网络层，没有阻塞机制</li><li>无需连接建立</li><li>无连接状态，无需维持连接状态</li></ul></li><li><p>TCP</p><ol><li><p>TCP的特点 </p><ul><li>TCP是面向连接的</li><li>全双工服务：一台主机的线程A和另一台主机线程B连接后,A的应用层可以传到B，B也可以传到A</li><li>TCP的连接是点对点的，单个发送，单个接受</li><li></li></ul></li><li><p>TCP的连接管理</p><ul><li><p>三次握手</p><img src="/2021/09/29/jisuanjiwangluo/e.png" class=""><p>SYN=1：同步信号，表示建立连接，SYN=1时</p><p>seq=x:表示发送端的数据包的初始序号为x;</p><p>ack:确认序号，表示响应。</p><p>ack=x+1:表示我方收到x为止的所有数据，希望下次发送的序号是 x+1</p></li><li><p>四次挥手</p><img src="/2021/09/29/jisuanjiwangluo/f.png" class=""><ul><li>FIN：=1，发起关闭信号</li></ul></li></ul></li></ol></li><li><p>UDP和TCP区别</p><ul><li>TCP面向连接，UDP无连接</li><li>TCP传输更加可靠，但UDP传输更快</li><li>TCP是点对点，UDP可以一对多</li></ul></li><li><p>TCP保证可靠传输的机制</p><ul><li>确认机制</li><li>重传机制</li><li>滑动窗口</li></ul></li></ol><h2 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h2><ol><li><p>IP协议     </p><p>编址分类</p><ul><li><p>1.0.0.0-127.255.255.255   A类</p><p>子网 255.0.0.0</p></li><li><p>128.0.0.0-191.255.255.255   B类</p><p>子网 255.255.0.0</p></li><li><p>192.0.0.0-233.255.255.255    C类</p><p>子网 255.255.255.0 </p></li><li><p>多播地址  224.0.0.0-239.255.255.255</p></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2021/09/29/caozuoxitong/"/>
      <url>/2021/09/29/caozuoxitong/</url>
      
        <content type="html"><![CDATA[<h2 id="一、操作系统概述"><a href="#一、操作系统概述" class="headerlink" title="一、操作系统概述"></a>一、操作系统概述</h2><h2 id="二、进程和线程"><a href="#二、进程和线程" class="headerlink" title="二、进程和线程"></a>二、进程和线程</h2><ol><li><p>CPU的工作原理</p><p>设置命令初值，pc=50，从地址总线获取内存中的命令，返回50命令到CPU中，执行命令</p><img src="/2021/09/29/caozuoxitong/a.png" class=""></li><li><p>提出问题:IO指令的运算实际是计算指令的10^6倍，若先执行IO指令，则有数条指令在等待，CPU利用率过低</p><p>解决方法：并发</p></li><li><p>进程的组织</p><ul><li><p>PCB：为了描述控制进程的运行，系统中存放进程的管理和控制信息的数据结构称为进程控制块（PCB Process Control Block），它是进程实体的一部分，是操作系统中最重要的记录性数据结构。它是进程管理和控制的最重要的数据结构，每一个进程均有一个PCB，在创建进程时，建立PCB，伴随进程运行的全过程，直到进程撤消而撤消。</p></li><li><p>PCB+队列+状态组成了操作系统的组织，CPU将同一状态的PCB放进同一队列，根据不同的状态队列推进。</p><img src="/2021/09/29/caozuoxitong/b.png" class=""><br><img src="/2021/09/29/caozuoxitong/c.png" class=""></li></ul></li><li><p>进程的交替</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获得下一个要执行的进程</span>    pNew <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>ReadyQuene<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//交换</span>    <span class="token function">switch_to</span><span class="token punctuation">(</span>pCur<span class="token punctuation">,</span>pNew<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进程的地址空间分离</p></li><li><p>进程之间的合作</p></li><li><p>用户级线程</p><img src="/2021/09/29/caozuoxitong/d.png" class=""></li><li><p>内核级线程及其实现 </p></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>队列</title>
      <link href="/2021/09/28/dui-lie/"/>
      <url>/2021/09/28/dui-lie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ol><li><p>只允许在一端插入数据操作，在另一端进行删除数据操作的特殊线性表；进行插入操作的一端称为队尾（入队列），进行删除操作的一端称为队头（出队列）；队列具有先进先出（FIFO）的特性。</p></li><li><p>队列实现的关键在于两个指针，头指针指向已出队的元素，尾指针指向添加后的元素。</p><img src="/2021/09/28/dui-lie/g-1633009583595.png" class=""></li><li><p>队列类型</p><p>顺序队列</p><p>循环队列</p></li></ol><h2 id="二、基本操作实现"><a href="#二、基本操作实现" class="headerlink" title="二、基本操作实现"></a>二、基本操作实现</h2><ol><li><p>顺序储存实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 本次实现不考虑容量问题 * 基本操作： *  入队：enqueue() *  出队：dequeue() *  判断是否为空：isEmpty *  大小：size() *  返回队首元素不删除：peek() *  返回队尾元素不删除：poll() *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rear <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rear<span class="token operator">>=</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"数组长度不足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        elements<span class="token punctuation">[</span><span class="token operator">++</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            front<span class="token operator">++</span><span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列已为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> rear<span class="token operator">==</span>front<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 循环数组队列 * 两个指针： * 首指针指向首元素 * 尾指针指向尾元素的后一个元素 * 约定要留一个空档位置，即还剩余一个位置的时候就满。 * 当数组存满之后，向之前空档的位置填数据 *  rear = (rear+1)%array.length  得到新的位置 * 当 front == (rear+1)%array.length 时，队列满 * 当 rear== front 时，队列为空 */</span><span class="token keyword">class</span> <span class="token class-name">CircleQueue</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>front <span class="token operator">==</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        elements<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>        rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> o <span class="token operator">=</span> elements<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>            front<span class="token operator">=</span><span class="token punctuation">(</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> o<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列已为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> rear<span class="token operator">==</span>front<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>rear<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>链式储存实现</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用算法</title>
      <link href="/2021/09/27/chang-yong-suan-fa/"/>
      <url>/2021/09/27/chang-yong-suan-fa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建自己的GitHub个人博客</title>
      <link href="/2021/09/27/da-jian-zi-ji-de-github-ge-ren-bo-ke/"/>
      <url>/2021/09/27/da-jian-zi-ji-de-github-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="一、github准备工作"><a href="#一、github准备工作" class="headerlink" title="一、github准备工作"></a>一、github准备工作</h1><h2 id="1-github账号注册"><a href="#1-github账号注册" class="headerlink" title="1.github账号注册"></a>1.github账号注册</h2><h2 id="2-新建博客仓库"><a href="#2-新建博客仓库" class="headerlink" title="2.新建博客仓库"></a>2.新建博客仓库</h2><h1 id="二、hexo环境搭建"><a href="#二、hexo环境搭建" class="headerlink" title="二、hexo环境搭建"></a>二、hexo环境搭建</h1><h2 id="1-Node-js环境搭建"><a href="#1-Node-js环境搭建" class="headerlink" title="1.Node.js环境搭建"></a>1.Node.js环境搭建</h2><h2 id="2-hexo本地安装"><a href="#2-hexo本地安装" class="headerlink" title="2.hexo本地安装"></a>2.hexo本地安装</h2><h1 id="三、博客美化"><a href="#三、博客美化" class="headerlink" title="三、博客美化"></a>三、博客美化</h1><h2 id="1-更换主题"><a href="#1-更换主题" class="headerlink" title="1.更换主题"></a>1.更换主题</h2>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello hexo</title>
      <link href="/2021/09/26/hello-world/"/>
      <url>/2021/09/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表</title>
      <link href="/2021/09/20/xian-xing-biao/"/>
      <url>/2021/09/20/xian-xing-biao/</url>
      
        <content type="html"><![CDATA[<h3 id="一、线性表概述"><a href="#一、线性表概述" class="headerlink" title="一、线性表概述"></a>一、线性表概述</h3><h3 id="1-线性表定义"><a href="#1-线性表定义" class="headerlink" title="1.线性表定义"></a>1.线性表定义</h3><ul><li>​    线性表：n个同类型数据元素的有序序列    L=(a1,a2,a3,……..an)</li><li>​    除a1外，其他数据元素均有直接前驱</li><li>​    除an外，其他数据元素均有直接后驱</li></ul><h3 id="2-线性表的基本操作"><a href="#2-线性表的基本操作" class="headerlink" title="2.线性表的基本操作"></a>2.线性表的基本操作</h3><ul><li>​    建立线性表</li><li>​    清除线性表</li><li>​    定位线性表并查找前驱后继</li><li>​    查询</li><li>​    求线性表长度</li></ul><h3 id="3-线性表的存储结构及实现"><a href="#3-线性表的存储结构及实现" class="headerlink" title="3.线性表的存储结构及实现"></a>3.线性表的存储结构及实现</h3><ul><li><h4 id="1-线性表的顺序储存及实现-数组"><a href="#1-线性表的顺序储存及实现-数组" class="headerlink" title="1.线性表的顺序储存及实现(数组)"></a>1.线性表的顺序储存及实现(数组)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//java中的ArrayList类的内部实现是顺序储存线性表结构</span><span class="token comment">/*构造函数size()扩容函数增:add删：remove查：getcontain()*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span>        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8683452581122892189L</span><span class="token punctuation">;</span>    <span class="token comment">//默认初始容量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">/*transient关键字，添加transient关键字的属性避免被序列化*/</span>    <span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment">//构造函数</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*数组扩容1.扩大原来容量的一半2.copyof 复制*/</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//扩大原容量的一半</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//扩容至 Integer.MAX_VALUE</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// minCapacity is usually close to size, so this is a win:</span><span class="token comment">//复制数组</span>        elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查</span><span class="token comment">//返回某元素第一次出现的下标(可以为null)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//返回某元素最后一次出现的下标</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//获取某下标的元素</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查下标</span>        <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Replaces the element at the specified position in this list with     * the specified element.     *     * @param index index of the element to replace     * @param element element to be stored at the specified position     * @return the element previously at the specified position     * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;     */</span><span class="token comment">//修改某下标的元素，并返回原值</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查下标</span>        <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//增</span><span class="token comment">//添加元素</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!  //扩容判断</span>        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//在特定下标插入值</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//下标范围判断</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!  //扩容判断</span><span class="token comment">//底层调用C/C++ （原始数组，开始下标，目标数组，开始位置，复制个数）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                         size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将index及后的元素复制到index+1之后</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//删</span><span class="token comment">//删除某下标的元素</span><span class="token comment">/*将删除的元素之后的数据整体前移将前移的元素空位的值改为null*/</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//将删除下标后的元素整体前移</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// clear to let GC do its work</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//删除某个元素</span><span class="token comment">//遍历</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//清空整个列表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// clear to let GC do its work</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​             </p></li><li><h4 id="2-线性表的链式储存及实现-链表"><a href="#2-线性表的链式储存及实现-链表" class="headerlink" title="2.线性表的链式储存及实现(链表)"></a>2.线性表的链式储存及实现(链表)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractSequentialList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span>    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> first<span class="token punctuation">;</span>    <span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> last<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//作为首节点连接</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            f<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//作为末节点连接</span>    <span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//将数据e插入到Node succ 的位置上</span>    <span class="token keyword">void</span> <span class="token function">linkBefore</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> succ<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert succ != null;</span><span class="token comment">//创建一个新的节点，包含e </span><span class="token comment">//新节点的prev 为原节点的prev ，新节点的next 为原节点</span><span class="token comment">//原节点的prev 变为新节点</span><span class="token comment">//原节点的prev 的 next 变为新节点</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> succ<span class="token punctuation">)</span><span class="token punctuation">;</span>        succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//断开第一个节点与链表的连接</span>    <span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert f == first &amp;&amp; f != null;</span>        <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        f<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>        first <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//断开和最后一个节点的连接</span>    <span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">unlinkLast</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert l == last &amp;&amp; l != null;</span>        <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev <span class="token operator">=</span> l<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        l<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        l<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>        last <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            first <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//断开某节点连接</span>    <span class="token class-name">E</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert x != null;</span>        <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            first <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            last <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        x<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//获得第一个及节点数据</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the last element in this list.     *     * @return the last element in this list     * @throws NoSuchElementException if this list is empty     */</span><span class="token comment">//获得最后一个节点数据</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//删除第一个节点，首节点不能为空</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Removes and returns the last element from this list.     *     * @return the last element from this list     * @throws NoSuchElementException if this list is empty     */</span><span class="token comment">//删除最后一个节点，末节点不能为空</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">unlinkLast</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//将节点设为首节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">linkFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//将节点设为末节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns &#123;@code true&#125; if this list contains the specified element.     * More formally, returns &#123;@code true&#125; if and only if this list contains     * at least one element &#123;@code e&#125; such that     * &lt;tt>(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt>.     *     * @param o element whose presence in this list is to be tested     * @return &#123;@code true&#125; if this list contains the specified element     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//添加元素</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//删除某元素</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//找到元素，并断开连接</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">addAll</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除所有数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//   Clearing all of the links between nodes is "unnecessary", but:</span>        <span class="token comment">// - helps a generational GC if the discarded nodes inhabit</span>        <span class="token comment">//   more than one generation</span>        <span class="token comment">// - is sure to free memory even if there is a reachable Iterator</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            x<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            x<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        first <span class="token operator">=</span> last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Positional Access Operations</span>    <span class="token comment">/**     * Returns the element at the specified position in this list.     *     * @param index index of the element to return     * @return the element at the specified position in this list     * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查下标</span><span class="token comment">//node(index） 获得特定下标的节点</span>        <span class="token keyword">return</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//修改特定下标的节点的值</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查下标</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> oldVal <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">//在特定的位置插入节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//检查下标</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span>            <span class="token function">linkLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//直接添加，作为最后一个节点连接</span>        <span class="token keyword">else</span>            <span class="token function">linkBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将节点插入到列表中</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">//删除特定下标的节点</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//检查下标</span>        <span class="token keyword">return</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//断开某节点的连接</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Tells if the argument is the index of an existing element.     */</span><span class="token comment">//判断下标</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> index <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//判断下标</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isPositionIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> index <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//检查下标</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//获得特定下标的节点</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert isElementIndex(index);</span>        <span class="token comment">//采用二分法，循环</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Search Operations</span><span class="token comment">//获得某元素第一次出现的下标</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//循环遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//获取某元素最后一次出现的下标</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//从last节点向前遍历</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                index<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                index<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Queue operations. linkedList的队列操作</span><span class="token comment">/*peak：获得首节点数据，如果首节点是null，则返回null，只返回值不删除节点element：返回首节点数据，首节点为null则异常remove：删除首节点，首节点可以为nullpoll：删除首节点，首节点可以为nulladd：可以增加null元素offer：可以增加null元素*/</span><span class="token comment">//获得首节点数据，如果是null，则返回null，只返回值不删除节点</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//返回首节点数据，首节点为null则异常</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//删除首节点，首节点可以为null</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//删除第一个节点，且首节点不为空</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * Inserts the specified element at the end of this list.     *     * @param e the element to insert     * @return &#123;@code true&#125; (as specified by &#123;@link Deque#offerLast&#125;)     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offerLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Retrieves, but does not remove, the first element of this list,     * or returns &#123;@code null&#125; if this list is empty.     *     * @return the first element of this list, or &#123;@code null&#125;     *         if this list is empty     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Retrieves, but does not remove, the last element of this list,     * or returns &#123;@code null&#125; if this list is empty.     *     * @return the last element of this list, or &#123;@code null&#125;     *         if this list is empty     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Retrieves and removes the first element of this list,     * r returns &#123;@code null&#125; if this list is empty.     *     * @return the first element of this list, or &#123;@code null&#125; if     *     this list is empty     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Retrieves and removes the last element of this list,     * or returns &#123;@code null&#125; if this list is empty.     *     * @return the last element of this list, or &#123;@code null&#125; if     *     this list is empty     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">unlinkLast</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Pushes an element onto the stack represented by this list.  In other     * words, inserts the element at the front of this list.     *     * &lt;p>This method is equivalent to &#123;@link #addFirst&#125;.     *     * @param e the element to push     * @since 1.6     */</span><span class="token comment">/*linkedlist中 有关于栈的操作   pop:   */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Pops an element from the stack represented by this list.  In other     * words, removes and returns the first element of this list.     *     * &lt;p>This method is equivalent to &#123;@link #removeFirst()&#125;.     *     * @return the element at the front of this list (which is the top     *         of the stack represented by this list)     * @throws NoSuchElementException if this list is empty     * @since 1.6     */</span><span class="token comment">//出栈，首节点不能为空</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Removes the first occurrence of the specified element in this     * list (when traversing the list from head to tail).  If the list     * does not contain the element, it is unchanged.     *     * @param o element to be removed from this list, if present     * @return &#123;@code true&#125; if the list contained the specified element     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeFirstOccurrence</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Removes the last occurrence of the specified element in this     * list (when traversing the list from head to tail).  If the list     * does not contain the element, it is unchanged.     *     * @param o element to be removed from this list, if present     * @return &#123;@code true&#125; if the list contained the specified element     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeLastOccurrence</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a list-iterator of the elements in this list (in proper     * sequence), starting at the specified position in the list.     * Obeys the general contract of &#123;@code List.listIterator(int)&#125;.&lt;p>     *     * The list-iterator is &lt;i>fail-fast&lt;/i>: if the list is structurally     * modified at any time after the Iterator is created, in any way except     * through the list-iterator's own &#123;@code remove&#125; or &#123;@code add&#125;     * methods, the list-iterator will throw a     * &#123;@code ConcurrentModificationException&#125;.  Thus, in the face of     * concurrent modification, the iterator fails quickly and cleanly, rather     * than risking arbitrary, non-deterministic behavior at an undetermined     * time in the future.     *     * @param index index of the first element to be returned from the     *              list-iterator (by a call to &#123;@code next&#125;)     * @return a ListIterator of the elements in this list (in proper     *         sequence), starting at the specified position in the list     * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;     * @see List#listIterator(int)     */</span>    <span class="token keyword">public</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListItr</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ListItr</span> <span class="token keyword">implements</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> lastReturned<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> nextIndex<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token class-name">ListItr</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// assert isPositionIndex(index);</span>            next <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            nextIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> nextIndex <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> next<span class="token punctuation">;</span>            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> nextIndex <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> next <span class="token operator">=</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> last <span class="token operator">:</span> next<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            nextIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> nextIndex<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> nextIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastReturned <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> lastNext <span class="token operator">=</span> lastReturned<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token function">unlink</span><span class="token punctuation">(</span>lastReturned<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> lastReturned<span class="token punctuation">)</span>                next <span class="token operator">=</span> lastNext<span class="token punctuation">;</span>            <span class="token keyword">else</span>                nextIndex<span class="token operator">--</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            expectedModCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastReturned <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastReturned<span class="token punctuation">.</span>item <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">linkBefore</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>            nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>            expectedModCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>modCount <span class="token operator">==</span> expectedModCount <span class="token operator">&amp;&amp;</span> nextIndex <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                lastReturned <span class="token operator">=</span> next<span class="token punctuation">;</span>                next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//链表节点</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">E</span> item<span class="token punctuation">;</span> <span class="token comment">//元素 </span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>  <span class="token comment">//上一个</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev<span class="token punctuation">;</span>  <span class="token comment">//下一个</span>        <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http协议</title>
      <link href="/2021/08/01/http-xie-yi/"/>
      <url>/2021/08/01/http-xie-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、http概述"><a href="#一、http概述" class="headerlink" title="一、http概述"></a>一、http概述</h2><ol><li>http协议用于客户端和服务端之间的通信，其中请求文本和图像资源的是客户端，提供资源和响应资源的是服务端。客户端和服务端对象在通信过程中可能会交换。</li><li>URL和URI</li></ol><h2 id="二、报文"><a href="#二、报文" class="headerlink" title="二、报文"></a>二、报文</h2><ol><li><p>请求报文</p><p>请求报文由 方法、URI、协议版本、请求首部字段(前几项共同组成报文首部)内容实体组成。</p><ul><li><p>方法</p><p>GET:获取资源(客户端说：请把资源给我)</p><p>POST：传输实体主体(客户端说：我要把信息告诉你)</p><p>PUT：传输文件</p><p>HEAD：获得报文首部</p><p>DELETE：删除文件</p><p>OPTIONS：询问支持的方法</p><p>TRACE：追踪路径</p><p>CONNECT：要求用隧道协议连接处理</p></li></ul></li><li><p>响应报文</p><p>响应报文由协议版本、状态码、状态码原因短语、响应首部字段组成。</p></li><li><p>请求行和状态行</p><p>请求行：包含请求的方法和版本。</p><p>状态行：包含状态码和原因短语。</p></li></ol><h2 id="三、状态码"><a href="#三、状态码" class="headerlink" title="三、状态码"></a>三、状态码</h2><ol><li><p>1xx(信息状态码)</p><p>接受的信息正在处理</p></li><li><p>2xx(成功状态码)</p><p>200    ok</p><p>204    请求成功但无资源返回</p><p>206    请求资源的一部分</p></li><li><p>3xx(重定向状态码)</p><p>301    永久重定向</p><p>302    临时重定向</p><p>304    资源找到到请求不符合要求</p><p>307    临时重定向</p></li><li><p>4xx(客户端错误码)</p><p>401    http认证失败</p><p>403    访问资源不允许访问</p><p>404    页面找不到</p></li><li><p>5xx(服务端状态码)</p><p>500    资源出现问题</p><p>503    服务器正忙</p></li></ol><h2 id="四、常用首部字段"><a href="#四、常用首部字段" class="headerlink" title="四、常用首部字段"></a>四、常用首部字段</h2><ul><li><p>请求首部字段</p><p>Accept：用户代理可处理的媒体类型</p><p>Accept-Charset：优先的字符集</p><p>Accept-Encoding：优先的内容编码</p><p>Accept-Language：优先的语言（自然语言）</p><p>Authorization：Web认证信息</p><p>Expect：期待服务器的特定行为</p><p>From：用户的电子邮箱地址</p><p>Host：请求资源所在服务器</p><p>If-Match：比较实体标记（ETag）</p><p>If-Modified-Since：比较资源的更新时间</p><p>If-None-Match：比较实体标记（与If-Match相反）</p><p>If-Range：资源未更新时发送实体Byte的范围请求</p><p>If-Unmodified-Since：比较资源的更新时间（与If-Modified-Since相反）</p><p>Max-Forwards：最大传输逐跳数</p><p>Proxy-Authorization：代理服务器要求客户端的认真信息</p><p>Range：实体的直接范围请求</p><p>Referer：对请求中URI的原始获取方</p><p>TE：传输编码的优先级</p><p>User-Agent：HTTP客户端程序的信息</p></li><li><p>响应首部字段</p><p>Accept-Ranges：是否接受字节范围请求</p><p>Age：推算资源创建经过时间</p><p>ETa：资源的匹配信息</p><p>Location：令客户端重定向至指定URI</p><p>Proxy-Authenticate：代理服务器对客户端的认真信息</p><p>Retry-After：对再次发起请求的时机请求</p><p>Server：HTTP服务器的安装信息</p><p>Vary：代理服务器缓存的管理信息</p><p>WWW-Authenticate：服务器对客户端的认真信息</p></li><li><p>通用字段</p><p>Cache-Control：控制缓存的行为</p><p>Connection：逐跳首部、管理持久连接。不再转发的首部字段名。</p><p>Date：创建报文的日期时间</p><p>Pragma：报文指令</p><p>Trailer：报文末端的首部一览</p><p>Transfer-Encoding：指定报文主体的传输编码方式</p><p>Upgrade：升级为其他协议</p><p>Via：代理服务器的相关信息</p><p>Warning：错误通知</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(三)</title>
      <link href="/2021/07/10/mysql2/"/>
      <url>/2021/07/10/mysql2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库事务"><a href="#一、数据库事务" class="headerlink" title="一、数据库事务"></a>一、数据库事务</h2><ol><li>事务特性ACID<ul><li>原子性：事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做</li><li>一致性：事 务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。</li><li>隔离性：一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</li><li>持久性：也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。</li></ul></li><li>事务的隔离级别<ul><li>读未提交：在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。 脏读，不可重复读，幻读</li><li>读已提交：一个事务只能看见已经提交事务所做的改变 。不可重复读，幻读</li><li>可重复读：MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。幻读</li><li>串行化：最高的隔离级别，它通过强制事务排序，使之不可能相互冲突</li></ul></li><li>事务可能出现的问题<ul><li>脏读：一个事务读取到另一个事务还未提交的数据。</li><li>不可重复读：在一个事务中多次读取同一个数据时，结果出现不一致。</li><li>幻读：在一个事务中使用相同的 SQL 两次读取，第二次读取到了其他事务新插入的行。</li><li>更新丢失：多个事务对同一行数据更新时，后面的事务的更新结果会覆盖前面的事务。</li></ul></li><li>事务控制 </li></ol><h2 id="二、SQL锁"><a href="#二、SQL锁" class="headerlink" title="二、SQL锁"></a>二、SQL锁</h2><ol><li><p>锁的分类</p><ul><li>表锁：开销小，加锁快，不出现锁，并发度最低。</li><li>行锁：开销大，加锁慢，出现死锁，并发度最高。</li><li>页锁：在表锁和行锁之间，会死锁，并发度一般。</li></ul></li><li><p>MyISAM表锁</p><ul><li><p>表锁分为：表共享读锁和表独占写锁。</p></li><li><p>表锁的读和写请求时串行执行的。</p></li><li><p>当用户获得读锁，其他用户可以读，但不可以写，当用户获得写锁，其他用户读和写都不可以。</p></li><li><p>当select时，表会自动加读锁，当update,delete,insert时，会自动加写锁。</p></li><li><p>MyISAM支持查询和插入并发</p><p>concurrent_insert为0时，不允许插入并发</p><p>concurrent_insert为1时，当表中没有空洞(没有行被删除)时，可以并发插入</p><p>concurrent_insert为2时，支持并发插入</p></li><li><p>锁的调度</p><p>当两个线程同时读请求和写请求时，Mysql优先让写请求获得锁。</p><p>set  low_priority_insert\update\delete =1   通过此命令来改变优先级</p></li></ul></li><li><p>InnoDB行锁</p><ul><li>行锁分为：共享锁和排他锁</li><li>InnoDB行锁和表锁共存，内部使用两种意向锁，都是表锁。<ul><li>意向共享锁：事务在给一个行加共享锁之前，必须获得意向共享锁。</li><li>意向排他锁：事务在给一个行加排他锁之前，必须后的意向排他锁。</li></ul></li><li>锁的兼容<ul><li>当前锁是排他锁，则其他请求不能获得任何锁。</li><li>当前锁是共享锁，则其他请求可以获得共享锁和意向共享锁</li><li>当前锁是意向排他锁， 其他请求可以获得两个意向锁</li><li>当前锁是意向共享锁，其他请求不能获得排他锁。</li></ul></li><li>意向锁InnoDB自动添加，Update、Insert、Delete会自动为相关数据集加排他锁。select不会加锁。</li><li>InnoDB的行锁实现<ol><li>InnoDB的行锁分为：<ul><li>Record lock：对索引项加锁</li><li>Gap lock: 对索引项的之间的间隙加锁</li><li>Next-key lock:前两种的结合。</li></ul></li><li>InnoDB通过对索引加锁，所以如果InnoDB不通过索引检索数据，则将对表中所以数据加锁，相当于表锁。</li><li>InnoDB是对索引加的锁，如果用到相同的索引键，是会出现锁冲突的。</li><li>sql的执行是由内部优化器选择对应的执行计划的，所以锁冲突时，可能是因为优化器没有选用索引。</li><li>Next-key锁<ul><li>当我们使用范围条件查询的时候，对符合的索引项加锁，对符合但不存在的数据”间隙”加Gap锁。</li><li>当我们使用相等条件查询一个不存的值时，也会使用Next-key锁。</li></ul></li></ol></li></ul></li><li><p>死锁情况</p><ul><li>MyISAM表锁 采取串行，不会出现死锁现象</li><li>InnoDB的死锁情况<ol><li>当事务在并发时，事务互相拥有对方的锁，造成死锁。</li><li>优化死锁的方法；<ul><li>约定不同事务以相同的顺序访问表</li><li>对表内数据进行排序，以顺序访问数据</li></ul></li></ol></li></ul></li></ol><h2 id="三、WAL"><a href="#三、WAL" class="headerlink" title="三、WAL"></a>三、WAL</h2><ol><li><p>WAL(Write-ahead logging，预写式日志)是数据库系统提供原子性和持久化的一系列技术。指的是 MySQL 的写操作并不是立刻更新到磁盘上，而是先记录在日志上，然后在合适的时间再更新到磁盘上。日志主要分为 undo log、redo log、binlog。</p></li><li><p>redo log 和 undo log</p><ul><li>redo log称为重做日志，每当有操作时，在数据变更之前将操作写入redo log，系统可以在重启后继续操作。</li><li>undo log称为撤销日志，当一些变更执行到一半无法完成时，可以根据撤销日志恢复到变更之间的状态。</li></ul></li></ol><h2 id="四、MVCC"><a href="#四、MVCC" class="headerlink" title="四、MVCC"></a>四、MVCC</h2><ol><li><p>当前读和快照读</p><ul><li>当前读：加共享锁和排他锁操作都是一种当前读，就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。</li><li>快照读：不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；快照读的实现是基于多版本并发控制，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</li></ul></li><li><p>MVCC的实现基于记录中的 隐式字段，undo日志 ，Read View </p><p>隐式字段和undolog构成了数据版本链，查询时生成ReadView记录了活跃的事务，通过比较版本链的事务id和ReadView的活跃事务来确定访问数据的版本。</p><ul><li><p>隐式字段</p><ul><li>一个保存了行的事务ID（DB_TRX_ID），记录创建这条记录/最后一次修改该记录的事务ID。事务开启即更新。</li><li>一个保存了行的回滚指针（DB_ROLL_PT）。指向这条记录的上一个版本（存储于rollback segment里）</li><li>每开始一个新的事务，都会自动递增产生一个新的事务id。事务开始时刻的会把事务id放到当前事务影响的行事务id中，当查询时需要用当前事务id和每行记录的事务id进行比较。</li></ul></li><li><p>undolog</p><ul><li>保存了事务发生之前的数据的一个版本，可以用于回滚，同时可以提供多版本并发控制下的读（MVCC），也即非锁定读</li><li>根据行为的不同，undo log分为两种： insert undo log 和 update undo log<ul><li>insert 操作中产生的undo log，因为insert操作记录只对当前事务本身，对于其他事务此记录不可见，所以 insert undo log 可以在事务提交后直接删除而不需要进行purge操作。</li><li>update 或 delete 操作中产生的 undo log。 因为会对已经存在的记录产生影响，为了提供 MVCC机制，因此update undo log 不能在事务提交时就进行删除，而是将事务提交时放到入 history list 上，等待 purge 线程进行最后的删除操作。</li><li>为了实现InnoDB的MVCC机制，更新或者删除操作都只是设置一下老记录的deleted_bit，并不真正将过时的记录删除。为了节省磁盘空间，InnoDB有专门的purge线程来清理deleted_bit为true的记录。为了不影响MVCC的正常工作，purge线程自己也维护了一个read view（这个read view相当于系统中最老活跃事务的read view）;如果某个记录的deleted_bit为true，并且DB_TRX_ID相对于purge线程的read view可见，那么这条记录一定是可以被安全清除的。</li></ul></li></ul></li><li><p>ReadView </p><ul><li><p>判断所有版本中哪个版本是当前事务可见的处理。</p><p>包含内容：</p><ol><li>m_ids：表示在生成ReadView时当前系统中活跃的读写事务的事务id列表。</li><li>min_trx_id：表示在生成ReadView时当前系统中活跃的读写事务中最小的事务id，也就是m_ids中的最小值。</li><li>max_trx_id：表示生成ReadView时系统中应该分配给下一个事务的id值。</li><li>creator_trx_id：表示生成该ReadView的事务的事务id。查询事务开启时生成ReadView。</li></ol></li><li><p>对于查询时的版本链数据是否看见的判断逻辑：</p><p>下述访问版本均指数据行的版本链的某一个版本，即判断版本链上的哪个版本可以被访问。</p><ul><li>如果被访问版本的 trx_id 属性值小于 m_ids 列表中最小的事务id，表明生成该访问版本的事务在生成 ReadView 前已经提交，所以该版本可以被当前事务访问。</li><li>如果被访问版本的 trx_id 属性值大于 m_ids 列表中最大的事务id，表明生成该访问版本的事务在生成 ReadView 后才提交，所以该版本不可以被当前事务访问。</li><li>如果被访问版本的 trx_id 属性值在 m_ids 列表中最 大的事务id和最小事务id之间，那就需要判断一下 trx_id 属性值是不是在 m_ids 列表中，如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问。</li><li>如果被访问版本的trx_id属性值与ReadView中的creator_trx_id值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问。</li></ul></li></ul><img src="/2021/07/10/mysql2/eg1.png" class=""><p>取T5时刻，事务777的版本链</p><img src="/2021/07/10/mysql2/eg2.png" class=""><p>T5时刻，事务999的查询语句生成的的Readview</p><p>此时的ReadView的列表情况 m_ids：[777] ，判断版本链上的每一个版本的事务id和ReadView的id表。如上面版本链，最新版本777和上一个版本777均不符合，版本111符合。</p><p>取T8时刻，版本链</p><img src="/2021/07/10/mysql2/eg3.png" class=""><p>T8时刻的事务999的查询语句生成的ReadView，</p><p>此时的ReadView的列表情况 m_ids：[888] ，判断版本链上的每一个版本的事务id和ReadView的id表。如上面版本链，最新版本888不符合，版本777符合。</p><p>若T5的ReadView的列表情况 m_ids：[777] ,判断版本链上的每一个版本的事务id和ReadView的id表。版本888和两个版本777均不符合，版本111符合。</p></li><li><p>读已提交和可重复读的实现。 </p><p>READ COMMITED实现原理</p><p>每次读取数据前都生成一个ReadView</p><p>REPEATABLE READ</p><p>在第一次读取数据时生成一个ReadView</p></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql(二)</title>
      <link href="/2021/07/08/mysql/"/>
      <url>/2021/07/08/mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库储存引擎"><a href="#一、数据库储存引擎" class="headerlink" title="一、数据库储存引擎"></a>一、数据库储存引擎</h2><ol><li><p>数据库的储存引擎是一种机制，规定了应用如何存储引用数据。Mysql5.5之前默认的存储引擎是MyISAM，之后是InnoDB.</p></li><li><p>MyISAM和InnoDB</p><p>MyISAM</p><ul><li>采用表锁</li><li>B树索引和全文索引</li><li>MyISAM表在磁盘的存储文件<ul><li>.frm  表结构文件</li><li>.MYD  MYDATA  表的数据文件</li><li>.MYI   MYIndex   表的索引文件</li></ul></li></ul><p>InnoDB</p><ul><li>采用行锁</li><li>支持事务和外键</li><li>B树索引和集群索引</li><li>InnoDB表在磁盘的存储文件<ul><li>user.frm：表结构文件</li><li>user.ibd：索引和数据文件（InnoDB Data）</li></ul></li></ul></li></ol><h2 id="二、索引"><a href="#二、索引" class="headerlink" title="二、索引"></a>二、索引</h2><ol><li><p>索引的本质是一个数据结构。</p></li><li><p>Mysql的索引结构</p><ul><li><p>B树索引</p><p>B-Tree</p><img src="/2021/07/08/mysql/Qa.png" class=""><p>B+Tree</p><img src="/2021/07/08/mysql/image-20211004175244727.png" class="" title="image-20211004175244727"></li><li><p>hash索引</p><img src="/2021/07/08/mysql/image-20211004193746781.png" class="" title="image-20211004193746781"><p>哈希索引是基于哈希表实现，只有精确匹配索引所有列的查询才有效，对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码（hash code)，哈希码是一个较小的值，大部分情况下不同的键值的行计算出来的哈希码是不同的，但是也会有例外，就是说不同列值计算出来的hash值一样的（即所谓的hash冲突），哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每一个数据行的指针，hash很适合做索引，为某一列或几列建立hash索引，就会利用这一列或几列的值通过一定的算法计算出一个hash值，对应一行或几行数据</p></li><li><p>全文索引</p></li><li><p>集群索引</p></li></ul></li><li><p>联合索引</p><img src="/2021/07/08/mysql/image-20211002175058383.png" class=""><ul><li><p>最左匹配原则</p><p>假如一个联合索引为a,b,c；则检索(a,b,c)(a,b),(a,c)用到的这个联合索引，(b,c)不用这个索引</p><p>select * from table where id = a or name = b;select * from table where name=b or id=a;</p><p>上述两个语句均可用到索引abc,也就是说和语句中字段的顺序无关；</p></li></ul></li><li><p> 常用索引的情况</p></li><li><p>不能用索引的情况</p></li><li><p>索引失效</p></li><li><p>MyISAM和InnoDB的索引结构</p><ol><li><p>MyISAM</p><ul><li><p>MyISAM存储引擎的索引结构</p><p>MyISAM表的索引文件的key为索引列的数据，value为每个数据代表的行的磁盘地址</p></li></ul></li><li><p>InnoDB</p><img src="/2021/07/08/mysql/a.png" class=""><ul><li><p>InnoDB存储引擎的索引结构</p><p>InnoDB表的索引结构key为索引列的数据，每个key代表的整个行的数据也存储在索引表中。</p></li></ul></li></ol></li></ol><h2 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h2><h4 id="查询慢sql"><a href="#查询慢sql" class="headerlink" title="查询慢sql"></a>查询慢sql</h4><h4 id="查看分析sql执行情况"><a href="#查看分析sql执行情况" class="headerlink" title="查看分析sql执行情况"></a>查看分析sql执行情况</h4><ol><li><p>explain</p><p>explain +  sql 语句  可以分析这条语句的执行计划，得到如下结果  </p><img src="/2021/07/08/mysql/d.png" class=""><ul><li><p>select_type </p><ul><li>SIMPLE:简单，不使用表连接和子查询</li><li>PRIMARY：主查询，外层查询</li><li>UNION：UNION中的后面的查询</li><li>SUBQUERY：子查询中的第一个SELECT</li></ul></li><li><p>table</p><p>输出结果的表</p></li><li><p>type</p><ul><li>null&gt;system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all</li><li>all:全表扫描</li><li>index:遍历整个索引查询</li><li>range:索引范围扫描</li><li>ref: 采用非唯一索引</li><li>eq_ref：采用唯一索引，每个索引只对应一条数据</li><li>system\const：单表中至多只有一个匹配行</li><li>null:不用访问表，直接可以得到结果</li></ul></li><li><p>possible_keys</p><p>查询时可能使用的索引</p></li><li><p>key</p><p>查询时真正使用的索引</p></li><li><p>key_len</p><p>使用到索引字段的长度</p></li><li><p>ref</p></li><li><p>rows</p><p>扫描行数</p></li><li><p>Extra</p><p>执行说明</p></li></ul><p>show warnings</p><p>此命令可以查看mysql的内部优化器执行的sql语句</p></li><li><p>show profiles</p><ul><li>show profiles:列出执行sql的运行时间和queryID</li><li>show  profile  for query  query_ID :查看某个sql语句执行的各项具体时间</li><li>show profile  cpu\all\io…  for  query query_ID  查看明细类型的时间消耗</li></ul></li><li><p>show status</p><p>SHOW STATUS命令会显示每个服务器变量的名字和值</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html">https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html</a>  列出了不同的变量含义</p></li><li><p>trace  分析优化器如何选择执行文件 </p></li></ol><h4 id="sql优化措施"><a href="#sql优化措施" class="headerlink" title="sql优化措施"></a>sql优化措施</h4><ol><li><p>选择正确的数据类型</p><ul><li>选择储存空间小的</li><li>选择类型简单的</li><li>避免null值存在，null值存在使得索引相关更加复杂</li></ul></li><li><p>schema设计</p><ul><li><p>不要有太多的列</p><p>存储引擎在工作时，将缓冲数据在服务层转换，列数过多，资源消耗大</p></li><li><p>不要有太多的表关联</p></li><li><p>不要过度使用枚举</p></li></ul></li><li><p>查询优化</p><ul><li><p>不要查询到不需要的数据</p><ul><li><p>查询不需要的记录</p><p>如：select查询大量的结果，但只获取前N条记录，理想是需要几条就查几条</p></li><li><p>多表联查时，返回全部列，只返回需要的列最佳</p></li><li><p>select *</p></li><li><p>重复查相同的数据，可以将需要的数据查一次后缓存，不用重复查</p></li></ul></li><li></li><li><p>重构sql</p><ul><li><p>可以将一个复杂的查询分为数个简单查询</p></li><li><p>切分查询</p><p>将数据分段，每次完成查询的一部分</p></li><li><p>可能的情况下，分解关联查询，将join关联分为几个简单查询</p><p>缓存效率更高</p><p>减少锁的竞争</p></li></ul></li><li></li><li></li><li></li><li><p>数据库三范式和反范式</p><p>第一范式：要求表中业务字段，逻辑上不可再分</p><p>第二范式：要求表中必须存在业务主键 (单一业务主键 或 联合业务主键)<br>非业务主键，必须依赖于 单一业务主键 或 全部的联合业务主键</p></li></ul></li></ol><p>第三范式：要求非业务主键列不能相互依赖</p><p>反范式化设计数据库，是为了用空间换时间，提高查询效率</p><p><strong>第一范式（1NF）：</strong> <strong>强调的是列的原子性，即列不能够再分成其他几列。</strong>    </p><p> <strong>第二范式（2NF）：</strong> <strong>首先要满足它是1NF，另外还需要包含两部分内容：一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。</strong></p><p> <strong>第三范式（3NF）：</strong> <strong>首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql(一)</title>
      <link href="/2021/07/05/mysql1/"/>
      <url>/2021/07/05/mysql1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Mysql概述"><a href="#一、Mysql概述" class="headerlink" title="一、Mysql概述"></a>一、Mysql概述</h2><h2 id="二、基准测试"><a href="#二、基准测试" class="headerlink" title="二、基准测试"></a>二、基准测试</h2><ol><li><p>基准测试策略</p><p>集成式：针对整个系统测试</p><p>单组件式：针对Mysql单独测试</p></li><li><p>测试指标</p><ul><li>吞吐量：单位时间的处理事务量。</li><li>响应时间和延迟：测试任务所需时间</li><li>并发性：同时请求的线程数或连接数，以及并发数提高后，对其他性能的影响。</li><li>可扩展性：给系统增加一倍的资源，就可以获得两倍的效益。</li></ul></li><li><p>测试方法</p></li><li><p>测试工具</p><ul><li>集成式<ul><li>ab</li><li>http_load</li><li>JMeter</li></ul></li><li>单组件式<ul><li>mysqlslap</li><li>MySQL Benchmark Suite</li><li>Super Smack</li><li>Database Test Suite</li><li>sysbench</li></ul></li></ul></li></ol><h2 id="三、MySQL分区"><a href="#三、MySQL分区" class="headerlink" title="三、MySQL分区"></a>三、MySQL分区</h2><ol><li><p>分区：数据库中的一个表，按照规则分为若干个小表，不影响业务逻辑。</p></li><li><p>分区的优点</p><ul><li>可以储存更多的数据</li><li>优化查询，where包含分区条件时，可以只扫描几个分区表来提高效率，sum()等聚合函数在分区上处理更高效</li><li>删除无效的数据通过删除相关的分区，效率更高</li><li>分散数据，增加吞吐量</li></ul></li><li><p>分区概述</p><ul><li>分区根据分区键来分区，分区键可以是区间值，特定值，Hash函数等</li><li>同一个表的所有分区必须使用同一个储存引擎，不同表之间可以不同</li><li>分区类型<ul><li>RANGE</li><li>LIST</li><li>HASH</li><li>KEY</li></ul></li><li>5.1版本分区键类型必须是INT(KEY分区时可以使用BLOB、TEXT之外的类型)，5.5后RANGE和LIST支持非整数分区</li><li>如果表有主键或唯一键，其必须包含分区键，即分区表不能用主键\唯一键之外的键作为分区键分区</li></ul></li><li><p>各个分区</p><ul><li><p>RANGE</p><p>常用于分组删除和分组查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>    empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    deptno <span class="token keyword">int</span><span class="token punctuation">,</span>    birthdate <span class="token keyword">date</span><span class="token punctuation">,</span>    salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--分区的最后一个表的范围为maxvalue，因为如果指定3000，当增加数据大于3000时，则报错--></span><span class="token keyword">partition</span> <span class="token keyword">by</span> range<span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">partition</span> p1 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">partition</span> p2 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">partition</span> p3 <span class="token keyword">values</span> less than maxvalue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--在日期或字符串上进行分区，要使用函数转化--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--日期转换函数</span><span class="token keyword">year</span><span class="token punctuation">(</span><span class="token punctuation">)</span>to_days<span class="token punctuation">(</span><span class="token punctuation">)</span>to_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--></span><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>    empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    deptno <span class="token keyword">int</span><span class="token punctuation">,</span>    birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">partition</span> <span class="token keyword">by</span> range<span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">partition</span> p1 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">1980</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">partition</span> p2 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">partition</span> p3 <span class="token keyword">values</span> less than maxvalue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>LIST</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>    empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    deptno  <span class="token keyword">int</span><span class="token punctuation">,</span>    birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--通过枚举值来分区--></span><span class="token keyword">partition</span> <span class="token keyword">by</span> list<span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">partition</span> p1 <span class="token keyword">values</span> <span class="token operator">in</span>  <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">partition</span> p2 <span class="token keyword">values</span> <span class="token operator">in</span>  <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">partition</span> p3 <span class="token keyword">values</span>  <span class="token operator">in</span>  <span class="token punctuation">(</span><span class="token number">30</span>，<span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>HASH</p><ul><li>两种分区：常规取模分区，线性二次幂分区</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">int</span><span class="token punctuation">,</span>birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">partition</span> <span class="token keyword">by</span> <span class="token keyword">hash</span><span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span><span class="token punctuation">)</span>partitions <span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--线性，+linear--></span><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">int</span><span class="token punctuation">,</span>birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">partition</span> <span class="token keyword">by</span> linear <span class="token keyword">hash</span><span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span><span class="token punctuation">)</span>partitions <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>KEY</p><ul><li>key按照MySQL提供的hash函数分区 </li><li>若不指定，则主键为分区键，若无主键，非空唯一键为分区键</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deptno <span class="token keyword">int</span><span class="token punctuation">,</span>birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">partition</span> <span class="token keyword">by</span> <span class="token keyword">key</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span>partitions <span class="token number">4</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>COLUMNS分区</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--</span>整数类型：<span class="token keyword">tinyint</span>、<span class="token keyword">smallint</span>、<span class="token keyword">mediumint</span>、<span class="token keyword">int</span>、<span class="token keyword">bigint</span>日期时间类型：<span class="token keyword">date</span>、<span class="token keyword">datetime</span>字符类型：<span class="token keyword">char</span>、<span class="token keyword">varchar</span>、<span class="token keyword">binary</span>、<span class="token keyword">varbinary</span><span class="token punctuation">,</span>不支持<span class="token keyword">text</span>和<span class="token keyword">blob</span><span class="token comment">--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--多列分区</span>a<span class="token punctuation">,</span>b两个分区键<span class="token comment">--></span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_range_test <span class="token punctuation">(</span>    a <span class="token keyword">INT</span><span class="token punctuation">,</span>    b <span class="token keyword">INT</span> <span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token keyword">COLUMNS</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--</span>    less than <span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span>    分区条件判断：a值小于num1 <span class="token operator">or</span> a值等于num1<span class="token punctuation">,</span>b值小于num2    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>分在p2  <span class="token number">1</span><span class="token operator">&lt;</span><span class="token number">10</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> <span class="token number">10</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>分在p2  <span class="token number">10</span><span class="token operator">&lt;</span><span class="token number">10</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> <span class="token number">9</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>分在p3 <span class="token number">10</span><span class="token operator">&lt;</span><span class="token number">10</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> <span class="token number">10</span><span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment">--></span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span>MAXALUE<span class="token punctuation">,</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子分区</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ts <span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">,</span> purchased <span class="token keyword">DATE</span><span class="token punctuation">)</span>    <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span><span class="token keyword">YEAR</span><span class="token punctuation">(</span>purchased<span class="token punctuation">)</span><span class="token punctuation">)</span>    SUBPARTITION <span class="token keyword">BY</span> <span class="token keyword">HASH</span><span class="token punctuation">(</span>TO_DAYS<span class="token punctuation">(</span>purchased<span class="token punctuation">)</span><span class="token punctuation">)</span>    SUBPARTITIONS <span class="token number">2</span>    <span class="token punctuation">(</span>        <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE    <span class="token punctuation">)</span>； <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--</span> 表ts 有<span class="token number">3</span>个RANGE分区。这<span class="token number">3</span>个分区中的每一个分区p0<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> 和 p2<span class="token punctuation">,</span>又被进一步分成了<span class="token number">2</span>个子分区。 P0分为两个子区，两个子区值均小于<span class="token number">1990</span> p1分为两个子区，值均小于<span class="token number">2000</span> p3分为两个子区，小于maxvalue <span class="token comment">--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>null值得处理</p><ul><li>RANGE: 当做最小值处理</li><li>LIST：Null值必须在枚举中写出，否则不接受</li><li>HASH\KEY: 当做零值处理</li></ul></li><li><p>分区管理</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--删除分区</span>删除 RANGE和LIST分区<span class="token punctuation">,</span>删除分区之后，连同分区中的数据一同删除RANGE分区删除之后，增加数据后会分配到其他分区LIST分区删除之后，不能再添加已删除的分区键的数据<span class="token comment">--></span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">drop</span> <span class="token keyword">partition</span> p_numeg：<span class="token keyword">alter</span> <span class="token keyword">table</span> ts <span class="token keyword">drop</span> <span class="token keyword">partition</span> p1<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--增加分区</span>RANGE：只能在最大端加<span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">add</span> <span class="token keyword">partition</span><span class="token punctuation">(</span><span class="token keyword">partition</span> p5 <span class="token keyword">values</span> less than <span class="token punctuation">(</span>maxvalues<span class="token punctuation">)</span><span class="token punctuation">)</span> LIST<span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">add</span> <span class="token keyword">partition</span>（<span class="token keyword">partition</span> p5 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span>）<span class="token comment">--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--重新定义分区:保存原数据的情况下，同时改变结构</span>重新定义只能定义相邻的分区，不能跨分区，同时重新定义的范围必须原分区覆盖相同的范围，也不能改变分区表的类型<span class="token comment">--></span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name reorganize <span class="token keyword">partition</span> <span class="token keyword">into</span> xxxRANGE:将p3<span class="token punctuation">(</span><span class="token number">2005</span><span class="token operator">-</span><span class="token number">2015</span><span class="token punctuation">)</span>分为p2<span class="token punctuation">(</span><span class="token number">2005</span><span class="token operator">-</span><span class="token number">2010</span><span class="token punctuation">)</span>p3<span class="token punctuation">(</span><span class="token number">2010</span><span class="token operator">-</span><span class="token number">2015</span><span class="token punctuation">)</span><span class="token keyword">alter</span> <span class="token keyword">table</span> ts reorganize <span class="token keyword">partition</span> p3 <span class="token keyword">into</span> <span class="token punctuation">(</span>        <span class="token keyword">partition</span> p2 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">2010</span><span class="token punctuation">)</span>        <span class="token keyword">partition</span> p3 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    将p2<span class="token punctuation">(</span><span class="token number">2005</span><span class="token operator">-</span><span class="token number">2010</span><span class="token punctuation">)</span>p3<span class="token punctuation">(</span><span class="token number">2010</span><span class="token operator">-</span><span class="token number">2015</span><span class="token punctuation">)</span>合并为一个P3<span class="token punctuation">(</span><span class="token number">2005</span><span class="token operator">-</span><span class="token number">1015</span><span class="token punctuation">)</span>    <span class="token keyword">alter</span> <span class="token keyword">table</span> ts reorganize <span class="token keyword">partition</span> p2<span class="token punctuation">,</span>p3 <span class="token keyword">into</span> <span class="token punctuation">(</span>        <span class="token keyword">partition</span> p3 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>        LIST:    现有 p4 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    p5 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    将p4 变为 p4 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">alter</span> <span class="token keyword">table</span> ts <span class="token keyword">add</span> <span class="token keyword">partition</span> p6<span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">alter</span> <span class="token keyword">table</span> ts reorganize <span class="token keyword">partition</span> p4<span class="token punctuation">,</span>p5<span class="token punctuation">,</span>p6 <span class="token keyword">into</span> <span class="token punctuation">(</span>            <span class="token keyword">partition</span> p4 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>            <span class="token keyword">partition</span> p5 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--HASH和KEY分区管理--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--不能通过删除来减少分区，只能通过合并来减少--></span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">coalesce</span> <span class="token keyword">partition</span> <span class="token number">2</span>；<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--分区将合成为2个--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--增加分区--></span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">add</span> <span class="token keyword">partition</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--原来只有两个分区，增加2个，现在是四个--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="三、存储过程和函数"><a href="#三、存储过程和函数" class="headerlink" title="三、存储过程和函数"></a>三、存储过程和函数</h2><ol><li><p>概念</p><p>存储过程和函数是预先编译并存储在数据库中的一段SQL的集合，区别在于函数必须有返回值，存储过程的参数可以是IN,OUT,INOUT而函数只能是IN。</p></li><li><p>相关命令操作</p><ul><li><p>储存过程的创建<br>CREATE PROCEDURE 创建的存储过程名字(OUT|IN|INOUT 参数名 数据类型,…,…) 特征 过程体;</p><img src="/2021/07/05/mysql1/image-20211008004247560.png" class="" title="image-20211008004247560"><ul><li>特征值：<ul><li>LANGUAGE SQL：表明过程体使用SQL语言</li><li>[NOT] DETERMINISTIC : 每次输入一样，输出也一样的程序</li><li>{CONTAINS SQL|NO SQL|READS SQL DATA|MODIFIES DATA}<ul><li>CONTAINS SQL:子程序不包括读出后写的语句，默认值</li><li>NO SQL:自程序不包括SQL语句。</li><li>READS SQL DATA:包含读语句，不包含写</li><li>MPDIFIES DATA:包含写语句，不包括读语句</li></ul></li><li>SQL SECURITY {DEFINER|INVOKER}<ul><li>DEFINER 创建者许可执行</li><li>INVOKER 调用者许可执行</li></ul></li><li>COMMENT：注释信息</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $$<span class="token keyword">create</span> <span class="token keyword">procedure</span> GetScores<span class="token punctuation">(</span><span class="token keyword">out</span> minScore <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">out</span> avgScore <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">out</span> maxScore <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">into</span> minScore <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">into</span> avgScore <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">into</span> maxScore <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>函数的创建</p><p>CREATE FUNCTION 创建的存储函数名字(参数名称 参数类型,…,…)  RETURNS 返回值得类型  函数体;</p><img src="/2021/07/05/mysql1/image-20211008140250954.png" class="" title="image-20211008140250954"><pre class="line-numbers language-none"><code class="language-none">DELIMITER $$CREATE FUNCTION func_employee_sal (empno INT(11))   &#x2F;&#x2F;传入值    RETURNS DOUBLE(10,2)     &#x2F;&#x2F;返回值COMMENT&#39;查询某个雇员的工资&#39;BEGIN    RETURN (SELECT sal        FROM t_employee        WHERE t_employee.empno&#x3D;empno);END$$DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">procedure</span><span class="token operator">|</span><span class="token keyword">function</span> sp_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">procedure</span><span class="token operator">|</span><span class="token keyword">function</span> <span class="token keyword">status</span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span><span class="token operator">|</span><span class="token keyword">function</span> sp_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>变量的使用   </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> var_name<span class="token punctuation">[</span><span class="token punctuation">,</span>…<span class="token punctuation">]</span> <span class="token keyword">type</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> <span class="token keyword">value</span><span class="token punctuation">]</span><span class="token keyword">SET</span> var_name<span class="token operator">=</span>expr<span class="token punctuation">[</span><span class="token punctuation">,</span>…<span class="token punctuation">]</span><span class="token keyword">declare</span> prodDiscRate <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">set</span> prodDiscRate <span class="token operator">=</span> <span class="token number">0.88</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>条件定义和处理</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">---条件创建--></span> <span class="token keyword">DECLARE</span> condition_name CONDITION <span class="token keyword">FOR</span> <span class="token punctuation">[</span>condition_type<span class="token punctuation">]</span>SQLSTATE <span class="token punctuation">[</span><span class="token keyword">VALUE</span><span class="token punctuation">]</span> sqlstate_value <span class="token operator">|</span> mysql_erroe_code condition_type：条件类型，用于定义MySQL的错误，SQLSTATE是长度为<span class="token number">5</span>的字符串类型的错误代码； mysql_error_code是数值类型的错误代码。 例如ERROR <span class="token number">1142</span>（<span class="token number">42000</span>），sql_state_value的值是<span class="token string">'42000'</span>，mysql_error_code的值是<span class="token number">1142</span>。  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--条件处理--></span> <span class="token keyword">DECLARE</span> handler_type <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span>  condition_value<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> sp_statement（<span class="token number">1</span>）handler_type：指定错误处理方式    <span class="token keyword">CONTINUE</span>：遇到错误不处理，继续执行    <span class="token keyword">EXIT</span>：遇到错误立即退出    UNDO：遇到错误撤回之前的操作（<span class="token number">2</span>）condition_value：表示错误类型    SQLSTATE <span class="token punctuation">[</span><span class="token keyword">VALUE</span><span class="token punctuation">]</span> sqlstate_value：包含<span class="token number">5</span>个字符的字符串错误值    mysql_error_code：数值类型的错误代码    cond_name：定义条件的名称    SQLWARNING：匹配所有以<span class="token number">01</span>开头的SQLSTATE错误代码    <span class="token operator">NOT</span> FOUND：匹配所有以<span class="token number">02</span>开头的SQLSTATE错误代码    <span class="token keyword">SQL</span> EXCEPTION：匹配所有没有被SQLWARNING或<span class="token operator">NOT</span> FOUND捕获的SQLSTATE错误代码（<span class="token number">3</span>）sp_statement    程序语句段，表示在遇到定义的错误时执行的存储过程或函数。     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h2 id="四、触发器"><a href="#四、触发器" class="headerlink" title="四、触发器"></a>四、触发器</h2><ol><li></li><li><p>ss</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> 创建的触发器名字 BEFFOR<span class="token operator">|</span><span class="token keyword">AFTER</span>  <span class="token keyword">INSERT</span><span class="token operator">|</span><span class="token keyword">UPDATE</span><span class="token operator">|</span><span class="token keyword">DELETE</span><span class="token keyword">ON</span> 表名字 <span class="token keyword">FOR</span>  触发器的执行间隔   触发器的<span class="token keyword">SQL</span>语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2021/07/05/mysql1/image-20211008140419066.png" class="" title="image-20211008140419066"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> t1 <span class="token keyword">after</span><span class="token keyword">insert</span><span class="token keyword">on</span> ord<span class="token keyword">for each row</span><span class="token keyword">begin</span><span class="token keyword">update</span> goods <span class="token keyword">set</span> num<span class="token operator">=</span>num<span class="token operator">-</span><span class="token number">2</span> <span class="token keyword">where</span> gid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>查看已有触发器：<span class="token keyword">show</span> triggers    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>删除已有触发器：<span class="token keyword">drop</span> <span class="token keyword">trigger</span> triggerName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>触发器中引用行变量</p><p>（1）在触发目标上执行insert操作后会有一个新行，如果在触发事件中需要用到这个新行的变量，可以用new关键字表示<br>（2）在触发目标上执行delete操作后会有一个旧行，如果在触发事件中需要用到这个旧行的变量，可以用old关键字表示<br>（3）在触发目标上执行update操作后原纪录是旧行，新记录是新行，可以使用new和old关键字来分别操作</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-collection</title>
      <link href="/2021/06/26/collection/"/>
      <url>/2021/06/26/collection/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-线程</title>
      <link href="/2021/06/23/java3/"/>
      <url>/2021/06/23/java3/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-异常</title>
      <link href="/2021/06/22/java2/"/>
      <url>/2021/06/22/java2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-面向对象</title>
      <link href="/2021/06/20/java1/"/>
      <url>/2021/06/20/java1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-基础</title>
      <link href="/2021/06/19/java/"/>
      <url>/2021/06/19/java/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
