<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javaweb</title>
      <link href="/2021/11/10/javaweb/"/>
      <url>/2021/11/10/javaweb/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Servlet"><a href="#一、Servlet" class="headerlink" title="一、Servlet"></a>一、Servlet</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1.概述"></a>1.1.概述</h3><h3 id="1-2-Servlet接口实现类开发步骤"><a href="#1-2-Servlet接口实现类开发步骤" class="headerlink" title="1.2.Servlet接口实现类开发步骤"></a>1.2.Servlet接口实现类开发步骤</h3><ul><li>第一步：创建一个Java类继承与HttpServlet</li><li>第二步：重写HttpServlet父类两个方法。doGet或则doPost</li><li>第三步：将Servlet接口实现类注册到web.xml中        </li></ul><h3 id="1-3-HttpServletResponse接口"><a href="#1-3-HttpServletResponse接口" class="headerlink" title="1.3.HttpServletResponse接口"></a>1.3.HttpServletResponse接口</h3><ul><li>告诉浏览器数据类型 setContentType（）</li><li>设置respon的编码格式 setCharacterEnconding（）</li><li>返回服务器的预设错误网址并显示错误信息 sendError（）</li><li>重定向页面 sendRedirect（）</li><li>获取通向浏览器的字节流 getOutputStream（）</li><li>获取通向浏览器的字符流 getWriter（）</li><li>回传路径 encodeRedirectURL（）</li><li>setHeader()设置消息头</li><li>setStatus()设置状态</li><li>addCookie()添加Cookie4.HttpServletRequest接口</li></ul><h3 id="1-4-HttpServletRequest接口"><a href="#1-4-HttpServletRequest接口" class="headerlink" title="1.4.HttpServletRequest接口"></a>1.4.HttpServletRequest接口</h3><ul><li>获取请求的方式 getMethod（）</li><li>目录的路径 getContextPath（）</li><li>获取servlet路径 getServletString（）</li><li>获得get请求参数 getQueryString（）</li><li>获取请求的url getRequestURL（）  getRequestURI（）</li><li>获得协议版本 getProtocol（）</li><li>获取客户的ip getRemoteAddr（）</li><li>获取请求参数的通用方式<ul><li>getParameter（String name）</li><li>根据参数的名称获得参数的数组 getParameterValues（String name）</li><li>获取所有请求参数的名称 getParameterNames（）</li><li>获得所有参数的集合 getParameterMap（）</li><li>获取session 对象 getSession（）     </li></ul></li></ul><h3 id="1-5-Http状态码"><a href="#1-5-Http状态码" class="headerlink" title="1.5.Http状态码"></a>1.5.Http状态码</h3><ul><li>1XX : 信息状态码，正在处理中<ul><li>100，返回的资源不是独立的资源,需在接收响应包后，向服务器要依赖的其他资源文件</li></ul></li><li>2XX： 成功状态码<ul><li>200，服务器处理请求成功并返回资源，成功结束请求。</li><li>204，服务器处理请求成功，但无资源返回。</li><li>206，请求对资源规定范围，成功处理，并返回部分资源。</li></ul></li><li>3xx:  重定向码<ul><li>302，通知浏览器本次返回的不是一个资源文件内容而是一个资源文件地址，需要浏览器根据这个地址自动发起请求来索要这个资源文件response.sendRedirect(“资源文件地址”)写入到响应头中Location而这个行为导致Tomcat将302状态码写入到状态行</li></ul></li><li>4XX: 客户端错误码<ul><li> 400: 报文错误，请求语法出现错误。</li><li> 403: 对于请求资源，服务器拒绝访问</li><li>404: 通知浏览器，由于在服务端没有定位到被访问的资源文件因此无法提供帮助</li><li>405：服务端已经定位到被访问的资源文件但对于浏览器采用的请求方式不能处理</li><li>415：资源媒体格式错误，与content-type 相关</li></ul></li><li>5xx: 服务器错误码<ul><li>500:通知浏览器，在服务端已经定位到被访问的资源文件且可以接收浏览器采用请求方式，在处理期间，Java异常导致处理失败</li></ul></li></ul><h2 id="二、Filter"><a href="#二、Filter" class="headerlink" title="二、Filter"></a>二、Filter</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1.介绍"></a>2.1.介绍</h3><p>Filter接口在Http服务器调用资源文件前，对Http服务器进行拦截</p><h3 id="2-2-Filter接口实现类开发步骤："><a href="#2-2-Filter接口实现类开发步骤：" class="headerlink" title="2.2.Filter接口实现类开发步骤："></a>2.2.Filter接口实现类开发步骤：</h3><ol><li><p>创建一个Java类实现Filter接口</p></li><li><p>重写Filter接口中doFilter方法</p></li><li><p>web.xml将过滤器接口实现类注册到Http服务器</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>myfilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>MyFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>myfilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/lx.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-3-Filter的方法"><a href="#2-3-Filter的方法" class="headerlink" title="2.3.Filter的方法"></a>2.3.Filter的方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token comment">//初始化方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> doFilter <span class="token punctuation">(</span> <span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain <span class="token punctuation">)</span>；<span class="token comment">//过滤方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 销毁时调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-4-Filter拦截地址格式"><a href="#2-4-Filter拦截地址格式" class="headerlink" title="2.4.Filter拦截地址格式"></a>2.4.Filter拦截地址格式</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--以指定资源匹配。例如"/index.jsp"以目录匹配。例如"/servlet/*"以后缀名匹配，例如"*.jsp"通配符，拦截所有web资源。"/*"--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>oneFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>拦截地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Listener"><a href="#三、Listener" class="headerlink" title="三、Listener"></a>三、Listener</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1.介绍"></a>3.1.介绍</h3><p>监听器接口需要由开发人员亲自实现，程序员在实现之后，要在web.xml中声明</p><p>监听web对象创建与销毁.</p><p>监听web对象的属性变化</p><p>监听session绑定javaBean操作.</p><h3 id="3-2-监听器"><a href="#3-2-监听器" class="headerlink" title="3.2.监听器"></a>3.2.监听器</h3><ul><li><p>ServletContext：全局作用域</p><ul><li><p>对象创建和销毁 ServletContextListener</p></li><li><p>属性变化  ServletContextAttributeListener</p></li></ul></li><li><p>HttpSession : 会话作用域对象</p><ul><li>创建和销毁 HTTPSessionListener</li><li>属性变化  HttpSessionAttributeListener</li></ul></li><li><p>HttpServletRequest:请求作用域对象</p><ul><li>创建和销毁 ServletRequestListener</li><li>属性变化  ServletRequestAttributeListener</li></ul></li><li><p>监听session绑定javaBean(向session中set对象的时候触发</p><ul><li>HttpSessionBindingListener        </li><li>HttpSessionActivationListener</li></ul></li></ul><h3 id="3-3-监听器接口实现类开发规范："><a href="#3-3-监听器接口实现类开发规范：" class="headerlink" title="3.3.监听器接口实现类开发规范："></a>3.3.监听器接口实现类开发规范：</h3><ul><li>根据监听的实际情况，选择对应监听器接口进行实现</li><li>重写监听器接口声明【监听事件处理方法】</li><li>在web.xml文件将监听器接口实现类注册到Http服务器</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>Listen接口实现类的精准地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-4-ServletContextListener接口："><a href="#3-4-ServletContextListener接口：" class="headerlink" title="3.4.ServletContextListener接口："></a>3.4.ServletContextListener接口：</h3><ul><li>public void contextInitlized() :在全局作用域对象被Http服务器初始化被调用</li><li>public void contextDestory() : 在全局作用域对象被Http服务器销毁时候触发调用</li></ul><h3 id="3-5-ServletContextAttributeListener接口"><a href="#3-5-ServletContextAttributeListener接口" class="headerlink" title="3.5.ServletContextAttributeListener接口:"></a>3.5.ServletContextAttributeListener接口:</h3><ul><li>public void contextAdd():在全局作用域对象添加共享数据</li><li>public void contextReplaced():在全局作用域对象更新共享数据</li><li>public void contextRemove():在全局作用域对象删除共享数据</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-数据库编程</title>
      <link href="/2021/10/23/java5/"/>
      <url>/2021/10/23/java5/</url>
      
        <content type="html"><![CDATA[<h2 id="一、JDBC"><a href="#一、JDBC" class="headerlink" title="一、JDBC"></a>一、JDBC</h2><h3 id="1-JDBC的步骤"><a href="#1-JDBC的步骤" class="headerlink" title="1.JDBC的步骤"></a>1.JDBC的步骤</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第一步：注册驱动（作用：告诉Java程序，即将要连接的是哪个品牌的数据库）</span><span class="token comment">//第一种  </span>    <span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种常用的  类加载执行 </span>    <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二步：获取连接（表示JVM的进程和数据库进程之间的通道打开了，这属于进程之间的通信，重量级的，使用完之后一定要关闭通道。）</span>      <span class="token comment">/*url:统一资源定位符(网络资源的绝对地址)协议jdbc:mysql://IP127.0.0.1PORT (端口)3306资源名bjpowernode通信协议是通信之前就提前定好的数据传送格式；*/</span><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/bjpowernode"</span><span class="token punctuation">;</span><span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token class-name">String</span> password <span class="token operator">=</span><span class="token string">"admin123"</span><span class="token punctuation">;</span>conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*DriverManager  工厂类 用于获取连接*/</span><span class="token comment">//第三步：获取数据库操作对象（专门执行sql语句的对象）</span><span class="token comment">//第四步：执行SQL语句（DQL DML....）</span><span class="token comment">//第一种：</span>            <span class="token class-name">Stateme</span> statement<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取数据库操作对象</span>  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into dept(deptno,dname,loc) values(70,'人事部','北京')"</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//专门执行DML增删改查，返回值是影响数据库中的记录条数</span><span class="token class-name">String</span> select <span class="token operator">=</span> <span class="token string">"select ename,sal,empno from emp"</span><span class="token punctuation">;</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>select<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//专门执行DQL语句查</span>           <span class="token comment">/*execute：执行查询语句，有结果集返回true，无则false*/</span><span class="token comment">//第二种：</span>            <span class="token class-name">String</span> select <span class="token operator">=</span> <span class="token string">"select * from t_user where inname =? and password =?"</span><span class="token punctuation">;</span>  <span class="token comment">// ？ 称为 占位符</span>            insert into 表<span class="token punctuation">(</span>字段名<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             delete from 表名 where 字段 <span class="token operator">=</span> ？；            update 表名 set 字段名 <span class="token operator">=</span> ？where 字段名 <span class="token operator">=</span> ？；预编译：<span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>增删改            <span class="token keyword">int</span> count <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将值传给占位符，不再编译</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1 代表第一个占位符</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2 代表第二个占位符</span><span class="token comment">//第五步：处理查询结果集（只有当第四步执行的是select语句的时候，才有这第五步处理查询结果集。）</span>            rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> b <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//next 相当于一个指针，指向下一行，然后对指向的这一行进行输出。</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//指针，指向下一行，若有数据返回true</span>            <span class="token comment">//以不同的类型返回，括号中参数可以列的下标(从1开始)，也可以是列名(当用as改列名时，要用改过的列名)</span>            <span class="token keyword">int</span> empno <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"empno"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">double</span> sal <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token string">"sal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> ename <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"ename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>empno<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>ename<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//第六步：释放资源（使用完资源之后一定要关闭资源。Java和数据库属于进程间的通信，开启之后一定要关</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、SQL"><a href="#二、SQL" class="headerlink" title="二、SQL"></a>二、SQL</h2><h3 id="1-SQL、DB、DBMS"><a href="#1-SQL、DB、DBMS" class="headerlink" title="1.SQL、DB、DBMS"></a>1.SQL、DB、DBMS</h3><ul><li>DB: DataBase（数据库，数据库实际上在硬盘上以文件的形式存在）</li><li>DBMS: DataBase Management System（数据库管理系统，常见的有：MySQL Oracle DB2 Sybase SqlServer…）</li><li>SQL: 结构化查询语言，是一门标准通用的语言。标准的sql适合于所有的数据库产品。</li></ul><h3 id="2-表：table"><a href="#2-表：table" class="headerlink" title="2.表：table"></a>2.表：table</h3><p>表：table是数据库的基本组成单元，所有的数据都以表格的形式组织，目的是可读性强。一个表包括行和列：行：被称为数据/记录(data)；列：被称为字段(column)。</p><h3 id="3-SQL语句"><a href="#3-SQL语句" class="headerlink" title="3.SQL语句"></a>3.SQL语句</h3><h4 id="3-1-分类"><a href="#3-1-分类" class="headerlink" title="3.1.分类"></a>3.1.分类</h4><ul><li>DQL（数据查询语言）: 查询语句，凡是select语句都是DQL。</li><li>DML（数据操作语言）：insert delete update，对表当中的数据进行增删改。</li><li>DDL（数据定义语言）：create drop alter，对表结构的增删改。</li><li>TCL（事务控制语言）：commit提交事务，rollback回滚事务(savepoint 保存点相当于存档)</li></ul><h4 id="3-2-DQL"><a href="#3-2-DQL" class="headerlink" title="3.2.DQL"></a>3.2.DQL</h4><h5 id="3-2-1-基本语法"><a href="#3-2-1-基本语法" class="headerlink" title="3.2.1.基本语法"></a>3.2.1.基本语法</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">,</span>字段名<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(1) 字段可以参与数学运算。当有数据为null时，所有运算结果都是null；</p><p>(2) 可以用as给查询结果的列重命名；select 字段名1,字段名2,字段名3,….as 新表名 from 表名;</p><p>(3) 标准sql语句中要求字符串使用单引号括起来。虽然mysql支持双引号，尽量别用。as关键字可以省略</p><h5 id="3-2-2-where"><a href="#3-2-2-where" class="headerlink" title="3.2.2.where"></a>3.2.2.where</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> 字段<span class="token punctuation">,</span>字段<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span>表名<span class="token keyword">where</span>条件<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(1) 执行顺序：先from，然后where，最后select</p><p>(2) 比较运算符：&lt;,&lt;=,&gt;,&gt;=,!=,&lt;&gt;,</p><pre><code>  逻辑运算符：and，or，not</code></pre><p>(3) 范围查询：between..and..(between and 查询数字时，为闭区间,查询字符串时，为左闭右开),in(…,…,具体值),</p><p>模糊查询：like(%代表多个字符，代表一个字符，若要查%或_用\转义符号)</p><h5 id="3-2-3-order-by"><a href="#3-2-3-order-by" class="headerlink" title="3.2.3.order by"></a>3.2.3.order by</h5><pre class="line-numbers language-none"><code class="language-none">select ... from ... order by...;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认是升序。asc表示升序，desc表示降序。</p><p>select … from… order by …; // 升序</p><p>select … from… order by … asc; // 升序</p><p>select … from…order by … desc; // 降序。</p><h5 id="3-2-4-分组函数"><a href="#3-2-4-分组函数" class="headerlink" title="3.2.4.分组函数"></a>3.2.4.分组函数</h5><p>(1) count 计数 select count(属性名) from emp;</p><p>(2) sum 求和  select sum(…) from emp;</p><p>(3) avg 平均值 select avg(…) from emp;</p><p>(4) max 最大值 select max(…) from emp;</p><p>(5) min 最小值 select min(…) from emp;</p><p>(6) 分组函数自动忽略NULL。</p><p>(7) SQL语句当中有一个语法规则，分组函数不可直接使用在where子句当中。</p><p>(8) 分组函数又称：多行处理函数。多行处理函数的特点：输入多行，最终输出的结果是1行。</p><h5 id="3-2-5-group-by"><a href="#3-2-5-group-by" class="headerlink" title="3.2.5.group by"></a>3.2.5.group by</h5><ul><li><p>按照某个字段或者某些字段进行分组。Having:对分组之后的数据进行再次过滤。</p><ul><li>分组函数一般都会和group by联合使用，这也是为什么它被称为分组函数的原因。</li><li>并且任何一个分组函数都是在group by语句执行结束之后才会执行的。</li><li> 当一条sql语句没有group by的话，整张表的数据会自成一组。</li><li> 当一条语句中有group by的话，select后面只能跟分组函数和参与分组的字段。</li><li> 分组后，当每一组有很多数据时，只显示第一条。可以通过多字段分组来解决。</li></ul></li><li><p> 关于查询结果集的去重</p></li><li><p>select distinct … from …;</p></li><li><p> distinct只能出现在所有字段的最前面。eg:  select distinct age from t_test ;</p></li></ul><h5 id="3-2-6-1-ifnull-可能为NULL的数据-被当做什么处理"><a href="#3-2-6-1-ifnull-可能为NULL的数据-被当做什么处理" class="headerlink" title="3.2.6.\1. ifnull(可能为NULL的数据,被当做什么处理)"></a>3.2.6.\1. ifnull(可能为NULL的数据,被当做什么处理)</h5><p>(1) 重点：所有数据库都是这样规定的，只要有NULL参与的运算结果一定是NULL。</p><p>(2) 属于单行处理函数。</p><p>eg: select  ifnull(grade,0)+  ifnull(age,0) from t_test where ID = 11;</p><h5 id="3-2-7-1-连接查询"><a href="#3-2-7-1-连接查询" class="headerlink" title="3.2.7.\1. 连接查询"></a>3.2.7.\1. 连接查询</h5><p>(1) 在实际开发中，大部分的情况下都不是从单表中查询数据，一般都是多张表联合查询取出最终的结果。</p><p>(2) 连接查询的分类</p><p>​    根据语法出现的年代来划分的话，包括：</p><p>​        SQL92    SQL99</p><p>​    根据表的连接方式来划分，包括：</p><p>​    内连接：A和B表进行连接，使用内连接的话，凡是A表和B表能够匹配上的记录能查询出来。AB两张表没有主副之分，两张表是平等的。 inner join</p><img src="/2021/10/23/java5/%E5%86%85%E8%BF%9E%E6%8E%A5.png" class=""><p>​        等值连接:内连接之等值连接：最大特点是：条件是等量关系。</p><p>​        非等值连接:最大的特点是：连接条件中的关系是非等量关系。</p><p>​        自连接:一张表看做两张表。自己连接自己</p><p>外连接：A和B表进行连接，使用外连接，两张表中有一张主表，一张副表，主要查询主表中的数据，</p><p>当副表中的数据没有和主表中的数据匹配上，副表自动模拟出NULL与之匹配。主表的数据无条件的全部查询出来。</p><p>​            左外连接（左连接）表示左边的这张表是主表。</p><p>​      left join</p><img src="/2021/10/23/java5/%E5%B7%A6%E8%BF%9E%E6%8E%A5.png" class=""><p>右外连接（右连接）表示右边的这张表是主表。</p><p> right join </p><img src="/2021/10/23/java5/%E5%8F%B3%E8%BF%9E%E6%8E%A5.png" class=""><p>​        全连接</p><p>​        <img src="/2021/10/23/java5/%E5%85%A8%E8%BF%9E%E6%8E%A5.png" class=""></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">内连接SQL92:<span class="token keyword">select</span> a<span class="token punctuation">.</span>字段名<span class="token punctuation">,</span>b<span class="token punctuation">.</span>字段名<span class="token keyword">from</span>表名<span class="token number">1</span>  a<span class="token punctuation">,</span> 表名<span class="token number">2</span>  b    <span class="token comment">// 要给表起别名，以便区分select字段是从哪个表中查</span><span class="token keyword">where</span>a<span class="token punctuation">.</span>字段名 <span class="token operator">=</span>  b<span class="token punctuation">.</span>字段名<span class="token punctuation">;</span>  <span class="token comment">// 等量关系，等值连接</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>字段名 <span class="token operator">between</span> b<span class="token punctuation">.</span>字段名 <span class="token operator">and</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token comment">// 非等值连接，不等量关系</span>SQL99：（常用的）<span class="token keyword">select</span> e<span class="token punctuation">.</span>字段名<span class="token punctuation">,</span>d<span class="token punctuation">.</span>字段名<span class="token keyword">from</span>表名<span class="token number">1</span>  a<span class="token punctuation">(</span><span class="token keyword">inner</span><span class="token punctuation">)</span><span class="token keyword">join</span>   <span class="token comment">// inner可以省略的，带着inner目的是可读性好一些。</span>表名<span class="token number">2</span>  b<span class="token keyword">on</span>a<span class="token punctuation">.</span>字段名 <span class="token operator">=</span>  b<span class="token punctuation">.</span>字段名<span class="token punctuation">;</span>  <span class="token comment">// 等量关系，等值连接</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>字段名 <span class="token operator">between</span> b<span class="token punctuation">.</span>字段名 <span class="token operator">and</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token comment">// 非等值连接，不等量关系</span>外连接<span class="token keyword">select</span> e<span class="token punctuation">.</span>字段名<span class="token punctuation">,</span>d<span class="token punctuation">.</span>字段名<span class="token keyword">from</span>表名<span class="token number">1</span>  a<span class="token keyword">left</span><span class="token punctuation">(</span><span class="token keyword">outer</span><span class="token punctuation">)</span><span class="token keyword">join</span>   <span class="token comment">// outer可以省略的 左外连接</span><span class="token punctuation">(</span><span class="token keyword">right</span> <span class="token keyword">join</span><span class="token punctuation">)</span>     <span class="token comment">//右外连接</span>表名<span class="token number">2</span>  b<span class="token keyword">on</span>a<span class="token punctuation">.</span>字段名 <span class="token operator">=</span>  b<span class="token punctuation">.</span>字段名<span class="token punctuation">;</span>  <span class="token comment">// 等量关系，等值连接</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>字段名 <span class="token operator">between</span> b<span class="token punctuation">.</span>字段名 <span class="token operator">and</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token comment">// 非等值连接，不等量关系</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-8-1-子查询：select语句当中嵌套select语句，被嵌套的select语句是子查询。"><a href="#3-2-8-1-子查询：select语句当中嵌套select语句，被嵌套的select语句是子查询。" class="headerlink" title="3.2.8.\1. 子查询：select语句当中嵌套select语句，被嵌套的select语句是子查询。"></a>3.2.8.\1. 子查询：select语句当中嵌套select语句，被嵌套的select语句是子查询。</h5><p>(1) where子句中使用子查询</p><p>select … from … where (select … from …);  //分组函数不能出现在where中，可以通过这样结合</p><p>(2) from后面嵌套子查询</p><p>select …from(select …from…) …;</p><p>(3) 在select后面嵌套子查询。</p><p>select …,(select … from…) from …;</p><h5 id="3-2-9-1-union-将查询结果集相加"><a href="#3-2-9-1-union-将查询结果集相加" class="headerlink" title="3.2.9.\1. union:将查询结果集相加"></a>3.2.9.\1. union:将查询结果集相加</h5><p>(1) select … from …</p><p>union </p><p>select …from …</p><p>(2) UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。</p><h5 id="3-2-10-1-limit"><a href="#3-2-10-1-limit" class="headerlink" title="3.2.10.\1. limit"></a>3.2.10.\1. limit</h5><p>(1) limit取结果集中的部分数据</p><p>(2) limit startIndex, length;</p><p>​        startIndex表示起始位置，从0开始，0表示第一条数据。</p><p>​        length表示取的个数；</p><p>eg :select name from t_test limit 0,3;</p><p>(3) 数据分页显示</p><h5 id="3-2-11-1-查询语句的顺序"><a href="#3-2-11-1-查询语句的顺序" class="headerlink" title="3.2.11.\1. 查询语句的顺序"></a>3.2.11.\1. 查询语句的顺序</h5><p>select…  8  根据字段，进行查询</p><p>distinct…  9  对结果去重</p><p>from    …   1  from和join两张表 生成 笛卡尔积表</p><p>join…    3  将过滤掉的数据以null值补充回来</p><p>on…    2  根据on 过滤数据</p><p>where…  4  根据条件再次过滤，不能跟分组函数</p><p>group by… 5  进行分组操作</p><p>having…  7  对分组后的数据，进行过滤，having后可以加分组函数</p><p>avg()…   6  分组函数都是在分组之后进行的</p><p>order by… 10 将结果排序</p><p>Limit…   11 截取部分数据</p><p>每执行一个步骤都会生成一个虚拟表，为下一个步骤服务。</p><h4 id="3-3-DML"><a href="#3-3-DML" class="headerlink" title="3.3.DML"></a>3.3.DML</h4><h5 id="3-3-1-建表语句"><a href="#3-3-1-建表语句" class="headerlink" title="3.3.1.建表语句"></a>3.3.1.建表语句</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--表名在数据库当中一般建议以：t_或者tbl_开始。--></span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>  字段名<span class="token number">1</span> 数据类型<span class="token punctuation">,</span>字段名<span class="token number">2</span> 数据类型<span class="token punctuation">,</span>字段名<span class="token number">3</span> 数据类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常见的数据类型：</p><ul><li>int：整数型(java中的int)</li><li>bigint：长整型(java中的long)</li><li>float：浮点型(java中的float double)</li><li>char(length)：定长字符串(String)</li><li>varchar(lengrh)：可变长字符串(StringBuffer/StringBuilder)</li><li>date：日期类型 （对应Java中的java.sql.Date类型）</li><li>BLOB：二进制大对象（存储图片、视频等流媒体信息） Binary Large OBject （对应java中的Object）</li><li>CLOB：字符大对象（存储较大文本，比如，可以存储4G的字符串。） Character Large OBject（对应java中的Object）</li></ul><h5 id="3-3-2-insert语句"><a href="#3-3-2-insert语句" class="headerlink" title="3.3.2.insert语句"></a>3.3.2.insert语句</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">,</span>字段名<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>值<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token punctuation">,</span>字段名<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>值<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>值<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>值<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>字段的数量和值的数量相同，并且数据类型要对应相同</li><li>字段可以省略不写，当所有的字段都不写，必须所有字段的值都要写完全，包括自增的字段。当自增字段省略时，会自动增加，当其他字段省略时，values要和没有省略的字段一一对应，省略的字段则值为空。</li><li>当insert语句执行之后，表格中必然会多一行记录。即使这一行记录中某些字段是NULL，也无法再执行insert语句插入数据，只能使用update进行更新。</li></ul><h5 id="3-3-3update语句"><a href="#3-3-3update语句" class="headerlink" title="3.3.3update语句"></a>3.3.3update语句</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 字段名<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> 条件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-3-4-删除数据"><a href="#3-3-4-删除数据" class="headerlink" title="3.3.4.删除数据"></a>3.3.4.删除数据</h5><p>​    语法格式：</p><p>​        delete from 表名 where 条件;    注意：没有条件全部删除。可撤回；</p><p>​    快速删除容量比较大的表中的数据（重点）</p><p>​        truncate table 表名; // 表被截断，不可回滚。永久丢失。</p><p>​    删除表</p><p>​        drop table 表名; </p><p>​        drop table if exists 表名; // oracle不支持这种写法。</p><h5 id="3-3-5-表的复制"><a href="#3-3-5-表的复制" class="headerlink" title="3.3.5.表的复制"></a>3.3.5.表的复制</h5><p>​    语法：create table 表名 as select语句;    将查询结果当做表创建出来。</p><p>将查询结果插入到一张表中     insert into 表名 select … from …;</p><h4 id="3-4-约束"><a href="#3-4-约束" class="headerlink" title="3.4.约束"></a>3.4.约束</h4><p>1.约束：在创建表的时候，可以给表的字段添加相应的约束，添加约束的目的是为了保证表中数据的合法性、有效性、完整性。</p><p>​    常见的约束</p><p>​        非空约束(not null)：约束的字段不能为NULL</p><p>​        唯一约束(unique)：约束的字段不能重复</p><p>​        主键约束(primary key)：约束的字段既不能为NULL，也不能重复（简称PK）</p><p>​        外键约束(foreign key)：…（简称FK）</p><p>​        检查约束(check)：注意Oracle数据库有check约束，但是mysql没有，目前mysql不支持该约束。</p><h5 id="3-4-1-1-非空约束-not-null"><a href="#3-4-1-1-非空约束-not-null" class="headerlink" title="3.4.1.(1) 非空约束(not null)"></a>3.4.1.(1) 非空约束(not null)</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>​字段名<span class="token number">1</span> 数据类型<span class="token punctuation">,</span>​字段名<span class="token number">2</span> 数据类型 <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>  <span class="token comment">//列级约束,没有表级约束</span>​字段名<span class="token number">3</span> 数据类型<span class="token punctuation">,</span>​<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>​<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-4-2-1-唯一约束-unique-唯一约束修饰的字段具有唯一性，不能重复。但可以为NULL。"><a href="#3-4-2-1-唯一约束-unique-唯一约束修饰的字段具有唯一性，不能重复。但可以为NULL。" class="headerlink" title="3.4.2.(1) 唯一约束(unique):唯一约束修饰的字段具有唯一性，不能重复。但可以为NULL。"></a>3.4.2.(1) 唯一约束(unique):唯一约束修饰的字段具有唯一性，不能重复。但可以为NULL。</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>字段名<span class="token number">1</span> 数据类型<span class="token punctuation">,</span>字段名<span class="token number">2</span> 数据类型 <span class="token keyword">unique</span><span class="token punctuation">,</span> <span class="token comment">//列级约束</span>字段名<span class="token number">3</span> 数据类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>字段名<span class="token number">1</span> 数据类型<span class="token punctuation">,</span>字段名<span class="token number">2</span> 数据类型<span class="token punctuation">,</span>字段名<span class="token number">3</span> 数据类型<span class="token punctuation">,</span><span class="token keyword">unique</span><span class="token punctuation">(</span>字段<span class="token number">1</span>，字段<span class="token number">2</span>，<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token comment">// 多个字段联合起来添加1个约束unique 【表级约束】</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-4-3-1-主键约束-primary-key"><a href="#3-4-3-1-主键约束-primary-key" class="headerlink" title="3.4.3(1) 主键约束(primary key)"></a>3.4.3(1) 主键约束(primary key)</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">单一主键<span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>字段名<span class="token number">1</span> 数据类型<span class="token punctuation">,</span>字段名<span class="token number">2</span> 数据类型<span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>  <span class="token comment">//列级约束</span>字段名<span class="token number">3</span> 数据类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>复合主键<span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>字段名<span class="token number">1</span> 数据类型<span class="token punctuation">,</span>字段名<span class="token number">2</span> 数据类型<span class="token punctuation">,</span>字段名<span class="token number">3</span> 数据类型<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>字段名<span class="token number">1</span>，字段名<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>  <span class="token comment">//表级约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&lt;1添加主键约束，主键字段中的数据不能为NULL，也不能重复。</p><p>&lt;2主键相关的术语</p><p>​        主键约束 : primary key</p><p>​        主键字段 : 字段添加primary key之后，叫做主键字段</p><p>​        主键值 : 主键字段中的每一个值都是主键值。</p><p>主键的分类</p><p>​        根据主键字段的字段数量来划分：</p><p>​            单一主键（推荐的，常用的。）</p><p>​            复合主键(多个字段联合起来添加一个主键约束)（复合主键不建议使用，因为复合主键违背三范式。）</p><p>​        根据主键性质来划分：</p><p>​            自然主键：主键值最好是一个和业务没有任何关系的自然数。（这种方式是推荐的）</p><p>​            业务主键：主键值和系统的业务挂钩，例如：拿着银行卡的卡号做主键，拿着身份证号码作为主键。（不推荐用）</p><p>​                     最好不要拿着和业务挂钩的字段作为主键。因为以后的业务一旦发生改变的时候，主键值可能也需要</p><p>​                     随着发生变化，但有的时候没有办法变化，因为变化可能会导致主键值重复。</p><p>&lt;3    主键作用</p><p>​        表的设计三范式中有要求，第一范式就要求任何一张表都应该有主键。</p><p>​        主键值是这行记录在这张表当中的唯一标识。</p><p>&lt;4一张表的主键约束只能有1个。</p><p>&lt;5主键自增</p><p>mysql提供主键值自增：        </p><p>​        create table 表名(</p><p>​            字段名    数据类型primary key auto_increment, // 字段自动维护一个自增的数字，从1开始，以1递增。</p><p>​            …..</p><p>​        );</p><h5 id="3-4-4-1-外键约束"><a href="#3-4-4-1-外键约束" class="headerlink" title="3.4.4.(1) 外键约束"></a>3.4.4.(1) 外键约束</h5><p>&lt;1相关术语：</p><p>​        外键约束: foreign key</p><p>​        外键字段：添加有外键约束的字段</p><p>​        外键值：外键字段中的每一个值。</p><p>&lt;2A表中的a字段引用B表中的b字段，A表叫做子表。B表叫做父表。</p><p>&lt;3create 子表名(</p><p>​            字段名1 数据类型,</p><p>​            字段名2 数据类型,</p><p>…</p><p>​            foreign key(字段名) references 父表名(父表字段)</p><p>​        );</p><p>&lt;4顺序要求：</p><p>​            删除数据的时候，先删除子表，再删除父表。</p><p>​            添加数据的时候，先添加父表，在添加子表。</p><p>​            创建表的时候，先创建父表，再创建子表。</p><p>​            删除表的时候，先删除子表，在删除父表。</p><p>&lt;5外键值可以为NULL        </p><p>&lt;6外键字段引用其他表的某个字段的时候，</p><p>被引用的字段不一定是主键，但至少具有unique约束。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-IO</title>
      <link href="/2021/10/23/java4/"/>
      <url>/2021/10/23/java4/</url>
      
        <content type="html"><![CDATA[<p>1、IO流定义</p><p>I : Input；O : Output；通过IO可以完成硬盘文件的读和写。</p><p>2、IO流的分类</p><p>​    按照流的方向进行分类：</p><p>​    以内存作为参照物，</p><p>​        往内存中去，叫做输入(Input)。或者叫做读(Read)。</p><p>​        从内存中出来，叫做输出(Output)。或者叫做写(Write)。</p><p>​    按照读取数据方式不同进行分类：</p><p>​        按照字节的方式读取数据，一次读取1个字节byte，等同于一次读取8个二进制位。这种流是万能的，什么类型的文件都可以读取。包括：文本文件，图片，声音文件，视频文件等….</p><p>​        按照字符的方式读取数据的，一次读取一个字符，这种流是为了方便读取普通文本文件而存在的，这种流不能读取：图片、声音、视频等文件。只能读取纯文本文件，连word文件都无法读取。</p><p>​    综上所述：流的分类</p><p>​        输入流、输出流</p><p>​        字节流、字符流</p><p>3、java IO流这块有四大家族：</p><p>​    四大家族的首领：</p><p>​        java.io.InputStream  字节输入流</p><p>​        java.io.OutputStream 字节输出流</p><p>​        java.io.Reader    字符输入流</p><p>​        java.io.Writer        字符输出流</p><p>四大家族的首领都是抽象类。(abstract class)</p><p>​    所有的流都实现了：java.io.Closeable接口，都是可关闭的，都有close()方法。流相当于内存和硬盘之间的通道，用完之后一定要关闭，不然会耗费(占用)很多资源。</p><p>​    所有的输出流都实现了：java.io.Flushable接口，都是可刷新的，都有flush()方法。输出流在最终输出之后，一定要记得flush()刷新表示将通道/管道当中剩余未输出的数据强行输出完</p><p>​    注意：如果没有flush()可能会导致丢失数据。</p><p>注意：在java中只要“类名”以Stream结尾的都是字节流。以“Reader/Writer”结尾的都是字符流。</p><pre class="line-numbers language-none"><code class="language-none">文件专属：java.io.FileInputStream（掌握） &#x2F;*  FileInputStream     void close()  关闭流     int read()    从文件中读取一个字节     int read(byte[] b)  从文件中读取数组长度个字节，并返回读取个数     int available()  返回文件中未读取的字节个数     long skip(long n)  跳过n个字节后继续读取*&#x2F;FileInputStream fis &#x3D; null;        try &#123;                                            fis &#x3D; new FileInputStream(&quot;绝对地址or相对地址&quot;);            byte[] bs &#x3D; new byte[4]; &#x2F;&#x2F;创建一个字节数组            int count;            while ((count &#x3D; fis.read(bs)) !&#x3D; -1) &#123;                String s &#x3D; new String(bs, 0, count);                System.out.print(s);            &#125;        &#125; catch (FileNotFoundException e) &#123;            e.printStackTrace();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125; finally &#123;  &#x2F;&#x2F;关闭流            if (fis !&#x3D; null) &#123;                try &#123;                    fis.close();                  &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;java.io.FileOutputStream（掌握）&#x2F;*    FileOutputStream(File file, boolean append) true 时，从指定文件的末尾写进    FileOutputStream(File file)  清空指定文件后写进 *&#x2F;FileOutputStream fos &#x3D; null;      try &#123;            fos &#x3D; new FileOutputStream(“相对路径or绝对路径”,true);            byte[] bytes &#x3D; &#123;&#125;; &#x2F;&#x2F;写一个数组存字节            bytes &#x3D; &quot;\n我是中国人&quot;.getBytes();&#x2F;&#x2F; 将字符串转换成数组            fos.write(bytes);  &#x2F;&#x2F;将字节写进            fos.flush();  &#x2F;&#x2F;要刷新        &#125; catch (FileNotFoundException e) &#123;            e.printStackTrace();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;finally &#123;            if(fos !&#x3D; null)&#123;                try &#123;                    fos.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;java.io.FileReader  FileReader fr  &#x3D; null;        try &#123;            fr &#x3D; new FileReader(&quot;绝对路径or相对路径&quot;);            int count &#x3D; 0;            char[] chars &#x3D; new char[4];  &#x2F;&#x2F; 准备一个字符数组            while((count &#x3D; fr.read(chars))!&#x3D;-1)&#123;                System.out.print(new String(chars,0,count));            &#125;        &#125; catch (FileNotFoundException e) &#123;            e.printStackTrace();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;finally&#123;            if (fr !&#x3D; null) &#123;                try &#123;                    fr.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;java.io.FileWriter        String s &#x3D; &quot;哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈&quot;;        char[] chars &#x3D; new char[s.length()];        s.getChars(0,s.length()-1,chars,0);        FileWriter fw &#x3D; null;        try &#123;             fw &#x3D; new FileWriter(&quot;IO(input and output)&#x2F;&#x2F;test&quot;,true);             fw.write(chars);             fw.flush();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;finally&#123;            if (fw !&#x3D; null) &#123;                try &#123;                    fw.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;转换流：（将字节流转换成字符流）java.io.InputStreamReaderjava.io.OutputStreamWriterFileInputStream fs &#x3D; new FileInputStream(&quot;路径&quot;);InputStreamReader reader &#x3D; new InputStreamReader(fs);  &#x2F;&#x2F;fs 为 节点流，不用关闭，关闭包装流 reader即可           缓冲流专属：自带缓冲区的流，使用时不需要创建字符数组来缓存       java.io.BufferedReader        BufferedReader(Reader in)java.io.BufferedWriter         BufferedWriter(Writer out)java.io.BufferedInputStream    BufferedInputStream(InputStream in)java.io.BufferedOutputStream  BufferedOutputStream(OutputStream out)&#x2F;&#x2F;BufferedReader(Reader in) 构造方法中传入一个Reader流，Reader是一个抽象类&#x2F;&#x2F;当一个流的构造方法需要传入一个流，那么传入的流叫做节点流，外面的流叫做包装流        FileReader fr &#x3D; null;        BufferedReader br &#x3D; null;        try &#123;            fr &#x3D; new FileReader(&quot;路径&quot;);            br &#x3D; new BufferedReader(fr);            String s &#x3D; null;                   while((s&#x3D;br.readLine())!&#x3D;null)&#123;  &#x2F;&#x2F; 以字符串的形式输出文件的一行；当文本读完会返回null                System.out.println(s);            &#125;        &#125; catch (FileNotFoundException e) &#123;            e.printStackTrace();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125; finally&#123;                       &#x2F;&#x2F;关闭流的时候不用关闭节点流，在关闭包装流的时候节点流也会关闭            if (br !&#x3D; null) &#123;                try &#123;                    br.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;数据流专属：数据专属流 可以将数据和数据的类型一并写入文件中，而且此文件只能用DateInputStream 读出java.io.DataInputStreampublic static void main(String[] args) &#123;        DataInputStream dis &#x3D; null;        try &#123;            dis &#x3D; new DataInputStream(new FileInputStream(&quot;Thread&#x2F;&#x2F;data&quot;));           byte b &#x3D;dis.readByte();           short s &#x3D; dis.readShort();            int i &#x3D; dis.readInt();           long l &#x3D;dis.readLong();            float f &#x3D; dis.readFloat();           double d &#x3D; dis.readDouble();            boolean bn &#x3D; dis.readBoolean();            char c &#x3D; dis.readChar();            System.out.println(b+&quot;\n&quot;+s+&quot;\n&quot;+i+&quot;\n&quot;+l+&quot;\n&quot;+f+&quot;\n&quot;+d+&quot;\n&quot;+bn+&quot;\n&quot;+c);            System.out.println(i);        &#125; catch (FileNotFoundException e) &#123;            e.printStackTrace();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125; finally&#123;            if (dis !&#x3D; null) &#123;                try &#123;                    dis.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;java.io.DataOutputStreampublic static void main(String[] args) &#123;        byte b &#x3D; 100;        short s &#x3D; 200;        int i &#x3D; 300;        long l &#x3D; 400L;        float f &#x3D; 1.0F;        double d &#x3D; 1.00;        boolean bn &#x3D; true;        char c &#x3D; &#39;c&#39;;        DataOutputStream dos &#x3D; null;        try &#123;            dos &#x3D; new DataOutputStream(new FileOutputStream(&quot;Thread&#x2F;&#x2F;data&quot;));            dos.writeByte(b);            dos.writeShort(s);            dos.writeInt(i);            dos.writeLong(l);            dos.writeFloat(f);            dos.writeDouble(d);            dos.writeBoolean(bn);            dos.writeChar(c);            dos.flush();        &#125; catch (FileNotFoundException e) &#123;            e.printStackTrace();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125; finally&#123;            try &#123;                dos.close();            &#125; catch (IOException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125; 标准输出流：java.io.PrintWriterjava.io.PrintStream（掌握）标准输出流不用关闭 public static void main(String[] args) &#123;        try &#123;            PrintStream ps &#x3D; new PrintStream(new FileOutputStream(&quot;Thread&#x2F;&#x2F;test&quot;,true));  &#x2F;&#x2F;PrintStream(OutputStream out)            System.setOut(ps);  &#x2F;&#x2F;改变System.out.println()的输出方向            Date date &#x3D; new Date();            System.out.println(date);  输出的内容将直接进入指定的路径中        &#125; catch (FileNotFoundException e) &#123;            e.printStackTrace();        &#125;    &#125;对象专属流：参与序列化的类型必须实现java.io.Serializable接口。并且建议将序列化版本号手动的写出来。private static final long serialVersionUID &#x3D; 1L;java.io.ObjectOutputStream（掌握）将对象序列化到文件中public class ObjectOutputStreamTest &#123;    public static void main(String[] args) &#123;        ObjectOutputStream oos &#x3D; null;        try &#123;            oos &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;序列化文件路径&quot;));            Vip vip &#x3D; new Vip(&quot;hhh&quot;,18);            Vip vip2 &#x3D; new Vip(&quot;jjj&quot;,20);            oos.writeObject(vip);  &#x2F;&#x2F;将对象写入            oos.writeObject(vip2);            oos.flush();        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;finally&#123;            if (oos !&#x3D; null) &#123;                try &#123;                    oos.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;&#125;class Vip implements Serializable &#123;   &#x2F;&#x2F;必须实现接口，实现此接口后 类会获得 唯一的序列号，才可以被序列化    private String name;    private transient int age;   &#x2F;&#x2F;加 transient 关键字后不能被序列化    public Vip(String name, int age) &#123;        this.name &#x3D; name;        this.age &#x3D; age;    &#125;    public Vip() &#123;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name &#x3D; name;    &#125;    public int getAge() &#123;        return age;    &#125;    public void setAge(int age) &#123;        this.age &#x3D; age;    &#125;    @Override    public String toString() &#123;        return &quot;Vip&#123;&quot; +                &quot;name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +                &quot;, age&#x3D;&quot; + age +                &#39;&#125;&#39;;    &#125;&#125;java.io.ObjectInputStream（掌握）将序列化的文件反序列化，获得文件中的对象ObjectInputStream ois &#x3D; null;        try &#123;            ois &#x3D; new ObjectInputStream(new FileInputStream(&quot;序列化的文件路径&quot;));  &#x2F;&#x2F;将序列化后的对象文件传入            Object oj &#x3D; ois.readObject();            Object oj2 &#x3D; ois.readObject();            System.out.println(oj);            System.out.println(oj2);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125; finally&#123;            if (ois !&#x3D; null) &#123;                try &#123;                    ois.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;   当修改序列化的类后，之前序列化得到的文件将不能被反序列化5.IO + Properties联合使用。*** 改进 配置文件解除固定化，看reflect的相关内容Properties：用来读取配置文件，程序中一些代码需要时常改变，我们通常将其写入配置文件中，通过修改配置文件来达到修改代码的目的；Properties:是一个Map集合，key和value都是String类型。写配置文件时，要采用键值对的方式写IO流：文件的读和写public static void main(String[] args) &#123;        FileInputStream fis &#x3D; null;        try &#123;            fis &#x3D; new FileInputStream(&quot;Thread&#x2F;&#x2F;src&#x2F;&#x2F;text&quot;);        &#125; catch (FileNotFoundException e) &#123;            e.printStackTrace();        &#125;        Properties p &#x3D; new Properties();        try &#123;            p.load(fis);  &#x2F;&#x2F;调用load方法 传入一个输入流，就会将 &#x3D; 左边传入key &#x3D; 右边传入value            String s &#x3D; p.getProperty(&quot;hhh&quot;);  通过传入配置文件中，key关键字，来获得value            System.out.println(s);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;finally&#123;            if (fis !&#x3D; null) &#123;                try &#123;                    fis.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.FIie</p><p>/*</p><p>读取文件、生成文件、删除文件、修改文件的属性时经常会用到的本类，通过File对象可以访问文件的属性。</p><p>   构造方法 File(“文件路径”)  // 获得这个文件</p><p>   常用方法</p><p>​    boolean isDirectory()  判断是否为目录</p><p>​    boolean isFile() 判断是否为文件</p><p>​    boolean exists()  判断目录是否存在</p><p>​    boolean createNewFile()  创造一个新文件</p><p>​    boolean mkdir()  创建一个新目录</p><p>​    boolean mkdirs() 创建新目录及其父目录</p><p>​    String getParent()  以字符串形式返回父路径</p><p>​    File getParentFIle() 以文件形式返回父路径</p><p>​    File getAbsoluteFile()   获得绝对路径</p><p>​    String getAbsolutePath()</p><p>​    String getName()  返回该路径的文件或者目录</p><p>​    long length()  返回该路径的文件得大小</p><p>​    String[] list()  返回一个字符串数组，获得该路径下的所有子文件</p><p>​    File[] listFiles()  返回file数组，获得该路径下的所有子文件</p><p> */</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linuxanzhuang</title>
      <link href="/2021/10/09/linuxanzhuang/"/>
      <url>/2021/10/09/linuxanzhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟机安装JDK"><a href="#虚拟机安装JDK" class="headerlink" title="虚拟机安装JDK"></a>虚拟机安装JDK</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql3</title>
      <link href="/2021/10/07/mysql3/"/>
      <url>/2021/10/07/mysql3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库储存引擎"><a href="#一、数据库储存引擎" class="headerlink" title="一、数据库储存引擎"></a>一、数据库储存引擎</h2><ol><li><p>数据库的储存引擎是一种机制，规定了应用如何存储引用数据。Mysql5.5之前默认的存储引擎是MyISAM，之后是InnoDB.</p></li><li><p>MyISAM和InnoDB</p><p>MyISAM</p><ul><li>采用表锁</li><li>B树索引和全文索引</li><li>MyISAM表在磁盘的存储文件<ul><li>.frm  表结构文件</li><li>.MYD  MYDATA  表的数据文件</li><li>.MYI   MYIndex   表的索引文件</li></ul></li></ul><p>InnoDB</p><ul><li>采用行锁</li><li>支持事务和外键</li><li>B树索引和集群索引</li><li>InnoDB表在磁盘的存储文件<ul><li>user.frm：表结构文件</li><li>user.ibd：索引和数据文件（InnoDB Data）</li></ul></li></ul></li></ol><h2 id="二、索引"><a href="#二、索引" class="headerlink" title="二、索引"></a>二、索引</h2><ol><li><p>索引的本质是一个数据结构。</p></li><li><p>Mysql的索引结构</p><ul><li><p>B树索引</p><p>B-Tree</p><img src="/2021/10/07/mysql3/Qa.png" class=""><p>B+Tree</p><img src="/2021/10/07/mysql3/image-20211004175244727.png" class="" title="image-20211004175244727"></li><li><p>hash索引</p><img src="/2021/10/07/mysql3/image-20211004193746781.png" class="" title="image-20211004193746781"><p>哈希索引是基于哈希表实现，只有精确匹配索引所有列的查询才有效，对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码（hash code)，哈希码是一个较小的值，大部分情况下不同的键值的行计算出来的哈希码是不同的，但是也会有例外，就是说不同列值计算出来的hash值一样的（即所谓的hash冲突），哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每一个数据行的指针，hash很适合做索引，为某一列或几列建立hash索引，就会利用这一列或几列的值通过一定的算法计算出一个hash值，对应一行或几行数据</p></li><li><p>全文索引</p></li><li><p>集群索引</p></li></ul></li><li><p>联合索引</p><img src="/2021/10/07/mysql3/image-20211002175058383.png" class=""><ul><li><p>最左匹配原则</p><p>假如一个联合索引为a,b,c；则检索(a,b,c)(a,b),(a,c)用到的这个联合索引，(b,c)不用这个索引</p><p>select * from table where id = a or name = b;select * from table where name=b or id=a;</p><p>上述两个语句均可用到索引abc,也就是说和语句中字段的顺序无关；</p></li></ul></li><li><p>常用索引的情况</p></li><li><p>不能用索引的情况</p></li><li><p>索引失效</p></li><li><p>MyISAM和InnoDB的索引结构</p><ol><li><p>MyISAM</p><ul><li><p>MyISAM存储引擎的索引结构</p><p>MyISAM表的索引文件的key为索引列的数据，value为每个数据代表的行的磁盘地址</p></li></ul></li><li><p>InnoDB</p><img src="/2021/10/07/mysql3/a.png" class=""><ul><li><p>InnoDB存储引擎的索引结构</p><p>InnoDB表的索引结构key为索引列的数据，每个key代表的整个行的数据也存储在索引表中。</p></li></ul></li></ol></li></ol><h2 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h2><h4 id="查询慢sql"><a href="#查询慢sql" class="headerlink" title="查询慢sql"></a>查询慢sql</h4><h4 id="查看分析sql执行情况"><a href="#查看分析sql执行情况" class="headerlink" title="查看分析sql执行情况"></a>查看分析sql执行情况</h4><ol><li><p>explain</p><p>explain +  sql 语句  可以分析这条语句的执行计划，得到如下结果  </p><img src="/2021/10/07/mysql3/d.png" class=""><ul><li><p>select_type </p><ul><li>SIMPLE:简单，不使用表连接和子查询</li><li>PRIMARY：主查询，外层查询</li><li>UNION：UNION中的后面的查询</li><li>SUBQUERY：子查询中的第一个SELECT</li></ul></li><li><p>table</p><p>输出结果的表</p></li><li><p>type</p><ul><li>null&gt;system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all</li><li>all:全表扫描</li><li>index:遍历整个索引查询</li><li>range:索引范围扫描</li><li>ref: 采用非唯一索引</li><li>eq_ref：采用唯一索引，每个索引只对应一条数据</li><li>system\const：单表中至多只有一个匹配行</li><li>null:不用访问表，直接可以得到结果</li></ul></li><li><p>possible_keys</p><p>查询时可能使用的索引</p></li><li><p>key</p><p>查询时真正使用的索引</p></li><li><p>key_len</p><p>使用到索引字段的长度</p></li><li><p>ref</p></li><li><p>rows</p><p>扫描行数</p></li><li><p>Extra</p><p>执行说明</p></li></ul><p>show warnings</p><p>此命令可以查看mysql的内部优化器执行的sql语句</p></li><li><p>show profiles</p><ul><li>show profiles:列出执行sql的运行时间和queryID</li><li>show  profile  for query  query_ID :查看某个sql语句执行的各项具体时间</li><li>show profile  cpu\all\io…  for  query query_ID  查看明细类型的时间消耗</li></ul></li><li><p>show status</p><p>SHOW STATUS命令会显示每个服务器变量的名字和值</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html">https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html</a>  列出了不同的变量含义</p></li><li><p>trace  分析优化器如何选择执行文件 </p></li></ol><h4 id="sql优化措施"><a href="#sql优化措施" class="headerlink" title="sql优化措施"></a>sql优化措施</h4><ol><li><p>选择正确的数据类型</p><ul><li>选择储存空间小的</li><li>选择类型简单的</li><li>避免null值存在，null值存在使得索引相关更加复杂</li></ul></li><li><p>schema设计</p><ul><li><p>不要有太多的列</p><p>存储引擎在工作时，将缓冲数据在服务层转换，列数过多，资源消耗大</p></li><li><p>不要有太多的表关联</p></li><li><p>不要过度使用枚举</p></li></ul></li><li><p>查询优化</p><ul><li><p>不要查询到不需要的数据</p><ul><li><p>查询不需要的记录</p><p>如：select查询大量的结果，但只获取前N条记录，理想是需要几条就查几条</p></li><li><p>多表联查时，返回全部列，只返回需要的列最佳</p></li><li><p>select *</p></li><li><p>重复查相同的数据，可以将需要的数据查一次后缓存，不用重复查</p></li></ul></li><li></li><li><p>重构sql</p><ul><li><p>可以将一个复杂的查询分为数个简单查询</p></li><li><p>切分查询</p><p>将数据分段，每次完成查询的一部分</p></li><li><p>可能的情况下，分解关联查询，将join关联分为几个简单查询</p><p>缓存效率更高</p><p>减少锁的竞争</p></li></ul></li><li></li><li></li><li></li><li><p>数据库三范式和反范式</p><p>第一范式：要求表中业务字段，逻辑上不可再分</p><p>第二范式：要求表中必须存在业务主键 (单一业务主键 或 联合业务主键)<br>非业务主键，必须依赖于 单一业务主键 或 全部的联合业务主键</p></li></ul></li></ol><p>第三范式：要求非业务主键列不能相互依赖</p><p>反范式化设计数据库，是为了用空间换时间，提高查询效率</p><p><strong>第一范式（1NF）：</strong> <strong>强调的是列的原子性，即列不能够再分成其他几列。</strong>    </p><p> <strong>第二范式（2NF）：</strong> <strong>首先要满足它是1NF，另外还需要包含两部分内容：一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。</strong></p><p> <strong>第三范式（3NF）：</strong> <strong>首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis2</title>
      <link href="/2021/10/02/redis2/"/>
      <url>/2021/10/02/redis2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis(二)-</title>
      <link href="/2021/10/02/redis1/"/>
      <url>/2021/10/02/redis1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库"><a href="#一、数据库" class="headerlink" title="一、数据库"></a>一、数据库</h2><h3 id="1-1-redis服务器"><a href="#1-1-redis服务器" class="headerlink" title="1.1.redis服务器"></a>1.1.redis服务器</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">redisServer</span><span class="token punctuation">&#123;</span>    <span class="token comment">//一个数组，保存着服务器中的所有数据库</span>    redisDb <span class="token operator">*</span>db<span class="token punctuation">;</span>    <span class="token comment">//数据库数量，该值默认是16</span>    <span class="token keyword">int</span> dbnum<span class="token punctuation">;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-redis数据库"><a href="#1-2-redis数据库" class="headerlink" title="1.2.redis数据库"></a>1.2.redis数据库</h3><h4 id="1-2-1-数据库结构"><a href="#1-2-1-数据库结构" class="headerlink" title="1.2.1.数据库结构"></a>1.2.1.数据库结构</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">redisDb</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//</span>    <span class="token comment">//数据库键空间，保存着数据库中的所有键值对</span>    dict <span class="token operator">*</span>dict<span class="token punctuation">;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span> redisDb<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>键空间的键也就是数据库的键，每个键都是一个字符 串对象</li><li>键空间的值也就是数据库的值，每个值可以是字符串对象、列表对象、哈希表对象、</li></ul><h4 id="1-2-2-数据库命令操作"><a href="#1-2-2-数据库命令操作" class="headerlink" title="1.2.2.数据库命令操作"></a>1.2.2.数据库命令操作</h4><p>redis数据库的键空间就是一个字典，所有操作都是对键空间字典做的。</p><h2 id="二、持久化"><a href="#二、持久化" class="headerlink" title="二、持久化"></a>二、持久化</h2><h3 id="2-1-RDB持久化"><a href="#2-1-RDB持久化" class="headerlink" title="2.1.RDB持久化"></a>2.1.RDB持久化</h3><h4 id="2-1-1"><a href="#2-1-1" class="headerlink" title="2.1.1"></a>2.1.1</h4><h3 id="2-2-AOF持久化"><a href="#2-2-AOF持久化" class="headerlink" title="2.2.AOF持久化"></a>2.2.AOF持久化</h3>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis(一)-数据结构和数据类型</title>
      <link href="/2021/10/02/redis/"/>
      <url>/2021/10/02/redis/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-Redis中的数据结构"><a href="#一、-Redis中的数据结构" class="headerlink" title="一、 Redis中的数据结构"></a>一、 Redis中的数据结构</h2><h3 id="1-简单动态字符串SDS"><a href="#1-简单动态字符串SDS" class="headerlink" title="1.简单动态字符串SDS"></a>1.简单动态字符串SDS</h3><h4 id="1-1-SDS的定义结构"><a href="#1-1-SDS的定义结构" class="headerlink" title="1.1.SDS的定义结构"></a>1.1.SDS的定义结构</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">sdshdr</span> <span class="token punctuation">&#123;</span><span class="token comment">// 记录buf 数组中已使用字节的数量</span><span class="token comment">//等于SDS所保存字符串的长度</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span><span class="token comment">//记录buf数组中未使用字节的数量</span>    <span class="token keyword">int</span> free<span class="token punctuation">;</span><span class="token comment">//字节数组，用于保存字符串</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/10/02/redis/SDS%E7%BB%93%E6%9E%84.png" class=""><ul><li>free=0,表示数组中没有未使用的字节；</li><li>len=5,表示字符串的长度为5，SDS的字符串以空字符结尾，但这个空字符不计入len的长度之中。</li></ul><h4 id="1-2-SDS和C字符串"><a href="#1-2-SDS和C字符串" class="headerlink" title="1.2.SDS和C字符串"></a>1.2.SDS和C字符串</h4><ol><li><p>通过使用SDS而不是C字符串，Redis 将获取字符串长度所需的复杂度从O(N)降低到了O(1)</p><p>C字符串中没有len属性，返回字符串长度需要遍历，SDS直接返回len属性即可。</p></li><li><p>SDS的空间分配策略完全杜绝了发生缓冲区溢出的可能性:当SDS的API需要对SDS进行修改时，API会先检查SDS的空间是否满足修改所需的要求，如果不满足的话，API会自动将SDS的空间扩展至执行修改所需的大小，然后才执行实际的修改操作，所以使用SDS既不需要手动修改SDS的空间大小，也不会出现前面所说的缓冲区溢出问题。</p></li><li><p>内存分配</p><ul><li><p>c</p><p>如果程序执行的是增长字符串的操作，比如拼接操作( append),那么在执行这个操作之前，程序需要先通过内存重分配来扩展底层数组的空间大小一如果忘了这一步就会产生缓冲区溢出。<br>如果程序执行的是缩短字符串的操作，比如截断操作( trim),那么在执行这个操作之后，程序需要通过内存重分配来释放字符串不再使用的那部分空间一如果忘了这一步就会产生内存泄漏。</p></li><li><p>SDS</p><p>空间预分配</p><p>在SDS扩展空间之前，SDS API会检查未使用空间是否足够，足够则直接使用，不足则进行分配。</p><p>如果对SDS进行修改之后，SDS的长度( 也即是len属性的值)将小于1MB,那么程序分配和len属性同样大小的未使用空间，这时SDSlen属性的值将和free属性的值相同。举个例子，如果进行修改之后，SDS的len将变成13字节，那么程序也会分配13字节的未使用空间，SDS的buf数组的实际长度将变成13+13+1=27字节( 额外的一字节用于保存空字符)。<br>如果对SDS进行修改之后，SDS的长度将大于等于1MB，那么程序会分配1MB的未使用空间。举个例子，如果进行修改之后，SDS的len将变成30MB，那么程序会分配1MB的未使用空间，SDS 的buf数组的实际长度将为30MB + 1MB + lbyte。</p><p>惰性空间释放<br>惰性空间释放用于优化SDS的字符串缩短操作:当SDS的API需要缩短SDS保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用free属性将这些字节的数量记录起来，并等待将来使用。与此同时，SDS也提供了相应的API,让我们可以在有需要时，真正地释放SDS的未使用空间，所以不用担心惰性空间释放策略会造成内存浪费。</p></li></ul></li><li><p>二进制安全</p><p>SDS可以储存二进制数据，数据在写入时是什么样子，读出时还是什么样子。</p></li></ol><h3 id="2-链表"><a href="#2-链表" class="headerlink" title="2.链表"></a>2.链表</h3><h4 id="2-1-链表节点和链表的实现"><a href="#2-1-链表节点和链表的实现" class="headerlink" title="2.1.链表节点和链表的实现"></a>2.1.链表节点和链表的实现</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token punctuation">&#123;</span><span class="token comment">//前置节点</span>    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span> prev<span class="token punctuation">;</span><span class="token comment">//后置节点</span>    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token comment">//节点的值</span><span class="token keyword">void</span> <span class="token operator">*</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> listNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//表头节点</span>    listNode <span class="token operator">*</span> head<span class="token punctuation">;</span>    <span class="token comment">//表尾节点</span>    listNode <span class="token operator">*</span> tail<span class="token punctuation">;</span>    <span class="token comment">//链表所包含的节点数量</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>    <span class="token comment">//节点值复制函数</span>    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>dup<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">//节点值释放函数</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">//节点值对比函数</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span> list<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-字典"><a href="#3-字典" class="headerlink" title="3.字典"></a>3.字典</h3><h4 id="3-1-字典的实现"><a href="#3-1-字典的实现" class="headerlink" title="3.1.字典的实现"></a>3.1.字典的实现</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dict</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 类型特定函数</span>    dictType <span class="token operator">*</span>type<span class="token punctuation">;</span>    <span class="token comment">//私有数据</span>    <span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">;</span>    <span class="token comment">//哈希表</span>    dictht ht<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token punctuation">;</span>    <span class="token comment">// rehash 索引</span>    <span class="token comment">//当rehash不在进行时，值为-1</span>    in trehashidx<span class="token punctuation">;</span> <span class="token comment">/* rehashing not in progress' if rehashidx == -1 */</span><span class="token punctuation">&#125;</span> dict<span class="token punctuation">;</span><span class="token comment">//两个哈希表，只使用ht[0]，ht[1]只在ht[0]rehash的时候使用到。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictType</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//计算哈希值的函数</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>hashFunction<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">//复制键的函数</span>    <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>keyDup<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata， <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">//复制值的函数</span>    <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>valDup<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">//对比键的函数</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>keyCompare<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>key2<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">//销毁键的函数</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>keyDestructor<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token comment">//销毁值的函数</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>valDestructor<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>obj<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span> dictType<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictht</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//哈希表数组</span>    dictEntry <span class="token operator">*</span><span class="token operator">*</span>table<span class="token punctuation">;</span>    <span class="token comment">//哈希表大小</span>    <span class="token keyword">unsigned</span> <span class="token number">1</span>ong size<span class="token punctuation">;</span> <span class="token punctuation">.</span>    <span class="token comment">//哈希表大小掩码，用于计算索引值</span>    <span class="token comment">//总是等于size-1</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> si zemask<span class="token punctuation">;</span>    <span class="token comment">//该哈希表已有节点的数量</span>    <span class="token keyword">unsigned</span> <span class="token number">1</span>ong used<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> dictht<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//键</span>    <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>    <span class="token comment">//值</span>    <span class="token keyword">union</span><span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> val<span class="token punctuation">;</span>    uint64_ tu64<span class="token punctuation">;</span>    int64_ ts64<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> V<span class="token punctuation">;</span>    <span class="token comment">// 指向下个哈希表节点， 形成链表</span>    <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> dictEntry<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/10/02/redis/dict%E7%BB%93%E6%9E%84.png" class=""><h4 id="3-2-rehash"><a href="#3-2-rehash" class="headerlink" title="3.2.rehash"></a>3.2.rehash</h4><p>​        随着操作的不断执行，哈希表保存的键值对会逐渐地增多或者减少，为了让哈希表的负载因子(loadfactor)维持在一个合理的范围之内，当哈希表保存的键值对数量太多或者太少时，程序需要对哈希表的大小进行相应的扩展或者收缩。扩展和收缩哈希表的工作可以通过执行rehash (重新散列)操作来完成，Redis 对字典的哈希表执行rehash的步骤如下:</p><ul><li><p>为字典的ht[1]哈希表分配空间，这个哈希表的空间大小取决于要执行的操作，以及ht[0]当前包含的键值对数量</p><ul><li>如果执行的是扩展操作，那么ht[1]的大小为第一个大于等于ht[0] .used*2的2^n(2的n次方幂);</li><li>如果执行的是收缩操作，那么ht [1]的大小为第-个大于等于ht [0] .used的2^n(2的n次方幂)。</li></ul></li><li><p>将保存在ht[0]中的所有键值对rehash到ht[1]上面: </p><p>rehash指的是重新计算键的哈希值和索引值，然后将键值对放置到ht[1]哈希表的指定位置上。</p></li><li><p>当ht[0]包含的所有键值对都迁移到了ht[1]之后(ht[0]变为空表),释放ht[0]，将ht[1]设置为ht[0]，并在ht[1]新创建-一个空白哈希表，为下一次rehash做准备。</p></li></ul><h3 id="4-跳跃表"><a href="#4-跳跃表" class="headerlink" title="4.跳跃表"></a>4.跳跃表</h3><h4 id="4-1-实现及结构"><a href="#4-1-实现及结构" class="headerlink" title="4.1.实现及结构"></a>4.1.实现及结构</h4><img src="/2021/10/02/redis/%E8%B7%B3%E8%B7%83%E8%A1%A8.png" class=""><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplist</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//表头节点和表尾节点</span>    structz skiplistNode <span class="token operator">*</span>header<span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span>    <span class="token comment">//表中节点的数量</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> length<span class="token punctuation">;</span>    <span class="token comment">//跳跃表中层数最大的节点的层数</span>    <span class="token keyword">int</span> level<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> zskiplist<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*层，每个层两个属性：前进指针和跨度    前进指针：访问向表尾方向的其他节点    跨度：前进指针所指节点和当前节点的距离    */</span>    <span class="token keyword">struct</span> <span class="token class-name">zskiplistLevel</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//前进指针</span>        <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>forward<span class="token punctuation">;</span>        <span class="token comment">//跨度</span>        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> span<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> level<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//后退指针，指向位于当前节点的前一个节点</span>    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>backward<span class="token punctuation">;</span>    <span class="token comment">//分值，跳跃表中的节点各自的分值从小到大排列</span>    <span class="token keyword">double</span> score<span class="token punctuation">;</span>    <span class="token comment">//成员对象</span>    robj <span class="token operator">*</span>obj <span class="token punctuation">;</span><span class="token punctuation">&#125;</span> zskiplistNode<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>层</p><p>跳跃表节点的level数组可以包含多个元素，每个元素都包含一个指向其他节点的指针，程序可以通过这些层来加快访问其他节点的速度，一般来说，层的数量越多，访问其他节点的速度就越快。每次创建一个新跳跃表节点的时候，程序都根据幂次定律(powerlaw,越大的数出现的概率越小)随机生成一个介于1和32之间的值作为level数组的大小，这个大小就是层的“高度”。</p></li><li><p>前进指针</p><p>用于从表头访问节点</p><p>遍历路线如虚线所示：</p><img src="/2021/10/02/redis/%E8%B7%B3%E8%B7%83%E8%A1%A8%E9%81%8D%E5%8E%86.png" class=""></li><li><p>跨度</p><p>两个节点之间跨度越大，其距离越远，指向null的跨度都为0；</p><p>跨度是用来计算在查找某个节点的排位，即将经过的节点的跨度相加。</p></li><li><p>后退指针</p><p>从表尾向表头访问节点，每个节点的后退指针只能后退至前一个节点。</p></li><li><p>分值和对象</p><p>节点的分值( score属性)是一个double类型的浮点数，跳跃表中的所有节点都按分值从小到大来排序。<br>节点的成员对象(obj属性)是一个指针，它指向一个字符串对象，而字符串对象则保存着一个SDS值。<br>在同一个跳跃表中，各个节点保存的成员对象必须是唯一的，但是多个节点保存的分值却可以是相同的:分值相同的节点将按照成员对象在字典序中的大小来进行排序，成员对象较小的节点会排在前面(靠近表头的方向)，而成员对象较大的节点则会排在后面(靠近表尾的方向)。</p></li></ul><h3 id="5-整数集合"><a href="#5-整数集合" class="headerlink" title="5.整数集合"></a>5.整数集合</h3><h4 id="5-1-集合的结构"><a href="#5-1-集合的结构" class="headerlink" title="5.1.集合的结构"></a>5.1.集合的结构</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">intset</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//编码方式</span>    uint32_ t encoding<span class="token punctuation">;</span>    <span class="token comment">//集合包含的元素数量</span>    uint32_ t length<span class="token punctuation">;</span>    <span class="token comment">//保存元素的数组</span>    int8_ t contents<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span> intset<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>保存的类型：int16_t,int32_t,int64_t</li><li>各个项在数组中从小到大排序，且没有重复项</li></ul><h4 id="5-2-数据类型的升级"><a href="#5-2-数据类型的升级" class="headerlink" title="5.2.数据类型的升级"></a>5.2.数据类型的升级</h4><p>每当我们要将一个新元素添加到整数集合里面，并且新元素的类型比整数集合现有所有元素的类型都要长时，整数集合需要先进行升级(upgrade),然后才能将新元素添加到整数集合里面。升级整数集合并添加新元素共分为三步进行:</p><ul><li>根据新元素的类型，扩展整数集合底层数组的空间大小，并为新元素分配空间。</li><li>将底层数组现有的所有元素都转换成与新元素相同的类型，并将类型转换后的元素放置到正确的位上，而且在放置元素的过程中，需要继续维持底层数组的有序性质不变。</li><li>将新元素添加到底层数组里面。</li></ul><p>数据类型不支持降级。</p><h3 id="6-压缩列表"><a href="#6-压缩列表" class="headerlink" title="6.压缩列表"></a>6.压缩列表</h3>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红黑树</title>
      <link href="/2021/10/01/hongheishu/"/>
      <url>/2021/10/01/hongheishu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、树概述"><a href="#一、树概述" class="headerlink" title="一、树概述"></a>一、树概述</h2><img src="/2021/10/01/hongheishu/a.png" class=""><p>有关树的常用术语</p><ul><li>节点：每个储存数据的圆圈都是节点；</li><li>节点的路径：从根节点到本节点经历的节点和分支的顺序排序。</li><li>路径的长度：指节点的路径包含的分支数，即边数。</li><li>节点的度：指该节点拥有的子树的个数；</li><li>树的度：所有的节点的度中，最大值。</li><li>叶节点：即终端节点。</li><li>分支节点：树中除了叶节点之外的节点都是分支节点。</li><li>子节点：指该节点的子树的根节点。</li><li>父节点：拥有子树的节点。</li><li>节点的层次：根节点的层次为0，依次向下加一；</li><li>树的深度：节点的层数；</li></ul><h2 id="二、二叉树"><a href="#二、二叉树" class="headerlink" title="二、二叉树"></a>二、二叉树</h2><img src="/2021/10/01/hongheishu/b.png" class=""><pre class="line-numbers language-none"><code class="language-none">前：8 3 1 6 4 7 10 14 13中：1 3 4 6 7 8 10 13 14后：1 4 7 6 3 13 14 10 8二叉树节点：public class TreeNode &#123;    private Object data;    private TreeNode left;    private TreeNode right;Constructor 构造方法Setter and Getter  &#125;二叉树递归遍历： 前：public static void pre(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            System.out.println(t.getData());            pre(t.getLeft());            pre(t.getRight());        &#125;     &#125;   中：public static void in(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            in(t.getLeft());            System.out.println(t .getData());            in(t.getRight());        &#125;     &#125;   后：public static void post(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            post(t.getLeft());            post(t.getRight());            System.out.println(t.getData());        &#125;     &#125;二叉查找树左子树的值均小于根节点的值，右子树的值均大于根节点的值。且每个子树均是二叉查找树。二叉平衡树在二叉查找树的基础上，通过对数据的调整，达到数据平衡的效果。   二叉查找树(二叉排序树)public class Tree &#123;    private TreeNode root;    public Tree(TreeNode root) &#123;        this.root &#x3D; root;    &#125;    public Tree() &#123;    &#125;    public TreeNode getRoot() &#123;        return root;    &#125;    public void setRoot(TreeNode root) &#123;        this.root &#x3D; root;    &#125;    public void add(TreeNode treeNode)&#123;        if(root &#x3D;&#x3D; null)&#123;            root &#x3D; treeNode;        &#125;else&#123;            root.add(treeNode);        &#125;    &#125;    public TreeNode search(int data)&#123;        if(root &#x3D;&#x3D; null)&#123;            return null;        &#125;else&#123;            return root.search(data);        &#125;    &#125;    public TreeNode parentSearch(int data)&#123;        if(root&#x3D;&#x3D;null)&#123;            return null;        &#125;else&#123;            return root.searchParent(data);        &#125;    &#125;    public void delete(int data)&#123;        if(root&#x3D;&#x3D;null) return;        else&#123;            TreeNode target &#x3D; this.search(data);            if(target&#x3D;&#x3D;null)&#123;                return;            &#125;            TreeNode parentNode &#x3D; this.parentSearch(data);            if(target.getLeft()&#x3D;&#x3D;null&amp;&amp;target.getRight()&#x3D;&#x3D;null)&#123;                if(parentNode.getLeft().getData()&#x3D;&#x3D;data)&#123;                    parentNode.setLeft(null);                &#125;else&#123;                    parentNode.setRight(null);                &#125;            &#125;            &#x2F;&#x2F;删除两个节点            if(target.getLeft()!&#x3D;null&amp;&amp;target.getRight()!&#x3D;null)&#123;                TreeNode node &#x3D; target.getRight();                int min &#x3D; node.getData();                while(node.getLeft()!&#x3D;null)&#123;                    node &#x3D; node.getLeft();                    min &#x3D; node.getData();                &#125;                delete(min);                target.setData(min);            &#125;            &#x2F;&#x2F;删除只有子节点的节点            if(target.getLeft()&#x3D;&#x3D;null&amp;&amp;target.getRight()!&#x3D;null)&#123;                parentNode.setRight(target.getRight());            &#125;else if(target.getLeft()!&#x3D;null&amp;&amp;target.getRight()&#x3D;&#x3D;null)&#123;                parentNode.setLeft(target.getLeft());            &#125;        &#125;    &#125;    &#x2F;&#x2F;遍历    public void preRoot()&#123;        if(root!&#x3D;null)&#123;            preRoot(root);        &#125;    &#125;    public void preRoot(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            System.out.println(t.getData());            preRoot(t.getLeft());            preRoot(t.getRight());        &#125;    &#125;    public void inRoot()&#123;        if(root!&#x3D; null)&#123;            inRoot(root);        &#125;    &#125;    public void inRoot(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            inRoot(t.getLeft());            System.out.println(t.getData());            inRoot(t.getRight());        &#125;    &#125;    public void postRoot()&#123;        if(root!&#x3D;null)&#123;            postRoot(root);        &#125;    &#125;    public void postRoot(TreeNode t)&#123;        if(t!&#x3D;null)&#123;            postRoot(t.getLeft());            postRoot(t.getRight());            System.out.println(t.getData());        &#125;    &#125;&#125;class TreeNode &#123;    private int data;    private TreeNode left;    private TreeNode right;    public TreeNode(int data) &#123;        this.data &#x3D; data;    &#125;    public TreeNode() &#123;    &#125;    public int getData() &#123;        return data;    &#125;    public void setData(int data) &#123;        this.data &#x3D; data;    &#125;    public TreeNode getLeft() &#123;        return left;    &#125;    public void setLeft(TreeNode left) &#123;        this.left &#x3D; left;    &#125;    public TreeNode getRight() &#123;        return right;    &#125;    public void setRight(TreeNode right) &#123;        this.right &#x3D; right;    &#125;    public void add(TreeNode treeNode)&#123;        if(treeNode&#x3D;&#x3D;null) return;        if(treeNode.data&lt;&#x3D;this.data)&#123;            if(this.left&#x3D;&#x3D;null)&#123;                this.left&#x3D;treeNode;            &#125;else&#123;                this.left.add(treeNode);            &#125;        &#125;else&#123;            if(this.right&#x3D;&#x3D;null)&#123;                this.right&#x3D;treeNode;            &#125;else&#123;                this.right.add(treeNode);            &#125;        &#125;    &#125;    public TreeNode search(int data)&#123;        if(data&#x3D;&#x3D;this.data) &#123;            return this;        &#125;else if(data&lt;this.data)&#123;            if(this.left&#x3D;&#x3D;null)&#123;                return null;            &#125;            return this.left.search(data);        &#125; else&#123;            if(this.right&#x3D;&#x3D;null)&#123;                return null;            &#125;            return this.right.search(data);        &#125;    &#125;    public TreeNode searchParent(int data)&#123;        if((this.left!&#x3D;null&amp;&amp;this.left.data&#x3D;&#x3D;data)||(this.right!&#x3D;null&amp;&amp;this.right.data&#x3D;&#x3D;data))&#123;            return this;        &#125;else if(data&lt;this.data&amp;&amp;this.left!&#x3D;null)&#123;            return this.left.searchParent(data);        &#125;else if(data&gt;this.data&amp;&amp;this.right!&#x3D;null)&#123;            return this.right.searchParent(data);        &#125;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>栈</title>
      <link href="/2021/09/30/zhan/"/>
      <url>/2021/09/30/zhan/</url>
      
        <content type="html"><![CDATA[<h2 id="一、栈概述"><a href="#一、栈概述" class="headerlink" title="一、栈概述"></a>一、栈概述</h2><p>栈的插入删除只能在表的尾端进行，即后入先出，进行插入删除操作的位置是栈顶，另一段是栈底  插入称为入栈，删除称为出栈</p><h2 id="二、栈的实现"><a href="#二、栈的实现" class="headerlink" title="二、栈的实现"></a>二、栈的实现</h2><ol><li> 顺序储存，数组实现</li></ol>   <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top<span class="token punctuation">;</span>      <span class="token comment">//栈顶指针</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>objects <span class="token operator">=</span> objects<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> top<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> top<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objects<span class="token punctuation">.</span>length<span class="token operator">==</span>top<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"满了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        objects<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"空了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> objects<span class="token punctuation">[</span><span class="token operator">--</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">peak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>         <span class="token keyword">return</span> objects<span class="token punctuation">[</span>top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"栈顶为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>链式储存，链表实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStack2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">StackNode</span> top<span class="token punctuation">;</span>  <span class="token comment">//栈帧</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack2</span><span class="token punctuation">(</span><span class="token class-name">StackNode</span> top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>top <span class="token operator">=</span> top<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">StackNode</span> n <span class="token operator">=</span> top<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            n<span class="token operator">=</span>n<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">peak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> top<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StackNode</span> stackNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StackNode</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        stackNode<span class="token punctuation">.</span>next <span class="token operator">=</span> top<span class="token punctuation">;</span>        top <span class="token operator">=</span> stackNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>top<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">StackNode</span> s <span class="token operator">=</span> top<span class="token punctuation">;</span>            top <span class="token operator">=</span> top<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StackNode</span> stackNode <span class="token operator">=</span> top<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>stackNode<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stackNode<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stackNode <span class="token operator">=</span> stackNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">StackNode</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> data<span class="token punctuation">;</span>    <span class="token class-name">StackNode</span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StackNode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token class-name">StackNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2021/09/29/jisuanjiwangluo/"/>
      <url>/2021/09/29/jisuanjiwangluo/</url>
      
        <content type="html"><![CDATA[<h2 id="一、计算机网络"><a href="#一、计算机网络" class="headerlink" title="一、计算机网络"></a>一、计算机网络</h2><ol><li>计算机网络模型<ul><li>五层因特网模型<ul><li><p>应用层</p></li><li><p>运输层</p><p>重要设备：网关</p><p>主要协议：UDP和TCP</p></li><li><p>网络层</p><p>重要设备：路由器</p><p>主要协议：IP、ICMP、ARP、RAPP</p></li><li><p>链路层</p><p>重要设备：网桥和交换机</p></li><li><p>物理层</p></li></ul></li><li>OSI七层模型<ul><li>应用层：是用户与网络的接口</li><li>表示层：表示层处理流经结点的数据编码的表示方式问题，以保证一个系统应用层发出的信息可被另一系统的应用层读出</li><li>会话层：会话层主要功能是管理和协调不同主机上各种进程之间的通信（对话），即负责建立、管理和终止应用程序之间的会话</li><li>运输层：传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题</li><li>网络层：网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。网络层将数据链路层提供的帧组成数据包</li><li>链路层：数据链路层是为网络层提供服务的，解决两个相邻结点之间的通信问题</li><li>物理层：它利用传输介质为数据链路层提供物理连接</li></ul></li></ul></li></ol><h2 id="二、应用层"><a href="#二、应用层" class="headerlink" title="二、应用层"></a>二、应用层</h2><h2 id="三、运输层"><a href="#三、运输层" class="headerlink" title="三、运输层"></a>三、运输层</h2><ol><li><p>UDP</p><p>UDP在发送报文段之前，发送方和接受方之间不会握手，UDP是无连接的。</p><p>UDP的特性</p><ul><li>应用层将数据传递给UDP时，UDP会立即将数据传送给网络层，没有阻塞机制</li><li>无需连接建立</li><li>无连接状态，无需维持连接状态</li></ul></li><li><p>TCP</p><ol><li><p>TCP的特点 </p><ul><li>TCP是面向连接的</li><li>全双工服务：一台主机的线程A和另一台主机线程B连接后,A的应用层可以传到B，B也可以传到A</li><li>TCP的连接是点对点的，单个发送，单个接受</li><li></li></ul></li><li><p>TCP的连接管理</p><ul><li><p>三次握手</p><img src="/2021/09/29/jisuanjiwangluo/e.png" class=""><p>SYN=1：同步信号，表示建立连接，SYN=1时</p><p>seq=x:表示发送端的数据包的初始序号为x;</p><p>ack:确认序号，表示响应。</p><p>ack=x+1:表示我方收到x为止的所有数据，希望下次发送的序号是 x+1</p></li><li><p>四次挥手</p><img src="/2021/09/29/jisuanjiwangluo/f.png" class=""><ul><li>FIN：=1，发起关闭信号</li></ul></li></ul></li></ol></li><li><p>UDP和TCP区别</p><ul><li>TCP面向连接，UDP无连接</li><li>TCP传输更加可靠，但UDP传输更快</li><li>TCP是点对点，UDP可以一对多</li></ul></li><li><p>TCP保证可靠传输的机制</p><ul><li>确认机制</li><li>重传机制</li><li>滑动窗口</li></ul></li></ol><h2 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层"></a>四、网络层</h2><ol><li><p>IP协议     </p><p>编址分类</p><ul><li><p>1.0.0.0-127.255.255.255   A类</p><p>子网 255.0.0.0</p></li><li><p>128.0.0.0-191.255.255.255   B类</p><p>子网 255.255.0.0</p></li><li><p>192.0.0.0-233.255.255.255    C类</p><p>子网 255.255.255.0 </p></li><li><p>多播地址  224.0.0.0-239.255.255.255</p></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2021/09/29/caozuoxitong/"/>
      <url>/2021/09/29/caozuoxitong/</url>
      
        <content type="html"><![CDATA[<h2 id="一、操作系统概述"><a href="#一、操作系统概述" class="headerlink" title="一、操作系统概述"></a>一、操作系统概述</h2><h2 id="二、进程和线程"><a href="#二、进程和线程" class="headerlink" title="二、进程和线程"></a>二、进程和线程</h2><ol><li><p>CPU的工作原理</p><p>设置命令初值，pc=50，从地址总线获取内存中的命令，返回50命令到CPU中，执行命令</p><img src="/2021/09/29/caozuoxitong/a.png" class=""></li><li><p>提出问题:IO指令的运算实际是计算指令的10^6倍，若先执行IO指令，则有数条指令在等待，CPU利用率过低</p><p>解决方法：并发</p></li><li><p>进程的组织</p><ul><li><p>PCB：为了描述控制进程的运行，系统中存放进程的管理和控制信息的数据结构称为进程控制块（PCB Process Control Block），它是进程实体的一部分，是操作系统中最重要的记录性数据结构。它是进程管理和控制的最重要的数据结构，每一个进程均有一个PCB，在创建进程时，建立PCB，伴随进程运行的全过程，直到进程撤消而撤消。</p></li><li><p>PCB+队列+状态组成了操作系统的组织，CPU将同一状态的PCB放进同一队列，根据不同的状态队列推进。</p><img src="/2021/09/29/caozuoxitong/b.png" class=""><br><img src="/2021/09/29/caozuoxitong/c.png" class=""></li></ul></li><li><p>进程的交替</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获得下一个要执行的进程</span>    pNew <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>ReadyQuene<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//交换</span>    <span class="token function">switch_to</span><span class="token punctuation">(</span>pCur<span class="token punctuation">,</span>pNew<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进程的地址空间分离</p></li><li><p>进程之间的合作</p></li><li><p>用户级线程</p><img src="/2021/09/29/caozuoxitong/d.png" class=""></li><li><p>内核级线程及其实现 </p></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>队列</title>
      <link href="/2021/09/28/dui-lie/"/>
      <url>/2021/09/28/dui-lie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ol><li><p>只允许在一端插入数据操作，在另一端进行删除数据操作的特殊线性表；进行插入操作的一端称为队尾（入队列），进行删除操作的一端称为队头（出队列）；队列具有先进先出（FIFO）的特性。</p></li><li><p>队列实现的关键在于两个指针，头指针指向已出队的元素，尾指针指向添加后的元素。</p><img src="/2021/09/28/dui-lie/g-1633009583595.png" class=""></li><li><p>队列类型</p><p>顺序队列</p><p>循环队列</p></li></ol><h2 id="二、基本操作实现"><a href="#二、基本操作实现" class="headerlink" title="二、基本操作实现"></a>二、基本操作实现</h2><ol><li><p>顺序储存实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 本次实现不考虑容量问题 * 基本操作： *  入队：enqueue() *  出队：dequeue() *  判断是否为空：isEmpty *  大小：size() *  返回队首元素不删除：peek() *  返回队尾元素不删除：poll() *  */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rear <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rear<span class="token operator">>=</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"数组长度不足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        elements<span class="token punctuation">[</span><span class="token operator">++</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            front<span class="token operator">++</span><span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列已为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> rear<span class="token operator">==</span>front<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>rear<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 循环数组队列 * 两个指针： * 首指针指向首元素 * 尾指针指向尾元素的后一个元素 * 约定要留一个空档位置，即还剩余一个位置的时候就满。 * 当数组存满之后，向之前空档的位置填数据 *  rear = (rear+1)%array.length  得到新的位置 * 当 front == (rear+1)%array.length 时，队列满 * 当 rear== front 时，队列为空 */</span><span class="token keyword">class</span> <span class="token class-name">CircleQueue</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>front <span class="token operator">==</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        elements<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>        rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> o <span class="token operator">=</span> elements<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>            front<span class="token operator">=</span><span class="token punctuation">(</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> o<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列已为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> rear<span class="token operator">==</span>front<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArrayException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">[</span>rear<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArrayException</span><span class="token punctuation">(</span><span class="token string">"队列为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>链式储存实现</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用算法</title>
      <link href="/2021/09/27/chang-yong-suan-fa/"/>
      <url>/2021/09/27/chang-yong-suan-fa/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建自己的GitHub个人博客</title>
      <link href="/2021/09/27/da-jian-zi-ji-de-github-ge-ren-bo-ke/"/>
      <url>/2021/09/27/da-jian-zi-ji-de-github-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="一、github准备工作"><a href="#一、github准备工作" class="headerlink" title="一、github准备工作"></a>一、github准备工作</h1><h2 id="1-github账号注册"><a href="#1-github账号注册" class="headerlink" title="1.github账号注册"></a>1.github账号注册</h2><h2 id="2-新建博客仓库"><a href="#2-新建博客仓库" class="headerlink" title="2.新建博客仓库"></a>2.新建博客仓库</h2><h1 id="二、hexo环境搭建"><a href="#二、hexo环境搭建" class="headerlink" title="二、hexo环境搭建"></a>二、hexo环境搭建</h1><h2 id="1-Node-js环境搭建"><a href="#1-Node-js环境搭建" class="headerlink" title="1.Node.js环境搭建"></a>1.Node.js环境搭建</h2><h2 id="2-hexo本地安装"><a href="#2-hexo本地安装" class="headerlink" title="2.hexo本地安装"></a>2.hexo本地安装</h2><h1 id="三、博客美化"><a href="#三、博客美化" class="headerlink" title="三、博客美化"></a>三、博客美化</h1><h2 id="1-更换主题"><a href="#1-更换主题" class="headerlink" title="1.更换主题"></a>1.更换主题</h2>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello hexo</title>
      <link href="/2021/09/26/hello-world/"/>
      <url>/2021/09/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表</title>
      <link href="/2021/09/20/xian-xing-biao/"/>
      <url>/2021/09/20/xian-xing-biao/</url>
      
        <content type="html"><![CDATA[<h3 id="一、线性表概述"><a href="#一、线性表概述" class="headerlink" title="一、线性表概述"></a>一、线性表概述</h3><h3 id="1-线性表定义"><a href="#1-线性表定义" class="headerlink" title="1.线性表定义"></a>1.线性表定义</h3><ul><li>​    线性表：n个同类型数据元素的有序序列    L=(a1,a2,a3,……..an)</li><li>​    除a1外，其他数据元素均有直接前驱</li><li>​    除an外，其他数据元素均有直接后驱</li></ul><h3 id="2-线性表的基本操作"><a href="#2-线性表的基本操作" class="headerlink" title="2.线性表的基本操作"></a>2.线性表的基本操作</h3><ul><li>​    建立线性表</li><li>​    清除线性表</li><li>​    定位线性表并查找前驱后继</li><li>​    查询</li><li>​    求线性表长度</li></ul><h3 id="3-线性表的存储结构及实现"><a href="#3-线性表的存储结构及实现" class="headerlink" title="3.线性表的存储结构及实现"></a>3.线性表的存储结构及实现</h3><ul><li><h4 id="1-线性表的顺序储存及实现-数组"><a href="#1-线性表的顺序储存及实现-数组" class="headerlink" title="1.线性表的顺序储存及实现(数组)"></a>1.线性表的顺序储存及实现(数组)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//java中的ArrayList类的内部实现是顺序储存线性表结构</span><span class="token comment">/*构造函数size()扩容函数增:add删：remove查：getcontain()*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span>        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">8683452581122892189L</span><span class="token punctuation">;</span>    <span class="token comment">//默认初始容量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CAPACITY <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">/*transient关键字，添加transient关键字的属性避免被序列化*/</span>    <span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token comment">//构造函数</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>initialCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> EMPTY_ELEMENTDATA<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Illegal Capacity: "</span><span class="token operator">+</span>                                               initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>elementData <span class="token operator">=</span> DEFAULTCAPACITY_EMPTY_ELEMENTDATA<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*数组扩容1.扩大原来容量的一半2.copyof 复制*/</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">grow</span><span class="token punctuation">(</span><span class="token keyword">int</span> minCapacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// overflow-conscious code</span>        <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//扩大原容量的一半</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> minCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            newCapacity <span class="token operator">=</span> minCapacity<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newCapacity <span class="token operator">-</span> MAX_ARRAY_SIZE <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">//扩容至 Integer.MAX_VALUE</span>            newCapacity <span class="token operator">=</span> <span class="token function">hugeCapacity</span><span class="token punctuation">(</span>minCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// minCapacity is usually close to size, so this is a win:</span><span class="token comment">//复制数组</span>        elementData <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查</span><span class="token comment">//返回某元素第一次出现的下标(可以为null)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//返回某元素最后一次出现的下标</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//获取某下标的元素</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查下标</span>        <span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Replaces the element at the specified position in this list with     * the specified element.     *     * @param index index of the element to replace     * @param element element to be stored at the specified position     * @return the element previously at the specified position     * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;     */</span><span class="token comment">//修改某下标的元素，并返回原值</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查下标</span>        <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//增</span><span class="token comment">//添加元素</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!  //扩容判断</span>        elementData<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//在特定下标插入值</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">rangeCheckForAdd</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//下标范围判断</span>        <span class="token function">ensureCapacityInternal</span><span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Increments modCount!!  //扩容判断</span><span class="token comment">//底层调用C/C++ （原始数组，开始下标，目标数组，开始位置，复制个数）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                         size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将index及后的元素复制到index+1之后</span>        elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> element<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//删</span><span class="token comment">//删除某下标的元素</span><span class="token comment">/*将删除的元素之后的数据整体前移将前移的元素空位的值改为null*/</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> oldValue <span class="token operator">=</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> numMoved <span class="token operator">=</span> size <span class="token operator">-</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numMoved <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//将删除下标后的元素整体前移</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>elementData<span class="token punctuation">,</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> elementData<span class="token punctuation">,</span> index<span class="token punctuation">,</span>                             numMoved<span class="token punctuation">)</span><span class="token punctuation">;</span>        elementData<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// clear to let GC do its work</span>        <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//删除某个元素</span><span class="token comment">//遍历</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">fastRemove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//清空整个列表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// clear to let GC do its work</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​             </p></li><li><h4 id="2-线性表的链式储存及实现-链表"><a href="#2-线性表的链式储存及实现-链表" class="headerlink" title="2.线性表的链式储存及实现(链表)"></a>2.线性表的链式储存及实现(链表)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span>    <span class="token keyword">extends</span> <span class="token class-name">AbstractSequentialList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span>    <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">transient</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> first<span class="token punctuation">;</span>    <span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> last<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//作为首节点连接</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">linkFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            f<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//作为末节点连接</span>    <span class="token keyword">void</span> <span class="token function">linkLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        last <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            l<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//将数据e插入到Node succ 的位置上</span>    <span class="token keyword">void</span> <span class="token function">linkBefore</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> succ<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert succ != null;</span><span class="token comment">//创建一个新的节点，包含e </span><span class="token comment">//新节点的prev 为原节点的prev ，新节点的next 为原节点</span><span class="token comment">//原节点的prev 变为新节点</span><span class="token comment">//原节点的prev 的 next 变为新节点</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> pred <span class="token operator">=</span> succ<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> e<span class="token punctuation">,</span> succ<span class="token punctuation">)</span><span class="token punctuation">;</span>        succ<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            first <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">else</span>            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//断开第一个节点与链表的连接</span>    <span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert f == first &amp;&amp; f != null;</span>        <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        f<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>        first <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//断开和最后一个节点的连接</span>    <span class="token keyword">private</span> <span class="token class-name">E</span> <span class="token function">unlinkLast</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert l == last &amp;&amp; l != null;</span>        <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev <span class="token operator">=</span> l<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        l<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        l<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>        last <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            first <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//断开某节点连接</span>    <span class="token class-name">E</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert x != null;</span>        <span class="token keyword">final</span> <span class="token class-name">E</span> element <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            first <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            last <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            next<span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        x<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> element<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//获得第一个及节点数据</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns the last element in this list.     *     * @return the last element in this list     * @throws NoSuchElementException if this list is empty     */</span><span class="token comment">//获得最后一个节点数据</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//删除第一个节点，首节点不能为空</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Removes and returns the last element from this list.     *     * @return the last element from this list     * @throws NoSuchElementException if this list is empty     */</span><span class="token comment">//删除最后一个节点，末节点不能为空</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">unlinkLast</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//将节点设为首节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">linkFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//将节点设为末节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns &#123;@code true&#125; if this list contains the specified element.     * More formally, returns &#123;@code true&#125; if and only if this list contains     * at least one element &#123;@code e&#125; such that     * &lt;tt>(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt>.     *     * @param o element whose presence in this list is to be tested     * @return &#123;@code true&#125; if this list contains the specified element     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//添加元素</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//删除某元素</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//找到元素，并断开连接</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">addAll</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除所有数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//   Clearing all of the links between nodes is "unnecessary", but:</span>        <span class="token comment">// - helps a generational GC if the discarded nodes inhabit</span>        <span class="token comment">//   more than one generation</span>        <span class="token comment">// - is sure to free memory even if there is a reachable Iterator</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            x<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            x<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            x<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        first <span class="token operator">=</span> last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Positional Access Operations</span>    <span class="token comment">/**     * Returns the element at the specified position in this list.     *     * @param index index of the element to return     * @return the element at the specified position in this list     * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查下标</span><span class="token comment">//node(index） 获得特定下标的节点</span>        <span class="token keyword">return</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//修改特定下标的节点的值</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检查下标</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">E</span> oldVal <span class="token operator">=</span> x<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        x<span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>        <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">//在特定的位置插入节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//检查下标</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span>            <span class="token function">linkLast</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//直接添加，作为最后一个节点连接</span>        <span class="token keyword">else</span>            <span class="token function">linkBefore</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将节点插入到列表中</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">//删除特定下标的节点</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//检查下标</span>        <span class="token keyword">return</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//断开某节点的连接</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Tells if the argument is the index of an existing element.     */</span><span class="token comment">//判断下标</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> index <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//判断下标</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isPositionIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> index <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//检查下标</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkElementIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isElementIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token function">outOfBoundsMsg</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//获得特定下标的节点</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// assert isElementIndex(index);</span>        <span class="token comment">//采用二分法，循环</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> index<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>                x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            <span class="token keyword">return</span> x<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Search Operations</span><span class="token comment">//获得某元素第一次出现的下标</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//循环遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> first<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//获取某元素最后一次出现的下标</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//从last节点向前遍历</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                index<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                index<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> index<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Queue operations. linkedList的队列操作</span><span class="token comment">/*peak：获得首节点数据，如果首节点是null，则返回null，只返回值不删除节点element：返回首节点数据，首节点为null则异常remove：删除首节点，首节点可以为nullpoll：删除首节点，首节点可以为nulladd：可以增加null元素offer：可以增加null元素*/</span><span class="token comment">//获得首节点数据，如果是null，则返回null，只返回值不删除节点</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//返回首节点数据，首节点为null则异常</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//删除首节点，首节点可以为null</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//删除第一个节点，且首节点不为空</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/**     * Inserts the specified element at the end of this list.     *     * @param e the element to insert     * @return &#123;@code true&#125; (as specified by &#123;@link Deque#offerLast&#125;)     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offerLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Retrieves, but does not remove, the first element of this list,     * or returns &#123;@code null&#125; if this list is empty.     *     * @return the first element of this list, or &#123;@code null&#125;     *         if this list is empty     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> f<span class="token punctuation">.</span>item<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Retrieves, but does not remove, the last element of this list,     * or returns &#123;@code null&#125; if this list is empty.     *     * @return the last element of this list, or &#123;@code null&#125;     *         if this list is empty     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> l<span class="token punctuation">.</span>item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Retrieves and removes the first element of this list,     * r returns &#123;@code null&#125; if this list is empty.     *     * @return the first element of this list, or &#123;@code null&#125; if     *     this list is empty     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> f <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Retrieves and removes the last element of this list,     * or returns &#123;@code null&#125; if this list is empty.     *     * @return the last element of this list, or &#123;@code null&#125; if     *     this list is empty     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> l <span class="token operator">=</span> last<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">unlinkLast</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Pushes an element onto the stack represented by this list.  In other     * words, inserts the element at the front of this list.     *     * &lt;p>This method is equivalent to &#123;@link #addFirst&#125;.     *     * @param e the element to push     * @since 1.6     */</span><span class="token comment">/*linkedlist中 有关于栈的操作   pop:   */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addFirst</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Pops an element from the stack represented by this list.  In other     * words, removes and returns the first element of this list.     *     * &lt;p>This method is equivalent to &#123;@link #removeFirst()&#125;.     *     * @return the element at the front of this list (which is the top     *         of the stack represented by this list)     * @throws NoSuchElementException if this list is empty     * @since 1.6     */</span><span class="token comment">//出栈，首节点不能为空</span>    <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Removes the first occurrence of the specified element in this     * list (when traversing the list from head to tail).  If the list     * does not contain the element, it is unchanged.     *     * @param o element to be removed from this list, if present     * @return &#123;@code true&#125; if the list contained the specified element     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeFirstOccurrence</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Removes the last occurrence of the specified element in this     * list (when traversing the list from head to tail).  If the list     * does not contain the element, it is unchanged.     *     * @param o element to be removed from this list, if present     * @return &#123;@code true&#125; if the list contained the specified element     * @since 1.6     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">removeLastOccurrence</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>item <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> x <span class="token operator">=</span> last<span class="token punctuation">;</span> x <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> x <span class="token operator">=</span> x<span class="token punctuation">.</span>prev<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">unlink</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Returns a list-iterator of the elements in this list (in proper     * sequence), starting at the specified position in the list.     * Obeys the general contract of &#123;@code List.listIterator(int)&#125;.&lt;p>     *     * The list-iterator is &lt;i>fail-fast&lt;/i>: if the list is structurally     * modified at any time after the Iterator is created, in any way except     * through the list-iterator's own &#123;@code remove&#125; or &#123;@code add&#125;     * methods, the list-iterator will throw a     * &#123;@code ConcurrentModificationException&#125;.  Thus, in the face of     * concurrent modification, the iterator fails quickly and cleanly, rather     * than risking arbitrary, non-deterministic behavior at an undetermined     * time in the future.     *     * @param index index of the first element to be returned from the     *              list-iterator (by a call to &#123;@code next&#125;)     * @return a ListIterator of the elements in this list (in proper     *         sequence), starting at the specified position in the list     * @throws IndexOutOfBoundsException &#123;@inheritDoc&#125;     * @see List#listIterator(int)     */</span>    <span class="token keyword">public</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">checkPositionIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListItr</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ListItr</span> <span class="token keyword">implements</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> lastReturned<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> nextIndex<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token class-name">ListItr</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// assert isPositionIndex(index);</span>            next <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">node</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            nextIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> nextIndex <span class="token operator">&lt;</span> size<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> next<span class="token punctuation">;</span>            next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> nextIndex <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">previous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasPrevious</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> next <span class="token operator">=</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> last <span class="token operator">:</span> next<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>            nextIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> lastReturned<span class="token punctuation">.</span>item<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">nextIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> nextIndex<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">previousIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> nextIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastReturned <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> lastNext <span class="token operator">=</span> lastReturned<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token function">unlink</span><span class="token punctuation">(</span>lastReturned<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> lastReturned<span class="token punctuation">)</span>                next <span class="token operator">=</span> lastNext<span class="token punctuation">;</span>            <span class="token keyword">else</span>                nextIndex<span class="token operator">--</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            expectedModCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastReturned <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastReturned<span class="token punctuation">.</span>item <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastReturned <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token function">linkLast</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token function">linkBefore</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>            nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>            expectedModCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">></span></span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>modCount <span class="token operator">==</span> expectedModCount <span class="token operator">&amp;&amp;</span> nextIndex <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                action<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>                lastReturned <span class="token operator">=</span> next<span class="token punctuation">;</span>                next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//链表节点</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">E</span> item<span class="token punctuation">;</span> <span class="token comment">//元素 </span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>  <span class="token comment">//上一个</span>        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev<span class="token punctuation">;</span>  <span class="token comment">//下一个</span>        <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> prev<span class="token punctuation">,</span> <span class="token class-name">E</span> element<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>item <span class="token operator">=</span> element<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> prev<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http协议</title>
      <link href="/2021/08/01/http-xie-yi/"/>
      <url>/2021/08/01/http-xie-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、http概述"><a href="#一、http概述" class="headerlink" title="一、http概述"></a>一、http概述</h2><ol><li>http协议用于客户端和服务端之间的通信，其中请求文本和图像资源的是客户端，提供资源和响应资源的是服务端。客户端和服务端对象在通信过程中可能会交换。</li><li>URL和URI</li></ol><h2 id="二、报文"><a href="#二、报文" class="headerlink" title="二、报文"></a>二、报文</h2><ol><li><p>请求报文</p><p>请求报文由 方法、URI、协议版本、请求首部字段(前几项共同组成报文首部)内容实体组成。</p><ul><li><p>方法</p><p>GET:获取资源(客户端说：请把资源给我)</p><p>POST：传输实体主体(客户端说：我要把信息告诉你)</p><p>PUT：传输文件</p><p>HEAD：获得报文首部</p><p>DELETE：删除文件</p><p>OPTIONS：询问支持的方法</p><p>TRACE：追踪路径</p><p>CONNECT：要求用隧道协议连接处理</p></li></ul></li><li><p>响应报文</p><p>响应报文由协议版本、状态码、状态码原因短语、响应首部字段组成。</p></li><li><p>请求行和状态行</p><p>请求行：包含请求的方法和版本。</p><p>状态行：包含状态码和原因短语。</p></li></ol><h2 id="三、状态码"><a href="#三、状态码" class="headerlink" title="三、状态码"></a>三、状态码</h2><ol><li><p>1xx(信息状态码)</p><p>接受的信息正在处理</p></li><li><p>2xx(成功状态码)</p><p>200    ok</p><p>204    请求成功但无资源返回</p><p>206    请求资源的一部分</p></li><li><p>3xx(重定向状态码)</p><p>301    永久重定向</p><p>302    临时重定向</p><p>304    资源找到到请求不符合要求</p><p>307    临时重定向</p></li><li><p>4xx(客户端错误码)</p><p>401    http认证失败</p><p>403    访问资源不允许访问</p><p>404    页面找不到</p></li><li><p>5xx(服务端状态码)</p><p>500    资源出现问题</p><p>503    服务器正忙</p></li></ol><h2 id="四、常用首部字段"><a href="#四、常用首部字段" class="headerlink" title="四、常用首部字段"></a>四、常用首部字段</h2><ul><li><p>请求首部字段</p><p>Accept：用户代理可处理的媒体类型</p><p>Accept-Charset：优先的字符集</p><p>Accept-Encoding：优先的内容编码</p><p>Accept-Language：优先的语言（自然语言）</p><p>Authorization：Web认证信息</p><p>Expect：期待服务器的特定行为</p><p>From：用户的电子邮箱地址</p><p>Host：请求资源所在服务器</p><p>If-Match：比较实体标记（ETag）</p><p>If-Modified-Since：比较资源的更新时间</p><p>If-None-Match：比较实体标记（与If-Match相反）</p><p>If-Range：资源未更新时发送实体Byte的范围请求</p><p>If-Unmodified-Since：比较资源的更新时间（与If-Modified-Since相反）</p><p>Max-Forwards：最大传输逐跳数</p><p>Proxy-Authorization：代理服务器要求客户端的认真信息</p><p>Range：实体的直接范围请求</p><p>Referer：对请求中URI的原始获取方</p><p>TE：传输编码的优先级</p><p>User-Agent：HTTP客户端程序的信息</p></li><li><p>响应首部字段</p><p>Accept-Ranges：是否接受字节范围请求</p><p>Age：推算资源创建经过时间</p><p>ETa：资源的匹配信息</p><p>Location：令客户端重定向至指定URI</p><p>Proxy-Authenticate：代理服务器对客户端的认真信息</p><p>Retry-After：对再次发起请求的时机请求</p><p>Server：HTTP服务器的安装信息</p><p>Vary：代理服务器缓存的管理信息</p><p>WWW-Authenticate：服务器对客户端的认真信息</p></li><li><p>通用字段</p><p>Cache-Control：控制缓存的行为</p><p>Connection：逐跳首部、管理持久连接。不再转发的首部字段名。</p><p>Date：创建报文的日期时间</p><p>Pragma：报文指令</p><p>Trailer：报文末端的首部一览</p><p>Transfer-Encoding：指定报文主体的传输编码方式</p><p>Upgrade：升级为其他协议</p><p>Via：代理服务器的相关信息</p><p>Warning：错误通知</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL(三)</title>
      <link href="/2021/07/10/mysql2/"/>
      <url>/2021/07/10/mysql2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库事务"><a href="#一、数据库事务" class="headerlink" title="一、数据库事务"></a>一、数据库事务</h2><ol><li>事务特性ACID<ul><li>原子性：事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做</li><li>一致性：事 务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。</li><li>隔离性：一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</li><li>持久性：也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。</li></ul></li><li>事务的隔离级别<ul><li>读未提交：在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。 脏读，不可重复读，幻读</li><li>读已提交：一个事务只能看见已经提交事务所做的改变 。不可重复读，幻读</li><li>可重复读：MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。幻读</li><li>串行化：最高的隔离级别，它通过强制事务排序，使之不可能相互冲突</li></ul></li><li>事务可能出现的问题<ul><li>脏读：一个事务读取到另一个事务还未提交的数据。</li><li>不可重复读：在一个事务中多次读取同一个数据时，结果出现不一致。</li><li>幻读：在一个事务中使用相同的 SQL 两次读取，第二次读取到了其他事务新插入的行。</li><li>更新丢失：多个事务对同一行数据更新时，后面的事务的更新结果会覆盖前面的事务。</li></ul></li><li>事务控制 </li></ol><h2 id="二、SQL锁"><a href="#二、SQL锁" class="headerlink" title="二、SQL锁"></a>二、SQL锁</h2><ol><li><p>锁的分类</p><ul><li>表锁：开销小，加锁快，不出现锁，并发度最低。</li><li>行锁：开销大，加锁慢，出现死锁，并发度最高。</li><li>页锁：在表锁和行锁之间，会死锁，并发度一般。</li></ul></li><li><p>MyISAM表锁</p><ul><li><p>表锁分为：表共享读锁和表独占写锁。</p></li><li><p>表锁的读和写请求时串行执行的。</p></li><li><p>当用户获得读锁，其他用户可以读，但不可以写，当用户获得写锁，其他用户读和写都不可以。</p></li><li><p>当select时，表会自动加读锁，当update,delete,insert时，会自动加写锁。</p></li><li><p>MyISAM支持查询和插入并发</p><p>concurrent_insert为0时，不允许插入并发</p><p>concurrent_insert为1时，当表中没有空洞(没有行被删除)时，可以并发插入</p><p>concurrent_insert为2时，支持并发插入</p></li><li><p>锁的调度</p><p>当两个线程同时读请求和写请求时，Mysql优先让写请求获得锁。</p><p>set  low_priority_insert\update\delete =1   通过此命令来改变优先级</p></li></ul></li><li><p>InnoDB行锁</p><ul><li>行锁分为：共享锁和排他锁</li><li>InnoDB行锁和表锁共存，内部使用两种意向锁，都是表锁。<ul><li>意向共享锁：事务在给一个行加共享锁之前，必须获得意向共享锁。</li><li>意向排他锁：事务在给一个行加排他锁之前，必须后的意向排他锁。</li></ul></li><li>锁的兼容<ul><li>当前锁是排他锁，则其他请求不能获得任何锁。</li><li>当前锁是共享锁，则其他请求可以获得共享锁和意向共享锁</li><li>当前锁是意向排他锁， 其他请求可以获得两个意向锁</li><li>当前锁是意向共享锁，其他请求不能获得排他锁。</li></ul></li><li>意向锁InnoDB自动添加，Update、Insert、Delete会自动为相关数据集加排他锁。select不会加锁。</li><li>InnoDB的行锁实现<ol><li>InnoDB的行锁分为：<ul><li>Record lock：对索引项加锁</li><li>Gap lock: 对索引项的之间的间隙加锁</li><li>Next-key lock:前两种的结合。</li></ul></li><li>InnoDB通过对索引加锁，所以如果InnoDB不通过索引检索数据，则将对表中所以数据加锁，相当于表锁。</li><li>InnoDB是对索引加的锁，如果用到相同的索引键，是会出现锁冲突的。</li><li>sql的执行是由内部优化器选择对应的执行计划的，所以锁冲突时，可能是因为优化器没有选用索引。</li><li>Next-key锁<ul><li>当我们使用范围条件查询的时候，对符合的索引项加锁，对符合但不存在的数据”间隙”加Gap锁。</li><li>当我们使用相等条件查询一个不存的值时，也会使用Next-key锁。</li></ul></li></ol></li></ul></li><li><p>死锁情况</p><ul><li>MyISAM表锁 采取串行，不会出现死锁现象</li><li>InnoDB的死锁情况<ol><li>当事务在并发时，事务互相拥有对方的锁，造成死锁。</li><li>优化死锁的方法；<ul><li>约定不同事务以相同的顺序访问表</li><li>对表内数据进行排序，以顺序访问数据</li></ul></li></ol></li></ul></li></ol><h2 id="三、WAL"><a href="#三、WAL" class="headerlink" title="三、WAL"></a>三、WAL</h2><ol><li><p>WAL(Write-ahead logging，预写式日志)是数据库系统提供原子性和持久化的一系列技术。指的是 MySQL 的写操作并不是立刻更新到磁盘上，而是先记录在日志上，然后在合适的时间再更新到磁盘上。日志主要分为 undo log、redo log、binlog。</p></li><li><p>redo log 和 undo log</p><ul><li>redo log称为重做日志，每当有操作时，在数据变更之前将操作写入redo log，系统可以在重启后继续操作。</li><li>undo log称为撤销日志，当一些变更执行到一半无法完成时，可以根据撤销日志恢复到变更之间的状态。</li></ul></li></ol><h2 id="四、MVCC"><a href="#四、MVCC" class="headerlink" title="四、MVCC"></a>四、MVCC</h2><ol><li><p>当前读和快照读</p><ul><li>当前读：加共享锁和排他锁操作都是一种当前读，就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。</li><li>快照读：不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；快照读的实现是基于多版本并发控制，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</li></ul></li><li><p>MVCC的实现基于记录中的 隐式字段，undo日志 ，Read View </p><p>隐式字段和undolog构成了数据版本链，查询时生成ReadView记录了活跃的事务，通过比较版本链的事务id和ReadView的活跃事务来确定访问数据的版本。</p><ul><li><p>隐式字段</p><ul><li>一个保存了行的事务ID（DB_TRX_ID），记录创建这条记录/最后一次修改该记录的事务ID。事务开启即更新。</li><li>一个保存了行的回滚指针（DB_ROLL_PT）。指向这条记录的上一个版本（存储于rollback segment里）</li><li>每开始一个新的事务，都会自动递增产生一个新的事务id。事务开始时刻的会把事务id放到当前事务影响的行事务id中，当查询时需要用当前事务id和每行记录的事务id进行比较。</li></ul></li><li><p>undolog</p><ul><li>保存了事务发生之前的数据的一个版本，可以用于回滚，同时可以提供多版本并发控制下的读（MVCC），也即非锁定读</li><li>根据行为的不同，undo log分为两种： insert undo log 和 update undo log<ul><li>insert 操作中产生的undo log，因为insert操作记录只对当前事务本身，对于其他事务此记录不可见，所以 insert undo log 可以在事务提交后直接删除而不需要进行purge操作。</li><li>update 或 delete 操作中产生的 undo log。 因为会对已经存在的记录产生影响，为了提供 MVCC机制，因此update undo log 不能在事务提交时就进行删除，而是将事务提交时放到入 history list 上，等待 purge 线程进行最后的删除操作。</li><li>为了实现InnoDB的MVCC机制，更新或者删除操作都只是设置一下老记录的deleted_bit，并不真正将过时的记录删除。为了节省磁盘空间，InnoDB有专门的purge线程来清理deleted_bit为true的记录。为了不影响MVCC的正常工作，purge线程自己也维护了一个read view（这个read view相当于系统中最老活跃事务的read view）;如果某个记录的deleted_bit为true，并且DB_TRX_ID相对于purge线程的read view可见，那么这条记录一定是可以被安全清除的。</li></ul></li></ul></li><li><p>ReadView </p><ul><li><p>判断所有版本中哪个版本是当前事务可见的处理。</p><p>包含内容：</p><ol><li>m_ids：表示在生成ReadView时当前系统中活跃的读写事务的事务id列表。</li><li>min_trx_id：表示在生成ReadView时当前系统中活跃的读写事务中最小的事务id，也就是m_ids中的最小值。</li><li>max_trx_id：表示生成ReadView时系统中应该分配给下一个事务的id值。</li><li>creator_trx_id：表示生成该ReadView的事务的事务id。查询事务开启时生成ReadView。</li></ol></li><li><p>对于查询时的版本链数据是否看见的判断逻辑：</p><p>下述访问版本均指数据行的版本链的某一个版本，即判断版本链上的哪个版本可以被访问。</p><ul><li>如果被访问版本的 trx_id 属性值小于 m_ids 列表中最小的事务id，表明生成该访问版本的事务在生成 ReadView 前已经提交，所以该版本可以被当前事务访问。</li><li>如果被访问版本的 trx_id 属性值大于 m_ids 列表中最大的事务id，表明生成该访问版本的事务在生成 ReadView 后才提交，所以该版本不可以被当前事务访问。</li><li>如果被访问版本的 trx_id 属性值在 m_ids 列表中最 大的事务id和最小事务id之间，那就需要判断一下 trx_id 属性值是不是在 m_ids 列表中，如果在，说明创建 ReadView 时生成该版本的事务还是活跃的，该版本不可以被访问；如果不在，说明创建 ReadView 时生成该版本的事务已经被提交，该版本可以被访问。</li><li>如果被访问版本的trx_id属性值与ReadView中的creator_trx_id值相同，意味着当前事务在访问它自己修改过的记录，所以该版本可以被当前事务访问。</li></ul></li></ul><img src="/2021/07/10/mysql2/eg1.png" class=""><p>取T5时刻，事务777的版本链</p><img src="/2021/07/10/mysql2/eg2.png" class=""><p>T5时刻，事务999的查询语句生成的的Readview</p><p>此时的ReadView的列表情况 m_ids：[777] ，判断版本链上的每一个版本的事务id和ReadView的id表。如上面版本链，最新版本777和上一个版本777均不符合，版本111符合。</p><p>取T8时刻，版本链</p><img src="/2021/07/10/mysql2/eg3.png" class=""><p>T8时刻的事务999的查询语句生成的ReadView，</p><p>此时的ReadView的列表情况 m_ids：[888] ，判断版本链上的每一个版本的事务id和ReadView的id表。如上面版本链，最新版本888不符合，版本777符合。</p><p>若T5的ReadView的列表情况 m_ids：[777] ,判断版本链上的每一个版本的事务id和ReadView的id表。版本888和两个版本777均不符合，版本111符合。</p></li><li><p>读已提交和可重复读的实现。 </p><p>READ COMMITED实现原理</p><p>每次读取数据前都生成一个ReadView</p><p>REPEATABLE READ</p><p>在第一次读取数据时生成一个ReadView</p></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql(二)</title>
      <link href="/2021/07/08/mysql/"/>
      <url>/2021/07/08/mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据库储存引擎"><a href="#一、数据库储存引擎" class="headerlink" title="一、数据库储存引擎"></a>一、数据库储存引擎</h2><ol><li><p>数据库的储存引擎是一种机制，规定了应用如何存储引用数据。Mysql5.5之前默认的存储引擎是MyISAM，之后是InnoDB.</p></li><li><p>MyISAM和InnoDB</p><p>MyISAM</p><ul><li>采用表锁</li><li>B树索引和全文索引</li><li>MyISAM表在磁盘的存储文件<ul><li>.frm  表结构文件</li><li>.MYD  MYDATA  表的数据文件</li><li>.MYI   MYIndex   表的索引文件</li></ul></li></ul><p>InnoDB</p><ul><li>采用行锁</li><li>支持事务和外键</li><li>B树索引和集群索引</li><li>InnoDB表在磁盘的存储文件<ul><li>user.frm：表结构文件</li><li>user.ibd：索引和数据文件（InnoDB Data）</li></ul></li></ul></li></ol><h2 id="二、索引"><a href="#二、索引" class="headerlink" title="二、索引"></a>二、索引</h2><ol><li><p>索引的本质是一个数据结构。</p></li><li><p>Mysql的索引结构</p><ul><li><p>B树索引</p><p>B-Tree</p><img src="/2021/07/08/mysql/Qa.png" class=""><p>B+Tree</p><img src="/2021/07/08/mysql/image-20211004175244727.png" class="" title="image-20211004175244727"></li><li><p>hash索引</p><img src="/2021/07/08/mysql/image-20211004193746781.png" class="" title="image-20211004193746781"><p>哈希索引是基于哈希表实现，只有精确匹配索引所有列的查询才有效，对于每一行数据，存储引擎都会对所有的索引列计算一个哈希码（hash code)，哈希码是一个较小的值，大部分情况下不同的键值的行计算出来的哈希码是不同的，但是也会有例外，就是说不同列值计算出来的hash值一样的（即所谓的hash冲突），哈希索引将所有的哈希码存储在索引中，同时在哈希表中保存指向每一个数据行的指针，hash很适合做索引，为某一列或几列建立hash索引，就会利用这一列或几列的值通过一定的算法计算出一个hash值，对应一行或几行数据</p></li><li><p>全文索引</p></li><li><p>集群索引</p></li></ul></li><li><p>联合索引</p><img src="/2021/07/08/mysql/image-20211002175058383.png" class=""><ul><li><p>最左匹配原则</p><p>假如一个联合索引为a,b,c；则检索(a,b,c)(a,b),(a,c)用到的这个联合索引，(b,c)不用这个索引</p><p>select * from table where id = a or name = b;select * from table where name=b or id=a;</p><p>上述两个语句均可用到索引abc,也就是说和语句中字段的顺序无关；</p></li></ul></li><li><p> 常用索引的情况</p></li><li><p>不能用索引的情况</p></li><li><p>索引失效</p></li><li><p>MyISAM和InnoDB的索引结构</p><ol><li><p>MyISAM</p><ul><li><p>MyISAM存储引擎的索引结构</p><p>MyISAM表的索引文件的key为索引列的数据，value为每个数据代表的行的磁盘地址</p></li></ul></li><li><p>InnoDB</p><img src="/2021/07/08/mysql/a.png" class=""><ul><li><p>InnoDB存储引擎的索引结构</p><p>InnoDB表的索引结构key为索引列的数据，每个key代表的整个行的数据也存储在索引表中。</p></li></ul></li></ol></li></ol><h2 id="sql优化"><a href="#sql优化" class="headerlink" title="sql优化"></a>sql优化</h2><h4 id="查询慢sql"><a href="#查询慢sql" class="headerlink" title="查询慢sql"></a>查询慢sql</h4><h4 id="查看分析sql执行情况"><a href="#查看分析sql执行情况" class="headerlink" title="查看分析sql执行情况"></a>查看分析sql执行情况</h4><ol><li><p>explain</p><p>explain +  sql 语句  可以分析这条语句的执行计划，得到如下结果  </p><img src="/2021/07/08/mysql/d.png" class=""><ul><li><p>select_type </p><ul><li>SIMPLE:简单，不使用表连接和子查询</li><li>PRIMARY：主查询，外层查询</li><li>UNION：UNION中的后面的查询</li><li>SUBQUERY：子查询中的第一个SELECT</li></ul></li><li><p>table</p><p>输出结果的表</p></li><li><p>type</p><ul><li>null&gt;system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;all</li><li>all:全表扫描</li><li>index:遍历整个索引查询</li><li>range:索引范围扫描</li><li>ref: 采用非唯一索引</li><li>eq_ref：采用唯一索引，每个索引只对应一条数据</li><li>system\const：单表中至多只有一个匹配行</li><li>null:不用访问表，直接可以得到结果</li></ul></li><li><p>possible_keys</p><p>查询时可能使用的索引</p></li><li><p>key</p><p>查询时真正使用的索引</p></li><li><p>key_len</p><p>使用到索引字段的长度</p></li><li><p>ref</p></li><li><p>rows</p><p>扫描行数</p></li><li><p>Extra</p><p>执行说明</p></li></ul><p>show warnings</p><p>此命令可以查看mysql的内部优化器执行的sql语句</p></li><li><p>show profiles</p><ul><li>show profiles:列出执行sql的运行时间和queryID</li><li>show  profile  for query  query_ID :查看某个sql语句执行的各项具体时间</li><li>show profile  cpu\all\io…  for  query query_ID  查看明细类型的时间消耗</li></ul></li><li><p>show status</p><p>SHOW STATUS命令会显示每个服务器变量的名字和值</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html">https://dev.mysql.com/doc/refman/5.7/en/server-status-variables.html</a>  列出了不同的变量含义</p></li><li><p>trace  分析优化器如何选择执行文件 </p></li></ol><h4 id="sql优化措施"><a href="#sql优化措施" class="headerlink" title="sql优化措施"></a>sql优化措施</h4><ol><li><p>选择正确的数据类型</p><ul><li>选择储存空间小的</li><li>选择类型简单的</li><li>避免null值存在，null值存在使得索引相关更加复杂</li></ul></li><li><p>schema设计</p><ul><li><p>不要有太多的列</p><p>存储引擎在工作时，将缓冲数据在服务层转换，列数过多，资源消耗大</p></li><li><p>不要有太多的表关联</p></li><li><p>不要过度使用枚举</p></li></ul></li><li><p>查询优化</p><ul><li><p>不要查询到不需要的数据</p><ul><li><p>查询不需要的记录</p><p>如：select查询大量的结果，但只获取前N条记录，理想是需要几条就查几条</p></li><li><p>多表联查时，返回全部列，只返回需要的列最佳</p></li><li><p>select *</p></li><li><p>重复查相同的数据，可以将需要的数据查一次后缓存，不用重复查</p></li></ul></li><li></li><li><p>重构sql</p><ul><li><p>可以将一个复杂的查询分为数个简单查询</p></li><li><p>切分查询</p><p>将数据分段，每次完成查询的一部分</p></li><li><p>可能的情况下，分解关联查询，将join关联分为几个简单查询</p><p>缓存效率更高</p><p>减少锁的竞争</p></li></ul></li><li></li><li></li><li></li><li><p>数据库三范式和反范式</p><p>第一范式：要求表中业务字段，逻辑上不可再分</p><p>第二范式：要求表中必须存在业务主键 (单一业务主键 或 联合业务主键)<br>非业务主键，必须依赖于 单一业务主键 或 全部的联合业务主键</p></li></ul></li></ol><p>第三范式：要求非业务主键列不能相互依赖</p><p>反范式化设计数据库，是为了用空间换时间，提高查询效率</p><p><strong>第一范式（1NF）：</strong> <strong>强调的是列的原子性，即列不能够再分成其他几列。</strong>    </p><p> <strong>第二范式（2NF）：</strong> <strong>首先要满足它是1NF，另外还需要包含两部分内容：一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。</strong></p><p> <strong>第三范式（3NF）：</strong> <strong>首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql(一)</title>
      <link href="/2021/07/05/mysql1/"/>
      <url>/2021/07/05/mysql1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Mysql概述"><a href="#一、Mysql概述" class="headerlink" title="一、Mysql概述"></a>一、Mysql概述</h2><h2 id="二、基准测试"><a href="#二、基准测试" class="headerlink" title="二、基准测试"></a>二、基准测试</h2><ol><li><p>基准测试策略</p><p>集成式：针对整个系统测试</p><p>单组件式：针对Mysql单独测试</p></li><li><p>测试指标</p><ul><li>吞吐量：单位时间的处理事务量。</li><li>响应时间和延迟：测试任务所需时间</li><li>并发性：同时请求的线程数或连接数，以及并发数提高后，对其他性能的影响。</li><li>可扩展性：给系统增加一倍的资源，就可以获得两倍的效益。</li></ul></li><li><p>测试方法</p></li><li><p>测试工具</p><ul><li>集成式<ul><li>ab</li><li>http_load</li><li>JMeter</li></ul></li><li>单组件式<ul><li>mysqlslap</li><li>MySQL Benchmark Suite</li><li>Super Smack</li><li>Database Test Suite</li><li>sysbench</li></ul></li></ul></li></ol><h2 id="三、MySQL分区"><a href="#三、MySQL分区" class="headerlink" title="三、MySQL分区"></a>三、MySQL分区</h2><ol><li><p>分区：数据库中的一个表，按照规则分为若干个小表，不影响业务逻辑。</p></li><li><p>分区的优点</p><ul><li>可以储存更多的数据</li><li>优化查询，where包含分区条件时，可以只扫描几个分区表来提高效率，sum()等聚合函数在分区上处理更高效</li><li>删除无效的数据通过删除相关的分区，效率更高</li><li>分散数据，增加吞吐量</li></ul></li><li><p>分区概述</p><ul><li>分区根据分区键来分区，分区键可以是区间值，特定值，Hash函数等</li><li>同一个表的所有分区必须使用同一个储存引擎，不同表之间可以不同</li><li>分区类型<ul><li>RANGE</li><li>LIST</li><li>HASH</li><li>KEY</li></ul></li><li>5.1版本分区键类型必须是INT(KEY分区时可以使用BLOB、TEXT之外的类型)，5.5后RANGE和LIST支持非整数分区</li><li>如果表有主键或唯一键，其必须包含分区键，即分区表不能用主键\唯一键之外的键作为分区键分区</li></ul></li><li><p>各个分区</p><ul><li><p>RANGE</p><p>常用于分组删除和分组查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>    empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    deptno <span class="token keyword">int</span><span class="token punctuation">,</span>    birthdate <span class="token keyword">date</span><span class="token punctuation">,</span>    salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--分区的最后一个表的范围为maxvalue，因为如果指定3000，当增加数据大于3000时，则报错--></span><span class="token keyword">partition</span> <span class="token keyword">by</span> range<span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">partition</span> p1 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">partition</span> p2 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">partition</span> p3 <span class="token keyword">values</span> less than maxvalue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--在日期或字符串上进行分区，要使用函数转化--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--日期转换函数</span><span class="token keyword">year</span><span class="token punctuation">(</span><span class="token punctuation">)</span>to_days<span class="token punctuation">(</span><span class="token punctuation">)</span>to_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">--></span><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>    empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    deptno <span class="token keyword">int</span><span class="token punctuation">,</span>    birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">partition</span> <span class="token keyword">by</span> range<span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">partition</span> p1 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">1980</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">partition</span> p2 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">partition</span> p3 <span class="token keyword">values</span> less than maxvalue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>LIST</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>    empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    deptno  <span class="token keyword">int</span><span class="token punctuation">,</span>    birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--通过枚举值来分区--></span><span class="token keyword">partition</span> <span class="token keyword">by</span> list<span class="token punctuation">(</span>deptno<span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">partition</span> p1 <span class="token keyword">values</span> <span class="token operator">in</span>  <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">partition</span> p2 <span class="token keyword">values</span> <span class="token operator">in</span>  <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">partition</span> p3 <span class="token keyword">values</span>  <span class="token operator">in</span>  <span class="token punctuation">(</span><span class="token number">30</span>，<span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>HASH</p><ul><li>两种分区：常规取模分区，线性二次幂分区</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">int</span><span class="token punctuation">,</span>birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">partition</span> <span class="token keyword">by</span> <span class="token keyword">hash</span><span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span><span class="token punctuation">)</span>partitions <span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--线性，+linear--></span><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>deptno <span class="token keyword">int</span><span class="token punctuation">,</span>birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">partition</span> <span class="token keyword">by</span> linear <span class="token keyword">hash</span><span class="token punctuation">(</span><span class="token keyword">year</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span><span class="token punctuation">)</span>partitions <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>KEY</p><ul><li>key按照MySQL提供的hash函数分区 </li><li>若不指定，则主键为分区键，若无主键，非空唯一键为分区键</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">(</span>    empno <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token punctuation">,</span>empname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deptno <span class="token keyword">int</span><span class="token punctuation">,</span>birthdate <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>salary <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">partition</span> <span class="token keyword">by</span> <span class="token keyword">key</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span>partitions <span class="token number">4</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>COLUMNS分区</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--</span>整数类型：<span class="token keyword">tinyint</span>、<span class="token keyword">smallint</span>、<span class="token keyword">mediumint</span>、<span class="token keyword">int</span>、<span class="token keyword">bigint</span>日期时间类型：<span class="token keyword">date</span>、<span class="token keyword">datetime</span>字符类型：<span class="token keyword">char</span>、<span class="token keyword">varchar</span>、<span class="token keyword">binary</span>、<span class="token keyword">varbinary</span><span class="token punctuation">,</span>不支持<span class="token keyword">text</span>和<span class="token keyword">blob</span><span class="token comment">--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--多列分区</span>a<span class="token punctuation">,</span>b两个分区键<span class="token comment">--></span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_range_test <span class="token punctuation">(</span>    a <span class="token keyword">INT</span><span class="token punctuation">,</span>    b <span class="token keyword">INT</span> <span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE <span class="token keyword">COLUMNS</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--</span>    less than <span class="token punctuation">(</span>num1<span class="token punctuation">,</span>num2<span class="token punctuation">)</span>    分区条件判断：a值小于num1 <span class="token operator">or</span> a值等于num1<span class="token punctuation">,</span>b值小于num2    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>分在p2  <span class="token number">1</span><span class="token operator">&lt;</span><span class="token number">10</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> <span class="token number">10</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>分在p2  <span class="token number">10</span><span class="token operator">&lt;</span><span class="token number">10</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> <span class="token number">9</span><span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>分在p3 <span class="token number">10</span><span class="token operator">&lt;</span><span class="token number">10</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> <span class="token number">10</span><span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment">--></span>    <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p3 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> p4 <span class="token keyword">VALUES</span> LESS THAN  <span class="token punctuation">(</span>MAXALUE<span class="token punctuation">,</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子分区</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ts <span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">,</span> purchased <span class="token keyword">DATE</span><span class="token punctuation">)</span>    <span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span><span class="token keyword">YEAR</span><span class="token punctuation">(</span>purchased<span class="token punctuation">)</span><span class="token punctuation">)</span>    SUBPARTITION <span class="token keyword">BY</span> <span class="token keyword">HASH</span><span class="token punctuation">(</span>TO_DAYS<span class="token punctuation">(</span>purchased<span class="token punctuation">)</span><span class="token punctuation">)</span>    SUBPARTITIONS <span class="token number">2</span>    <span class="token punctuation">(</span>        <span class="token keyword">PARTITION</span> p0 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">1990</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">PARTITION</span> p1 <span class="token keyword">VALUES</span> LESS THAN <span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">PARTITION</span> p2 <span class="token keyword">VALUES</span> LESS THAN MAXVALUE    <span class="token punctuation">)</span>； <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--</span> 表ts 有<span class="token number">3</span>个RANGE分区。这<span class="token number">3</span>个分区中的每一个分区p0<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> 和 p2<span class="token punctuation">,</span>又被进一步分成了<span class="token number">2</span>个子分区。 P0分为两个子区，两个子区值均小于<span class="token number">1990</span> p1分为两个子区，值均小于<span class="token number">2000</span> p3分为两个子区，小于maxvalue <span class="token comment">--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>null值得处理</p><ul><li>RANGE: 当做最小值处理</li><li>LIST：Null值必须在枚举中写出，否则不接受</li><li>HASH\KEY: 当做零值处理</li></ul></li><li><p>分区管理</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--删除分区</span>删除 RANGE和LIST分区<span class="token punctuation">,</span>删除分区之后，连同分区中的数据一同删除RANGE分区删除之后，增加数据后会分配到其他分区LIST分区删除之后，不能再添加已删除的分区键的数据<span class="token comment">--></span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">drop</span> <span class="token keyword">partition</span> p_numeg：<span class="token keyword">alter</span> <span class="token keyword">table</span> ts <span class="token keyword">drop</span> <span class="token keyword">partition</span> p1<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--增加分区</span>RANGE：只能在最大端加<span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">add</span> <span class="token keyword">partition</span><span class="token punctuation">(</span><span class="token keyword">partition</span> p5 <span class="token keyword">values</span> less than <span class="token punctuation">(</span>maxvalues<span class="token punctuation">)</span><span class="token punctuation">)</span> LIST<span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">add</span> <span class="token keyword">partition</span>（<span class="token keyword">partition</span> p5 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span>）<span class="token comment">--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--重新定义分区:保存原数据的情况下，同时改变结构</span>重新定义只能定义相邻的分区，不能跨分区，同时重新定义的范围必须原分区覆盖相同的范围，也不能改变分区表的类型<span class="token comment">--></span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name reorganize <span class="token keyword">partition</span> <span class="token keyword">into</span> xxxRANGE:将p3<span class="token punctuation">(</span><span class="token number">2005</span><span class="token operator">-</span><span class="token number">2015</span><span class="token punctuation">)</span>分为p2<span class="token punctuation">(</span><span class="token number">2005</span><span class="token operator">-</span><span class="token number">2010</span><span class="token punctuation">)</span>p3<span class="token punctuation">(</span><span class="token number">2010</span><span class="token operator">-</span><span class="token number">2015</span><span class="token punctuation">)</span><span class="token keyword">alter</span> <span class="token keyword">table</span> ts reorganize <span class="token keyword">partition</span> p3 <span class="token keyword">into</span> <span class="token punctuation">(</span>        <span class="token keyword">partition</span> p2 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">2010</span><span class="token punctuation">)</span>        <span class="token keyword">partition</span> p3 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    将p2<span class="token punctuation">(</span><span class="token number">2005</span><span class="token operator">-</span><span class="token number">2010</span><span class="token punctuation">)</span>p3<span class="token punctuation">(</span><span class="token number">2010</span><span class="token operator">-</span><span class="token number">2015</span><span class="token punctuation">)</span>合并为一个P3<span class="token punctuation">(</span><span class="token number">2005</span><span class="token operator">-</span><span class="token number">1015</span><span class="token punctuation">)</span>    <span class="token keyword">alter</span> <span class="token keyword">table</span> ts reorganize <span class="token keyword">partition</span> p2<span class="token punctuation">,</span>p3 <span class="token keyword">into</span> <span class="token punctuation">(</span>        <span class="token keyword">partition</span> p3 <span class="token keyword">values</span> less than <span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>        LIST:    现有 p4 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    p5 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    将p4 变为 p4 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">alter</span> <span class="token keyword">table</span> ts <span class="token keyword">add</span> <span class="token keyword">partition</span> p6<span class="token punctuation">(</span><span class="token keyword">partition</span> <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">alter</span> <span class="token keyword">table</span> ts reorganize <span class="token keyword">partition</span> p4<span class="token punctuation">,</span>p5<span class="token punctuation">,</span>p6 <span class="token keyword">into</span> <span class="token punctuation">(</span>            <span class="token keyword">partition</span> p4 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>            <span class="token keyword">partition</span> p5 <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--HASH和KEY分区管理--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--不能通过删除来减少分区，只能通过合并来减少--></span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">coalesce</span> <span class="token keyword">partition</span> <span class="token number">2</span>；<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--分区将合成为2个--></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--增加分区--></span><span class="token keyword">alter</span> <span class="token keyword">table</span> table_name <span class="token keyword">add</span> <span class="token keyword">partition</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--原来只有两个分区，增加2个，现在是四个--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="三、存储过程和函数"><a href="#三、存储过程和函数" class="headerlink" title="三、存储过程和函数"></a>三、存储过程和函数</h2><ol><li><p>概念</p><p>存储过程和函数是预先编译并存储在数据库中的一段SQL的集合，区别在于函数必须有返回值，存储过程的参数可以是IN,OUT,INOUT而函数只能是IN。</p></li><li><p>相关命令操作</p><ul><li><p>储存过程的创建<br>CREATE PROCEDURE 创建的存储过程名字(OUT|IN|INOUT 参数名 数据类型,…,…) 特征 过程体;</p><img src="/2021/07/05/mysql1/image-20211008004247560.png" class="" title="image-20211008004247560"><ul><li>特征值：<ul><li>LANGUAGE SQL：表明过程体使用SQL语言</li><li>[NOT] DETERMINISTIC : 每次输入一样，输出也一样的程序</li><li>{CONTAINS SQL|NO SQL|READS SQL DATA|MODIFIES DATA}<ul><li>CONTAINS SQL:子程序不包括读出后写的语句，默认值</li><li>NO SQL:自程序不包括SQL语句。</li><li>READS SQL DATA:包含读语句，不包含写</li><li>MPDIFIES DATA:包含写语句，不包括读语句</li></ul></li><li>SQL SECURITY {DEFINER|INVOKER}<ul><li>DEFINER 创建者许可执行</li><li>INVOKER 调用者许可执行</li></ul></li><li>COMMENT：注释信息</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $$<span class="token keyword">create</span> <span class="token keyword">procedure</span> GetScores<span class="token punctuation">(</span><span class="token keyword">out</span> minScore <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">out</span> avgScore <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">out</span> maxScore <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">into</span> minScore <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">into</span> avgScore <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">into</span> maxScore <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>函数的创建</p><p>CREATE FUNCTION 创建的存储函数名字(参数名称 参数类型,…,…)  RETURNS 返回值得类型  函数体;</p><img src="/2021/07/05/mysql1/image-20211008140250954.png" class="" title="image-20211008140250954"><pre class="line-numbers language-none"><code class="language-none">DELIMITER $$CREATE FUNCTION func_employee_sal (empno INT(11))   &#x2F;&#x2F;传入值    RETURNS DOUBLE(10,2)     &#x2F;&#x2F;返回值COMMENT&#39;查询某个雇员的工资&#39;BEGIN    RETURN (SELECT sal        FROM t_employee        WHERE t_employee.empno&#x3D;empno);END$$DELIMITER ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">procedure</span><span class="token operator">|</span><span class="token keyword">function</span> sp_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">procedure</span><span class="token operator">|</span><span class="token keyword">function</span> <span class="token keyword">status</span> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span><span class="token operator">|</span><span class="token keyword">function</span> sp_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>变量的使用   </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DECLARE</span> var_name<span class="token punctuation">[</span><span class="token punctuation">,</span>…<span class="token punctuation">]</span> <span class="token keyword">type</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> <span class="token keyword">value</span><span class="token punctuation">]</span><span class="token keyword">SET</span> var_name<span class="token operator">=</span>expr<span class="token punctuation">[</span><span class="token punctuation">,</span>…<span class="token punctuation">]</span><span class="token keyword">declare</span> prodDiscRate <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">set</span> prodDiscRate <span class="token operator">=</span> <span class="token number">0.88</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>条件定义和处理</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">---条件创建--></span> <span class="token keyword">DECLARE</span> condition_name CONDITION <span class="token keyword">FOR</span> <span class="token punctuation">[</span>condition_type<span class="token punctuation">]</span>SQLSTATE <span class="token punctuation">[</span><span class="token keyword">VALUE</span><span class="token punctuation">]</span> sqlstate_value <span class="token operator">|</span> mysql_erroe_code condition_type：条件类型，用于定义MySQL的错误，SQLSTATE是长度为<span class="token number">5</span>的字符串类型的错误代码； mysql_error_code是数值类型的错误代码。 例如ERROR <span class="token number">1142</span>（<span class="token number">42000</span>），sql_state_value的值是<span class="token string">'42000'</span>，mysql_error_code的值是<span class="token number">1142</span>。  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token comment">--条件处理--></span> <span class="token keyword">DECLARE</span> handler_type <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span>  condition_value<span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> sp_statement（<span class="token number">1</span>）handler_type：指定错误处理方式    <span class="token keyword">CONTINUE</span>：遇到错误不处理，继续执行    <span class="token keyword">EXIT</span>：遇到错误立即退出    UNDO：遇到错误撤回之前的操作（<span class="token number">2</span>）condition_value：表示错误类型    SQLSTATE <span class="token punctuation">[</span><span class="token keyword">VALUE</span><span class="token punctuation">]</span> sqlstate_value：包含<span class="token number">5</span>个字符的字符串错误值    mysql_error_code：数值类型的错误代码    cond_name：定义条件的名称    SQLWARNING：匹配所有以<span class="token number">01</span>开头的SQLSTATE错误代码    <span class="token operator">NOT</span> FOUND：匹配所有以<span class="token number">02</span>开头的SQLSTATE错误代码    <span class="token keyword">SQL</span> EXCEPTION：匹配所有没有被SQLWARNING或<span class="token operator">NOT</span> FOUND捕获的SQLSTATE错误代码（<span class="token number">3</span>）sp_statement    程序语句段，表示在遇到定义的错误时执行的存储过程或函数。     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h2 id="四、触发器"><a href="#四、触发器" class="headerlink" title="四、触发器"></a>四、触发器</h2><ol><li></li><li><p>ss</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> 创建的触发器名字 BEFFOR<span class="token operator">|</span><span class="token keyword">AFTER</span>  <span class="token keyword">INSERT</span><span class="token operator">|</span><span class="token keyword">UPDATE</span><span class="token operator">|</span><span class="token keyword">DELETE</span><span class="token keyword">ON</span> 表名字 <span class="token keyword">FOR</span>  触发器的执行间隔   触发器的<span class="token keyword">SQL</span>语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2021/07/05/mysql1/image-20211008140419066.png" class="" title="image-20211008140419066"><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> t1 <span class="token keyword">after</span><span class="token keyword">insert</span><span class="token keyword">on</span> ord<span class="token keyword">for each row</span><span class="token keyword">begin</span><span class="token keyword">update</span> goods <span class="token keyword">set</span> num<span class="token operator">=</span>num<span class="token operator">-</span><span class="token number">2</span> <span class="token keyword">where</span> gid <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>查看已有触发器：<span class="token keyword">show</span> triggers    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>删除已有触发器：<span class="token keyword">drop</span> <span class="token keyword">trigger</span> triggerName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>触发器中引用行变量</p><p>（1）在触发目标上执行insert操作后会有一个新行，如果在触发事件中需要用到这个新行的变量，可以用new关键字表示<br>（2）在触发目标上执行delete操作后会有一个旧行，如果在触发事件中需要用到这个旧行的变量，可以用old关键字表示<br>（3）在触发目标上执行update操作后原纪录是旧行，新记录是新行，可以使用new和old关键字来分别操作</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-collection</title>
      <link href="/2021/06/26/collection/"/>
      <url>/2021/06/26/collection/</url>
      
        <content type="html"><![CDATA[<h2 id="一、继承结构图"><a href="#一、继承结构图" class="headerlink" title="一、继承结构图"></a>一、继承结构图</h2><img src="/2021/06/26/collection/collection%E7%BB%A7%E6%89%BF.png" class=""><img src="/2021/06/26/collection/Map%E7%BB%A7%E6%89%BF%E5%9B%BE.png" class="">]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-线程</title>
      <link href="/2021/06/23/java3/"/>
      <url>/2021/06/23/java3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><p>基础知识</p><p>&lt;1线程的特性</p><p>原子性:所有操作要不全部成功要不全部失败</p><p>可见性：在一个线程上对变量的修改，立即能在另一个线程上可见</p><p>有序行：每个线程的代码都是按顺序执行的</p><p>&lt;2并行，并发，串行</p><p>并行：多个CPU处理多个任务，真正意义上的同时进行</p><p>并发：多个任务在同一CPU上按时间片交替一次进行，逻辑上是同时进行</p><p>串行：多个任务在CPU上按照顺序一次执行</p><p>&lt;3线程优点：提高CPU利用率，提高效率  缺点：安全问题</p><p>&lt;4线程和进程</p><p>进程是系统资源分配的单位，而线程是任务调度器的单位</p><p>一个进程至少包含一个线程，也可包含多个进程</p><p>多个进程之间的资源分配互不影响，同一进程的多个线程之间相互影响</p><p>&lt;5上下文切换</p><p>一个进程在CPU上时间片用完进入就绪状态，由另一个线程执行，是一次上下文切换 </p><p>1.线程对象的状态</p><p>​    新建状态 线程还没开始运行</p><p>​    就绪状态 争夺时间片的状态</p><p>​    运行状态 线程运行</p><p>​    阻塞状态/等待状态 线程暂时停止运行，直到线程重新被激活。</p><p>​    死亡状态 run结束，正常终止。或者出现异常，意外死亡。</p><img src="/2021/06/23/java3/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.png" class=""><img src="/2021/06/23/java3/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%812.png" class=""><p>2.实现线程的方法 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//第一种 编写一个类继承Thread，重写run方法</span>    <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token class-name">MyThread</span> mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建一个线程类</span>mt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 开辟一块新的栈空间，并且调用run方法,此时两个栈同时进行，即两个循环同时进行</span><span class="token comment">//第二种 编写一个类实现Runnable接口,可以用匿名内部类的方法实现</span>    <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token class-name">Thread</span> tr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tr<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内部类实现</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第三种 实现Callable接口获得一个FutureTask重写call方法，作为参数传入线程，这种方法可以返回值</span>    <span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//匿名内部类</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Thread</span> th <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futuretask<span class="token punctuation">)</span><span class="token punctuation">;</span>th<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 调用get方法会得到子线程的返回值，不过这会造成主线程阻塞，必须等到子线程结束得到返回值，主线程才会继续。<span class="token comment">//run() 和 start()</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法代表开启线程，新建一个线程，线程进入新建状态，调用<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，线程进入就绪状态，当分到时间片后，自动调用<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法执行。单独执行<span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，相当于将线程当做一个main方法，在此run方法结束之前，其他线程不会执行。start方法执行一次，就可启动线程<span class="token class-name">Runnable</span>与<span class="token class-name">Callable</span><span class="token class-name">Runnable</span> 接口 run 方法无返回值；<span class="token class-name">Callable</span> 接口 call 方法有返回值，是个泛型，和<span class="token class-name">Future</span>、<span class="token class-name">FutureTask</span>配合可以用来获取异步执行的结果<span class="token class-name">Runnable</span> 接口 run 方法只能抛出运行时异常，且无法捕获处理；<span class="token class-name">Callable</span> 接口 call 方法允许抛出异常，可以获 取异常信息 注：<span class="token class-name">Callalbe</span>接口支持返回执行结果，需要调用<span class="token class-name">FutureTask</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>得到，此方法会阻塞主进程的继续往下执行，如果不调用不会阻塞。<span class="token class-name">Future</span> 和 <span class="token class-name">Futuretask</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.线程的方法</p><p>获得当前线程static Thread currentThread() ，在main方法中使用该方法，返回main方法的线程，在其他run方法中使用，返回其他线程</p><p>获得线程名字   String getName()  线程对象.getName()</p><p>修改线程名字   void setName(String name)</p><p>  当前线程进入休眠状态</p><p>​      static void sleep(long millis)  //静态方法，出现在哪个线程里，哪个线程睡眠，进入阻塞状态</p><p>sleep()与wait()方法</p><p>sleep是Thread的静态方法，wait是Object的方法</p><p>sleep不会释放锁，而wait会释放锁</p><p>sleep多用于暂停线程，而wait用于通信交流</p><p>sleep在时间到会自动苏醒，wait需要notify唤醒</p><p> 获得线程的状态</p><p>NEW,RUNNABLE,BLOCKED,WAITONG,TIMED_WAITING,TERMINATED之一</p><p>中断线程</p><p>void interrupt()  // 请求中断线程</p><p>&lt;1调用此方法之后，将会设置该线程的中断状态位，即设置为true，中断的结果线程是死亡、等待新的任务或是继续运行，线程可以自主选择在合适的时候处理该中断请求，也可以不理会该请求，就像这个线程没有被中断一样。线程会不时地检测这个中断标示位，以判断线程是否应该被中断（中断标示值是否为true）。它并不像stop方法那样会中断一个正在运行的线程。</p><p>&lt;2 当线程处于阻塞状态时，调用此方法之后，会抛出InterruptedException</p><pre><code>  boolean isInterrupted()  检测线程是否为中断状态</code></pre><p>static boolean interrupted()  判断当前线程是否被中断，断返回true，并且清除中断状态</p><p>​     终止线程的方法</p><p>​      void stop() 已过时，不建议使用</p><p>设置标记：给线程类添加一个标识符，通过修改这个标识符，来控制是否终止</p><p>boolean run = true;  //当需要关闭时，将run改为false</p><p>  @Override</p><p>  public void run() {</p><p>​      for(int i=0;i&lt;100;i++){</p><p>​        if(run) {</p><p>​          try {</p><p>​            Thread.sleep(1000);</p><p>​          } catch (InterruptedException e) {</p><p>​            e.printStackTrace();</p><p>​          }</p><p>​          System.out.println(i);</p><p>​        }else{</p><p>​          return;</p><p>​        }</p><p>​      }</p><p>  }</p><p>Interrupt：&lt;1 类似设置标记，interrupt本身就是一个标记</p><p>&lt;2 根据阻塞状态调用会抛出异常的原理，终止</p><p>wait(), notify(), notifyAll() </p><p>这三个都是Object的方法，由对象调用，在Object中的方法，使得所有类都可成为锁</p><p>当某同步块以某对象为锁，当此对象调用wait方法时，该同步块即刻释放锁</p><p>当某对象调用notify方法时，会使在等待此对象锁的线程进入就绪状态，但占用此锁的线程不会释放锁</p><p>4.线程的调度</p><p>常见的线程调度模型</p><p>​        抢占式调度模型：线程的优先级比较高，抢到的CPU时间片的概率就高一些/多一些。</p><p>​        均分式调度模型：平均分配CPU时间片。每个线程占有的CPU时间片时间长度一样。</p><p>线程有优先级 （最低优先级1；默认优先级是5；最高优先级10）</p><p>线程优先级决定线程抢占cpu时间片的概率，优先级越高，概率越高</p><p>int getPriority()  获得线程优先级</p><p>void setPriority(int newPriority)  改变线程优先级</p><p>线程让位:当前正在执行的线程暂停一次(礼让)，允许其他线程执行，不阻塞，线程进入就绪状态，如果没有其他等待执行的线程，这个时候当前线程就会马上恢复执行</p><p>static void yield()  静态方法 暂停线程，使线程回到就绪状态</p><p>线程合并:调用该方法的线程强制执行完成，其它线程处于阻塞状态，该线程执行完毕，其它线程再执行</p><p>void join()  线程对象在其他线程中调用，其他线程进入阻塞状态，执行该线程对象到结束，接着执行其他线程</p><pre><code>   线程合并并不是两个栈合并到一个栈中，而是两个栈发生等待关系，调用了join()的栈会先执行，其他栈会等待</code></pre><p>5.线程安全</p><p>编程模型</p><p>异步编程模型：各自执行各自的，多线程并发</p><p>​        同步编程模型：两个线程之间发生了等待关系，必须其中一个执行完毕另一个才可以执行，这就是同步编程模型。</p><p>​        </p><p>多线程不安全：    </p><p>​    多线程并发</p><p>​    有共享数据</p><p>​    要修改数据    </p><p>  如何解决：</p><p>​    线程同步机制(线程排队)</p><p>保证原子性  锁和同步</p><p>synchronized(){}</p><p>​    在括号中填的是，共享对象，当线程运行到此处会判断自己是否共享此对象，如果共享且其他线程占用对象锁，需要排队，如果没有则占用对象锁，开始运行</p><p>​    每一个对象都有一个对象锁，一把锁只能一个人来开</p><p>synchronized的三种写法</p><p>​    1.synchronized(){}  同步代码块</p><p>​    2.synchronized 关键字写在实例方法中，那么共享对象自动是this 同步方法</p><p>同步方法与同步块哪个更好？</p><p>同步范围越小越好，同步块范围较小，所以同步块更好</p><p>​    3.在静态方法上使用，那么就会找类锁来执行。对象锁是一个对象一把，类锁只有一把</p><pre class="line-numbers language-none"><code class="language-none">死锁情况        出现synchronized()&#123;&#125; 嵌套        如下面例子            public void doSome()&#123;             调用此方法首先锁住 对象Obj1 再锁住obj2 然后执行下面代码，之后结束                synchronized(obj1)&#123;                    try &#123;                        Thread.sleep(1000);                    &#125; catch (InterruptedException e) &#123;                        e.printStackTrace();                    &#125;                    synchronized(obj2)&#123;                        System.out.println(&quot;doSome begin&quot;);                    &#125;                &#125;             &#125;            public void others()&#123;                synchronized (obj2)&#123;          调用此方法首先锁住 对象Obj2 再锁住obj1 然后执行下面代码，之后结束                   synchronized (obj1)&#123;                        System.out.println(&quot;others begin&quot;);                   &#125;                &#125;            &#125;            当两个线程同时执行doSome和others 两个方法 doSome 方法已经锁住 Object1，线程休息了1秒，此时另一个线程执行了others方法，            锁住了obj2，接下来 doSome 需要锁 obj2 而此时 obj2 已经在另一个线程被锁住，doSome 只有等 另一个线程中的others 执行完，            释放obj2锁，而others 要执行完才可以释放obj2锁，那么others要执行完，必须锁住obj1，此时obj1锁在doSome，所以造成了死锁            *****重要的是 死锁不会报错            所以  尽量避免 synchronized 嵌套<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、如果使用局部变量的话：</p><p>​    建议使用：StringBuilder。</p><p>​    因为局部变量不存在线程安全问题。选择StringBuilder。</p><p>​    StringBuffer效率比较低。</p><p>​    ArrayList是非线程安全的。</p><p>​    Vector是线程安全的。</p><p>​    HashMap HashSet是非线程安全的。</p><p>​    Hashtable是线程安全的。</p><p>6.守护线程</p><p>.1、守护线程</p><p>​        java语言中线程分为两大类：</p><p>​            一类是：用户线程 主线程main方法是一个用户线程。</p><p>​            一类是：守护线程（后台线程）其中具有代表性的就是：垃圾回收线程（守护线程）。</p><p>​        守护线程的特点：</p><p>​            一般守护线程是一个死循环，所有的用户线程只要结束，守护线程自动结束。</p><p>​        守护线程用在什么地方呢？</p><p>​            每天00:00的时候系统数据自动备份。需要使用到定时器，并且我们可以将定时器设置为守护线程。</p><p>​    1.2、定时器</p><p>​        定时器的作用：</p><p>​            间隔特定的时间，执行特定的程序。</p><p>​            eg:每周要进行银行账户的总账操作。每天要进行数据的备份操作。</p><p>​        java中其实可以采用多种方式实现：</p><p>可以使用sleep方法，睡眠，设置睡眠时间，每到时间点醒来，执行任务。这种方式是最原始的定时器。</p><p>​            在java的类库中已经写好了一个定时器：java.util.Timer，可以直接拿来用。</p><p>​            不过，这种方式在目前的开发中也很少用，因为现在有很多高级框架都是支持定时任务的。</p><p>在实际的开发中，目前使用较多的是Spring框架中提供的SpringTask框架，这个框架只要进行简单的配置，就可以完成定时器的任务。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">7</span>、生产者和消费者模式    生产线程负责生产，消费线程负责销售，两个线程要达到平衡；通过 wait 和 notify 方法 是<span class="token class-name">Object</span> 的方法；要实现 线程同步    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  使正在某对象上活跃的线程进入等待，并释放掉对象锁    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 使等待某状态的线程重新进入就绪状态，但 不会释放被占用的对象锁；<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WaitAndNotify</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> th1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">MT01</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> th2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">MT02</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> MT01 <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MT01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">MT01</span><span class="token punctuation">(</span><span class="token class-name">List</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"生产了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> MT02 <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MT02</span><span class="token punctuation">(</span><span class="token class-name">List</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">MT02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"消费了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-异常</title>
      <link href="/2021/06/22/java2/"/>
      <url>/2021/06/22/java2/</url>
      
        <content type="html"><![CDATA[<h2 id="1、异常的分类"><a href="#1、异常的分类" class="headerlink" title="1、异常的分类"></a>1、异常的分类</h2><img src="/2021/06/22/java2/%E5%BC%82%E5%B8%B8.png" class=""><p>异常可分为可查异常和不可查异常，其中Error和Exception中的 RuntimeException(运行时异常) 是不可查异常；</p><p>Exception的直接子类(除运行时异常)是可查异常，即编译时异常。</p><p>Error通常为JVM异常，多为内部错误和资源耗尽错误。如内存不足，堆栈溢出。</p><p>RuntimeException是程序错误导致的异常</p><p>Exception通常是应用程序本身的问题，可以通过try catch 捕获处理</p><p>编译时异常和运行时异常，都是发生在运 行阶段。编译阶段异常是不会发生的。编译时异常一般发生的概率比较高。运行时异常一般发生的概率比较低。</p><p>编译时异常又称 受检异常(CheckedException),受控异常</p><p>运行时异常又称 未受检异常(UnCheckedException),非受控异常</p><h2 id="2、异常的处理方式"><a href="#2、异常的处理方式" class="headerlink" title="2、异常的处理方式"></a>2、异常的处理方式</h2><p>&lt;1 抛出</p><p>​    ①throws  用来声明一个方法可能产生的所有异常，不做任何处理而是将异常往上传，谁调用就抛给谁。</p><p>​          向调用者抛出异常，调用者必须要处理；当异常抛向main方法必须处理，否则main抛给JVM，程序不能执行。</p><p>​    ②throw  用来抛出一个具体的异常类型。用在方法体内，跟一个异常对象名， 表示抛出异常 ，由方法体内的语句处理，</p><pre><code>     执行throw则一定抛出了某种异常  </code></pre><p>throws 和 thow 的区别</p><p>throws出现在方法函数头；而throw出现在函数体。</p><p>throws表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某种异常。</p><p>&lt;2 捕获</p><p>​    try{   ①将要执行的语句放在try中，catch( )中填要捕获的异常引用，{ }中写捕获异常之后的操作</p><p>​    ……   ②当try语句块中任何代码抛出了异常，则程序将跳过try语句块，执行catch语句的异常处理代码，</p><p>}    之后执行try，catch语句块后代码       </p><p>catch( ){ ③try可以接多个catch，异常由小向大自上而下排列</p><p>……   </p><p>}     </p><h2 id="3、创建一个异常类"><a href="#3、创建一个异常类" class="headerlink" title="3、创建一个异常类"></a>3、创建一个异常类</h2><p>①创建一个类继承Exception ②写出无参和有参构造</p><h2 id="4、异常类的常用方法"><a href="#4、异常类的常用方法" class="headerlink" title="4、异常类的常用方法"></a>4、异常类的常用方法</h2><p>①getMessage() 获得异常类对象的详细描述信息</p><p>②getMessage() 获得堆栈轨迹</p><h2 id="5、finally语句块"><a href="#5、finally语句块" class="headerlink" title="5、finally语句块"></a>5、finally语句块</h2><p>①finally语句块 ：放在finally语句块中的语句是必须执行的，即使有异常也会执行</p><p>②finally语句块必须跟try，可以不跟catch</p><p>③return问题，当try中有return语句，finally在return前执行，如果try和catch中都有return，那么finally中的return结 果将覆盖try中return结果</p><p>public static int getInt() {</p><p> int a = 10; try { a = 20;} catch (ArithmeticException e) {a = 30;return a;} finally { a = 40; return a;}</p><p>执行结果 ： 30</p><p>public static int getInt() {</p><p> int a = 10;try {a = 20; } catch (ArithmeticException e) { a = 30; return a; } finally { a = 40; return a;}</p><p>执行结果：40</p><p>带资源的try语句（主要用于资源的关闭，可以简化在关闭资源时，代码的冗余）</p><p>问题：当在finally语句块中关闭多个资源时，都要捕获异常，造成代码的冗余</p><p>try(资源){ } 执行此代码块后，资源将自动关闭；其中资源可以填多个，用封号隔开，结束之后都会自动关闭</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java(二)</title>
      <link href="/2021/06/20/java1/"/>
      <url>/2021/06/20/java1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、面向对象"><a href="#一、面向对象" class="headerlink" title="一、面向对象"></a>一、面向对象</h2><h3 id="1、面向对象和面向过程"><a href="#1、面向对象和面向过程" class="headerlink" title="1、面向对象和面向过程"></a>1、面向对象和面向过程</h3><h4 id="1-1-面向过程和面向对象有什么区别？"><a href="#1-1-面向过程和面向对象有什么区别？" class="headerlink" title="1.1.面向过程和面向对象有什么区别？"></a>1.1.面向过程和面向对象有什么区别？</h4><p>从语言方面出发：</p><ul><li>对于C语言来说，是完全面向过程的。</li><li>对于C++语言来说，是一半面向过程，一半是面向对象。（C++是半面向对象的）</li><li>对于Java语言来说，是完全面向对象的。</li></ul><p>面向过程的开发方式：</p><p>注重步骤，注重的是实现这个功能的步骤。面向过程中没有对象的概念。只是实现这个功能的步骤以及因果关系。面向过程缺点是耦合度高，扩展力差。面向过程优点是快速开发，性能好。</p><p>面向对象的开发方式：</p><p>采用面向对象的方式进行开发，更符合人类的思维方式。（面向对象成为主流的原因）人类就是以“对象”的方式去认识世界的。所以面向对象更容易让我们接受。</p><p>​    采用面向对象的方式进行开发：耦合度低，扩展力强。但相对面向过程，性能较差</p><p>​    面向过程主要关注的是：实现步骤以及整个过程。</p><p>​    面向对象主要关注的是：对象A，对象B，对象C，然后对象ABC组合，或者CBA组合…..</p><h3 id="2、类和对象"><a href="#2、类和对象" class="headerlink" title="2、类和对象"></a>2、类和对象</h3><h4 id="2-1-类"><a href="#2-1-类" class="headerlink" title="2.1.类"></a>2.1.类</h4><p>类是一个抽象的概念。是一个模板。是进行“思考、总结、抽象”的一个结果。类本质上是现实世界当中某些事物具有共同特征，将这些共同特征提取出来形成的概念就是一个“类”，“类”就是一个模板。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">语法格式<span class="token operator">:</span><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> <span class="token keyword">class</span> 类名 <span class="token punctuation">&#123;</span>  （修饰符列表可以省略。）           <span class="token comment">//类体 = 属性 + 方法(属性在代码上以“变量”的形式存在（描述状态）；方法描述动作/行为)</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-1-1类-属性-代表对象的状态"><a href="#2-1-1类-属性-代表对象的状态" class="headerlink" title="2.1.1类.属性 代表对象的状态"></a>2.1.1类.属性 代表对象的状态</h5><ul><li><p>①属性是以变量的形式存在，属性就是变量。</p></li><li><p>②属性的分类：静态域(静态全局变量)和实例域(动态实例变量）</p></li><li><p>③域通常要用private修饰 ; 常量  public static final </p></li><li><p>④域的初始化</p><ul><li>构造方法初始化; （数值为0  布尔类型为false  引用为null）</li><li>在声明时初始化;</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//初始化块：只要构造对象就会初始化（静态初始化块，对象初始化块）</span><span class="token comment">//static静态代码块</span><span class="token keyword">static</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//非静态代码块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>局部变量和成员变量区别</p><ul><li>声明位置</li><li>存储位置</li><li>初始值</li><li>声明周期</li><li>作用域</li></ul></li><li><p>静态变量与实例变量</p><ul><li>存储位置和存储次数，静态变量存储在静态区，只在类加载时分配一次内存，</li><li>实例变量在堆中，创建对象时就会分配内存</li><li>作用域 静态变量在所有对象中均相等，实例变量不同对象有自己的值</li></ul></li><li><p> final</p></li></ul><p>  ​    final修饰类   类不能被继承</p><p>  ​    final修饰方法  父类的方法不能被子类重写</p><p>  ​    final修饰变量  变量只能赋值一次，赋值后不能改变</p><h5 id="2-1-2类-方法-可以执行的动作"><a href="#2-1-2类-方法-可以执行的动作" class="headerlink" title="2.1.2类.方法 可以执行的动作"></a>2.1.2类.方法 可以执行的动作</h5><ul><li><p>①方法概念：方法是一段可以完成某个特定功能的并且可以被重复利用的代码片段。方法的出现，让代码具有了很强的复用性</p></li><li><p>②方法定义</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> 返回值类型 方法名<span class="token punctuation">(</span>形式参数列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>方法体<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">/*修饰符列表:  访问权限  同类  同包  不同包,子类  不同包,非子类  public    ∨    ∨     ∨           ∨  protect   ∨    ∨     ∨           ×  default   ∨    ∨     ×            ×  private   ∨    ×      ×            × 关于返回值：第一：返回值一般指的是一个方法执行结束之后的结果(一般都为数据)。数据得有类型。这就是返回值类型。第二：返回值类型可以是任何类型，java中合法的数据类型都可，数据类型包括基本数据类型和引用数据类型。第三：当一个方法执行结束不返回任何值的时候，返回值类型也不能空白，必须写上void关键字。如果返回值类型是void，在方法体当中          不能有“return + 值;”语句。但可有“return;”语句。语句“return;”是用来终止当前方法的。第四：返回值类型“不是void”，在方法体执行结束的时候必须使用"return 值;"没有“return 值;” 第五：只要有“return”关键字的语句执行，当前方法必然结束。return只要执行，当前所在的方法结束。       形参列表(简称：形参)形式参数列表中的每一个参数都是“局部变量”，方法结束之后内存释放。形参和实参：调用方法传入的是实参，传入方法中变为形参，方法中使用的是形参    显式参数，就是平时见到的在方法名括号中间的参数，就是所谓能看得见的参数。    隐式参数，是在类的方法中调用了类的实例域。这个被调用的实例域就是隐式参数。方法体由Java语句构成。java语句以“;”结尾。方法体当中编写的是业务逻辑代码，完成某个特定功能。在方法体中的代码遵循自上而下的顺序依次逐行执行。在方法体中处理业务逻辑代码的时候需要数据，数据来源就是这些形参。*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 按值调用和按引用调用</p><pre><code>  方法可以改变传递引用所对应的变量值；不能修改传递值对应的变量值。java中采用按值调用。</code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tripleValue</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/2021/06/20/java1/%E5%80%BC%E4%BC%A0%E9%80%92.png" class=""><pre class="line-numbers language-none"><code class="language-none">public class Employee&#123;    public int salary;&#125;public static void tripleValue(Employee e)&#123;    e.salary &#x3D; e.salary * 3;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/06/20/java1/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92.png" class=""></li><li><p>③方法的分类</p><ul><li>static修饰的方法是静态方法，通过类名来调用，也可用引用来调用，但一般不用。静态方法中无法使用实例变量</li><li> 实例方法：通过引用来调用</li><li>构造方法(分为无参构造和有参构造)</li><li>无参构造  (缺省构造器)：当一个类中没有提供任何构造方法，系统默认提供一个无参数的构造方法。</li><li>当一个类中提供了构造方法，系统将不再默认提供无参数构造方法。建议提供无参构造   </li></ul></li><li><p> ④方法重载overload 构成方法重载的条件：</p></li></ul><p>  条件1：在同一个类当中；条件2：方法名相同；条件3：形式参数列表不同（类型、个数、顺序）</p><p>  方法名和形参列表组成方法签名； 方法重载和返回值类型无关，和修饰符列表无关。</p><ul><li><p>⑤this关键字</p><p>this是一个关键字，是一个引用，保存内存地址指向自身。</p><p>this可以使用在实例方法中，也可以使用在构造方法中。this出现在实例方法中其实代表的是当前对象。</p><p>this.大部分情况下可以省略，但是用来区分局部变量和实例变量的时候不能省略。</p><p>this()这种语法只能出现在构造方法第一行，表示当前构造方法调用本类其他的构造方法，目的是代码复用。</p></li><li><p>静态方法和实例方法</p><p>静态方法内只可访问静态变量和方法，实例方法无此限制</p></li></ul><h5 id="2-1-3类与类的关系"><a href="#2-1-3类与类的关系" class="headerlink" title="2.1.3类与类的关系"></a>2.1.3类与类的关系</h5><p>​    uses-a  依赖，通过一个类的方法可以访问另一个类</p><p>​    has-a   聚合，类A包含类B</p><p>​    is-a    继承，is a 是单向的</p><p>​    like a   接口</p><h4 id="2-2-对象"><a href="#2-2-对象" class="headerlink" title="2.2.对象"></a>2.2.对象</h4><p>&lt;1对象的定义：对象就是通过类创建出的个体。对象是实际存在的个体。（真实存在的个体）</p><p>&lt;2对象的创建：在java语言中，要想得到“对象”，必须先定义“类”，“对象”是通过“类”这个模板创造出来的。</p><h4 id="2-3-包"><a href="#2-3-包" class="headerlink" title="2.3.包"></a>2.3.包</h4><h5 id="2-3-1-import"><a href="#2-3-1-import" class="headerlink" title="2.3.1.import"></a>2.3.1.import</h5><ul><li>导入类：import  java.util.Date</li><li>导入包：import  java.util.*</li><li>导入静态方法：import static java.lang.System</li><li>导入静态域：import static java.lang.System.out</li><li>import 放在源文件开头(但在package后面)</li></ul><h5 id="2-3-2-package"><a href="#2-3-2-package" class="headerlink" title="2.3.2.package"></a>2.3.2.package</h5><ul><li>package com.xxx.xx 将一个类放进包中</li><li>package放在源文件的开头</li></ul><h3 id="3、面向对象包括三大特征"><a href="#3、面向对象包括三大特征" class="headerlink" title="3、面向对象包括三大特征"></a>3、面向对象包括三大特征</h3><h4 id="3-1-封装"><a href="#3-1-封装" class="headerlink" title="3.1.封装"></a>3.1.封装</h4><p>将属性私有化，并提供外界访问的方法</p><h5 id="3-1-1封装的作用"><a href="#3-1-1封装的作用" class="headerlink" title="3.1.1封装的作用"></a>3.1.1封装的作用</h5><ol><li>第一个作用：保证内部结构的安全。</li><li>第二个作用：屏蔽复杂，暴露简单。    </li></ol><h5 id="3-1-2怎么进行封装"><a href="#3-1-2怎么进行封装" class="headerlink" title="3.1.2怎么进行封装"></a>3.1.2怎么进行封装</h5><p>封装的代码实现两步：</p><ul><li>第一步：属性私有化</li><li>第二步：1个属性对外提供两个set和get方法(访问器和更改器)。外部程序只能通过set方法修改，只能通过get方法读取，可以在set方法中设立关卡来保证数据的安全性。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">set和get方法都是实例方法，不能带<span class="token keyword">static</span>。不带<span class="token keyword">static</span>的方法称为实例方法，实例方法的调用必须先<span class="token keyword">new</span>对象。set和get方法写的时候有严格的规范要求： <span class="token keyword">public</span> <span class="token keyword">void</span> set<span class="token operator">+</span>属性名首字母大写<span class="token punctuation">(</span><span class="token number">1</span>个参数<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> xxx <span class="token operator">=</span> <span class="token number">1</span>个参数<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> 返回值类型 get<span class="token operator">+</span>属性名首字母大写<span class="token punctuation">(</span>无参<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> xxx<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>***** clone() 方法</p><p>​    不要编写返回引用可变对象的访问器方法；例如:Date 类 setTime() 方法 可以改变对象对此，要调用clone() 方法</p><h4 id="3-2-继承"><a href="#3-2-继承" class="headerlink" title="3.2.继承"></a>3.2.继承</h4><h5 id="3-2-1继承的作用："><a href="#3-2-1继承的作用：" class="headerlink" title="3.2.1继承的作用："></a>3.2.1继承的作用：</h5><p>​    基本作用：子类继承父类，代码可以得到复用。</p><p>​    主要(重要)作用：有了继承关系，才有了方法覆盖和多态机制。</p><h5 id="3-2-2继承的相关特性"><a href="#3-2-2继承的相关特性" class="headerlink" title="3.2.2继承的相关特性"></a>3.2.2继承的相关特性</h5><ul><li>① B类继承A类，则称A类为超类(superclass)、父类、基类，B类则称为子类(subclass)、派生类、扩展类。</li><li>② java 中的继承只支持单继承，不支持多继承，(class B extends A,C{ } 这是错误的),C++中支持多继承，虽然 java 中不支持多继承，但有的时候会产生间接继承的效果，形成继承链。</li><li>③java 中规定，子类继承父类，除构造方法不能继承之外，剩下都可以继承。但是私有的属性无法在子类中直接访问。(父类中private修饰的不能在子类中直接访问。可以通过间接的手段来访问。)根据修饰符的权限范围，public和protected修饰的属性和方法，子类可完全继承；当无修饰时，同包内的子类可继承，不同包的子类不可继承，private修饰的子类均不能继承；构造函数不能继承，但子类对象在new时，在调用子类的构造函数时，会通过super执行父类的构造函数，直至连锁到Object类</li><li>④java中的类默认继承Object类，Object类是 java 语言提供的根类，一个对象有Object类型中所有的特征。</li><li>⑤继承也存在一些缺点，会导致它们之间的耦合度非常高. </li></ul><h5 id="3-2-3继承的使用"><a href="#3-2-3继承的使用" class="headerlink" title="3.2.3继承的使用"></a>3.2.3继承的使用</h5><ul><li>①子类继承了父类之后，父类中的方法就属于子类了，可以使用子类对象来调用。</li><li>②在实际开发中， 凡是采用“is a”能描述的，都可以继承。例如：Cat is a Animal：猫是一个动物</li><li>当某个类比其父类更具有意义时使用继承;程序代码应该被基本类型所共享时，应该使用继承</li></ul><h5 id="3-2-4方法覆盖"><a href="#3-2-4方法覆盖" class="headerlink" title="3.2.4方法覆盖"></a>3.2.4方法覆盖</h5><ol><li><p>使用方法覆盖:父类中的方法无法满足子类的业务需求，子类有必要对继承过来的方法进行覆盖。</p></li><li><p>什么条件满足的时候构成方法覆盖？</p><p>第一：有继承关系的两个类</p><p>第二：具有相同方法名、返回值类型、形式参数列表（方法名和形式参数列表是一个方法的签名）对于返回值类型是基本数据类型来说，必须一致。对于返回值类型是引用数据类型来说，重写之后返回值类型可以变的更小（但意义不大）。</p><p>第三：访问权限不能更低。(如父类方法是public，子类覆盖时访问权限不能低于public)</p><p>第四：抛出异常不能更多。(父类方法不抛出异常，子类覆盖时不能抛出异常)</p></li><li><p>方法重载和方法覆盖有什么区别？</p><p>方法重载发生在同一个类当中，方法名相同，参数列表不同。</p><p>方法覆盖是发生在具有继承关系的父子类之间。重写之后的方法必须和之前的方法一致：</p><p>方法名一致、参数列表一致、返回值类型一致。</p></li><li><p>私有方法无法覆盖。方法覆盖只是针对于“实例方法”，“静态方法覆盖”没有意义。（这是因为方法覆盖通常和多态联合起来）总结两句话：私有不能覆盖。静态不谈覆盖。</p></li></ol><h5 id="3-2-5-super关键字"><a href="#3-2-5-super关键字" class="headerlink" title="3.2.5.super关键字"></a>3.2.5.super关键字</h5><p>&lt;1 super关键字代表的就是“当前对象”的那部分父类型特征。</p><p>&lt;2 super能出现在实例方法(super.)和构造方法中(super()),super不能使用在静态方法中。</p><p>&lt;3 super. 大部分情况下是可以省略的。</p><p> super. 不能省略：父类和子类中有同名属性，或同样的方法，如果要在子类中访问“父类的特征”，super. 不能省略。</p><p>&lt;4 super() 只能出现在构造方法第一行，通过当前的构造方法去调用“父类”中的构造方法.</p><p>当一个构造方法第一行：既没有this()又没有super()的话，默认会有一个super();</p><p>表示通过当前子类的构造方法调用父类的无参数构造方法。所以必须保证父类的无参数构造方法是存在的。</p><p>this()和super() 不能共存，它们都是只能出现在构造方法第一行。</p><p>​    super的使用：</p><p>​         super.属性名    【访问父类的属性】</p><p>​        super.方法名(实参)    【访问父类的方法】</p><p>​        super(实参)        【调用父类的构造方法】</p><h4 id="3-3-多态"><a href="#3-3-多态" class="headerlink" title="3.3.多态"></a>3.3.多态</h4><p>将父对象赋值成为与其子对象相等的状态，父对象根据赋值子对象的特性运行。</p><h5 id="3-3-1向上转型和向下转型的概念。"><a href="#3-3-1向上转型和向下转型的概念。" class="headerlink" title="3.3.1向上转型和向下转型的概念。"></a>3.3.1向上转型和向下转型的概念。</h5><ul><li><p>向上转型：子—&gt;父 (upcasting)，又被称为自动类型转换</p></li><li><p>向下转型：父—&gt;子 (downcasting)，又被称为强制类型转换：Cat c = (Cat)a; 需要添加强制类型转换符即()。</p></li><li><p>什么时候需要向下转型？</p><p>需要调用或者执行子类对象中特有的方法。必须进行向下转型，才可以调用。</p><p>向下转型有风险:容易出现ClassCastException（类型转换异常）</p><p>为避免风险：instanceof运算符，可以在程序运行阶段动态的判断某个引用指向的对象是否为某一种类型。</p><p>不管是向上转型还是向下转型，首先他们之间必须有继承关系。</p></li></ul><h5 id="3-3-2多态的概念。"><a href="#3-3-2多态的概念。" class="headerlink" title="3.3.2多态的概念。"></a>3.3.2多态的概念。</h5><p>多种形态，多种状态，编译和运行有两个不同的状态。</p><p>Animal a = new Cat();</p><p>​        编译期叫做静态绑定。编译时编译器发现a的类型是Animal，编译器会去Animal类中找方法，绑定，编译通过。</p><p>​        运行期叫做动态绑定。真正执行的时候会自动调用“堆内存中真实对象”的相关方法。a.move();</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"wangwang,run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">Animal</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//采用 父类引用 a = new 子类对象; a.方法只能调用父类中有的方法；</span><span class="token comment">//a.run()可以；a.eat不可以</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3-3多态在开发中的作用是："><a href="#3-3-3多态在开发中的作用是：" class="headerlink" title="3.3.3多态在开发中的作用是："></a>3.3.3多态在开发中的作用是：</h5><p>降低程序的耦合度，提高程序的扩展力。这里提到了一个软件开发原则：七大原则最基本的原则：OCP（对扩展开放，对修改关闭）目的是：降低程序耦合度，提高程序扩展力。面向抽象编程，不建议面向具体编程。</p><h3 id="4-抽象类和接口"><a href="#4-抽象类和接口" class="headerlink" title="4.抽象类和接口"></a>4.抽象类和接口</h3><h4 id="4-1-抽象类"><a href="#4-1-抽象类" class="headerlink" title="4.1.抽象类"></a>4.1.抽象类</h4><ul><li><p>① 抽象类的定义：类和类之间具有共同特征，将这些共同特征提取出来，形成的就是抽象类。</p></li><li><p>②抽象类是引用数据类型，是无法实例化的，无法创建对象的，但抽象类有构造方法，是供子类使用的。抽象类是用来被子类继承的。抽象类的子类可以是抽象类。也可以是非抽象类（非抽象类继承抽象类，必将抽象类中的抽象方法实现了）。</p></li><li><p>③抽象类语法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符列表<span class="token punctuation">]</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> 类名<span class="token punctuation">&#123;</span>类体<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>抽象类的作用：降低实现接口实现类在实现过程中的难度，在实现接口时，有些方法用不到，可以写一个抽象类对用不到的方法进行空白重写处理。</p></li><li><p>抽象方法</p><ul><li>①抽象方法表示没有实现的方法，没有方法体的方法。例如：public abstract void doSome();</li><li>②抽象方法特点是：没有方法体，以分号结尾。前面修饰符列表中有abstract关键字。</li><li>③抽象类中不一定有抽象方法，抽象方法必须出现在抽象类中。抽象类中可以有非抽象方法。</li><li>④抽象方法在子类中实现，如果子类不是抽象类，则必须实现抽象父类的所有抽象方法，若子类是抽象类则可以部分或不实现抽象方法，所以可以以抽象类实现抽象父类，以减少非抽象子类的实现压力。</li></ul></li></ul><h4 id="4-2-接口"><a href="#4-2-接口" class="headerlink" title="4.2.接口"></a>4.2.接口</h4><ol><li><p>接口也是一种“引用数据类型”。接口是完全抽象的。（抽象类是半抽象。）或者也可以说接口是特殊的抽象类。</p></li><li><p>接口语法：接口中只包含两部分内容，一部分是：常量，一部分是：抽象方法；（接口中的方法不能有方法体）</p></li><li><p>接口中所有的元素都是public修饰的。（都是公开的。）接口中的抽象方法定义时：public abstract修饰符可以省略。在实现接口时，方法的实现必须为public，不可省略接口中的常量的public static final可以省略。</p></li><li><p>接口支持多继承，一个接口可以继承多个接口。</p></li><li><p>接口中的方法也可以有方法体</p><p>一种是静态方法，意义不大；</p><p>一种是方法的默认实现，可不再必须覆盖；也可覆盖，不覆盖即按照默认实现。default关键字</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*默认方法冲突第一种情况：超类A和接口B定义相同的方法 C extends A implements B 超类优先第二种情况：接口A和接口B定义相同的方法 C implements A,B两个均为默认方法，报错，需选择实现一个为抽象方法一个为默认方法，报错两个均为抽象方法，不报错，选择实现或不实现均可*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接口的实例化</p><p>接口变量必须引用实现了接口的类对象。</p><p>接口可以用匿名内部类的方式实现（抽象类也可以）;</p></li><li><p>当一个非抽象的类实现接口的话，必须将接口中所有的抽象方法全部实现（覆盖、重写）。    </p></li><li><p>接口A和接口B没有继承关系，互转时编译器通过。但是运行时可能出现：ClassCastException；</p></li><li><p>接口与静态方法</p><p>在标准库中，有很多成对的接口和工具类，通常将静态方法放在工具类中，如 Collection和Collections</p></li><li><p>常见的接口</p><pre class="line-numbers language-none"><code class="language-none">Comparable&lt;T&gt;&#123;      int compareTo(T o)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​         Comparator<T>{}       专门写一个类加比较器接口，在此类中书写规则，具体比较时，实例化一个比较器</p><p>​                       调用compare()方法</p><p>此接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序，类的 compareTo 方法被称为它的自然比较方法。</p><p>Cloneble</p></li></ol><h4 id="4-3-抽象类和接口有什么区别"><a href="#4-3-抽象类和接口有什么区别" class="headerlink" title="4.3.抽象类和接口有什么区别"></a>4.3.抽象类和接口有什么区别</h4><ul><li>抽象类是半抽象的。接口是完全抽象的。</li><li>抽象类中有构造方法。接口中没有构造方法。</li><li>接口和接口之间支持多继承。类和类之间只能单继承。</li><li>一个类可以同时实现多个接口。一个抽象类只能继承一个类（单继承）。</li><li>接口中只允许出现常量和抽象方法。</li></ul><h4 id="4-4-lambda表达式"><a href="#4-4-lambda表达式" class="headerlink" title="4.4.lambda表达式"></a>4.4.lambda表达式</h4><h5 id="4-4-1-函数式接口"><a href="#4-4-1-函数式接口" class="headerlink" title="4.4.1.函数式接口"></a>4.4.1.函数式接口</h5><p>只有一个抽象方法的接口。@FunctionalInterface用来修饰函数式接口</p><h5 id="4-4-2-语法"><a href="#4-4-2-语法" class="headerlink" title="4.4.2.语法"></a>4.4.2.语法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建不同情况下的接口</span><span class="token comment">/**多参数无返回*/</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">NoReturnMultiParam</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**无参无返回值*/</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">NoReturnNoParam</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**一个参数无返回*/</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">NoReturnOneParam</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**多个参数有返回值*/</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReturnMultiParam</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** 无参有返回*/</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReturnNoParam</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/**一个参数有返回值*/</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ReturnOneParam</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//语法形式为 () -> &#123;&#125;，其中 () 用来描述参数列表，&#123;&#125; 用来描述方法体，-> 为 lambda运算符 ，读作(goes to)。</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//无参无返回</span>        <span class="token class-name">NoReturnNoParam</span> noReturnNoParam <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NoReturnNoParam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        noReturnNoParam<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//一个参数无返回</span>        <span class="token class-name">NoReturnOneParam</span> noReturnOneParam <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NoReturnOneParam param:"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        noReturnOneParam<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//多个参数无返回</span>        <span class="token class-name">NoReturnMultiParam</span> noReturnMultiParam <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NoReturnMultiParam param:"</span> <span class="token operator">+</span> <span class="token string">"&#123;"</span> <span class="token operator">+</span> a <span class="token operator">+</span><span class="token string">","</span> <span class="token operator">+</span> <span class="token operator">+</span> b <span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        noReturnMultiParam<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//无参有返回值</span>        <span class="token class-name">ReturnNoParam</span> returnNoParam <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ReturnNoParam"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> returnNoParam<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"return:"</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//一个参数有返回值</span>        <span class="token class-name">ReturnOneParam</span> returnOneParam <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ReturnOneParam param:"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res2 <span class="token operator">=</span> returnOneParam<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"return:"</span> <span class="token operator">+</span> res2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//多个参数有返回值</span>        <span class="token class-name">ReturnMultiParam</span> returnMultiParam <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ReturnMultiParam param:"</span> <span class="token operator">+</span> <span class="token string">"&#123;"</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> b <span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res3 <span class="token operator">=</span> returnMultiParam<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"return:"</span> <span class="token operator">+</span> res3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简化格式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.简化参数类型，可以不写参数类型，但是必须所有参数都不写</span>        <span class="token class-name">NoReturnMultiParam</span> lamdba1 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简化参数类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        lamdba1<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.简化参数小括号，如果只有一个参数则可以省略参数小括号</span>        <span class="token class-name">NoReturnOneParam</span> lambda2 <span class="token operator">=</span> a <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简化参数小括号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        lambda2<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.简化方法体大括号，如果方法条只有一条语句，则可以胜率方法体大括号</span>        <span class="token class-name">NoReturnNoParam</span> lambda3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"简化方法体大括号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lambda3<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.如果方法体只有一条语句，并且是 return 语句，则可以省略方法体大括号</span>        <span class="token class-name">ReturnOneParam</span> lambda4 <span class="token operator">=</span> a <span class="token operator">-></span> a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lambda4<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ReturnMultiParam</span> lambda5 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lambda5<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引用方法：利用 lambda表达式的接口快速指向一个已经被实现的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//语法： 方法归属者::方法名 静态方法的归属者为类名/普通方法归属者为对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exe1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ReturnOneParam</span> lambda1 <span class="token operator">=</span> a <span class="token operator">-></span> <span class="token function">doubleNum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lambda1<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//lambda2 引用了已经实现的 doubleNum 方法</span>        <span class="token class-name">ReturnOneParam</span> lambda2 <span class="token operator">=</span> <span class="token class-name">Exe1</span><span class="token operator">::</span><span class="token function">doubleNum</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lambda2<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Exe1</span> exe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exe1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//lambda4 引用了已经实现的 addTwo 方法</span>        <span class="token class-name">ReturnOneParam</span> lambda4 <span class="token operator">=</span> exe<span class="token operator">::</span><span class="token function">addTwo</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lambda4<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 要求     * 1.参数数量和类型要与接口中定义的一致     * 2.返回值类型要与接口中定义的一致     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">doubleNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造方法的引用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">ItemCreatorBlankConstruct</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Item</span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">ItemCreatorParamContruct</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Item</span> <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Exe2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ItemCreatorBlankConstruct</span> creator <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Item</span> item <span class="token operator">=</span> creator<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ItemCreatorBlankConstruct</span> creator2 <span class="token operator">=</span> <span class="token class-name">Item</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">Item</span> item2 <span class="token operator">=</span> creator2<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ItemCreatorParamContruct</span> creator3 <span class="token operator">=</span> <span class="token class-name">Item</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">Item</span> item3 <span class="token operator">=</span> creator3<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">,</span> <span class="token string">"鼠标"</span><span class="token punctuation">,</span> <span class="token number">135.99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JDK提供的函数式接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*调用集合的 public void forEach(Consumer&lt;? super E> action) 方法，通过 lambda 表达式的方式遍历集合中的元素。以下是 Consumer 接口的方法以及遍历集合的操作。Consumer 接口是 jdk 为我们提供的一个函数式接口*/</span><span class="token annotation punctuation">@FunctionalInterface</span>   <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>       <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//....</span>   <span class="token punctuation">&#125;</span>     <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//lambda表达式 方法引用</span>     list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>element <span class="token operator">-></span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">/*  通过public boolean removeIf(Predicate&lt;? super E> filter)方法来删除集合中的某个元素，Predicate 也是 jdk 为我们提供的一个函数式接口，可以简化程序的编写 */</span>     <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">></span></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">"小牙刷"</span><span class="token punctuation">,</span> <span class="token number">12.05</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"日本马桶盖"</span><span class="token punctuation">,</span> <span class="token number">999.05</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"格力空调"</span><span class="token punctuation">,</span> <span class="token number">888.88</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">"肥皂"</span><span class="token punctuation">,</span> <span class="token number">2.00</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">"冰箱"</span><span class="token punctuation">,</span> <span class="token number">4200.00</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     items<span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>ele <span class="token operator">-></span> ele<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//通过 foreach 遍历，查看是否已经删除</span>     items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-内部类"><a href="#5-内部类" class="headerlink" title="5.内部类"></a>5.内部类</h3><p>1、内部类的定义：在类的内部又定义了一个新的类。被称为内部类。</p><p>2、内部类的分类：静态内部类，成员内部类，局部内部类，匿名内部类；</p><p>静态内部类：定义在类中的静态类，可以访问外部类的静态属性，通过  外部类.内部类 xx = new 外部类.内部类() 调用</p><p>成员内部类：定义在类中的非静态类，可以访问所用外部类的属性，通过 外部类.内部类 xx = new 外部类对象.内部类()</p><p>局部内部类：定义在外部类方法中的类，跟局部变量一样不能修饰，定义在静态方法中的内部类只可访问静态属性，定义    在实例方法中的可以访问所有属性。</p><p>3、匿名内部类是局部内部类的一种。因为这个类没有名字而得名，叫做匿名内部类。</p><p>类内部不能定义静态属性和方法，方法不能是抽象的，必须实现接口和抽象类的抽象方法，匿名内部类只可访问外部类的</p><p>静态方法和静态属性。</p><p>4、匿名内部类有两个缺点：</p><p>​            缺点1：太复杂，太乱，可读性差。</p><p>​            缺点2：类没有名字，以后想重复使用，不能用。</p><h2 id="二、Object"><a href="#二、Object" class="headerlink" title="二、Object"></a>二、Object</h2><h3 id="1-equals方法"><a href="#1-equals方法" class="headerlink" title="1.equals方法"></a>1.equals方法</h3><p>equals方法检测一个对象是否等于另一个对象，Object的默认实现是判断两个对象是否有相同的引用。</p><ul><li> a.equals(b),若a为null，则会出现空指针异常。Objects.equals方法可以解决这个问题。</li></ul><p>  Objects.equals(a,b),ab都为null，返回true;有一个为null，返回false；都不为null，则调用a.equals(b)</p><ul><li><p>equals方法特性 </p><ul><li>自反性:对于任何非空引用x，x.equals(x)应该返回true。</li><li>对称性:对于任何引用x和y，当且仅当y.equals(x)返回true, x.equals(y) 也应该返回true。</li><li>传递性:对于任何引用x、y和z.如果x.equas(y)返回true, y.equals(z) 返回true,x.equals(z)也应该返回true。</li><li>一致性:如果x和y引用的对象没有发生变化，反复调用x.equals(y)应该返回同样的结果。</li><li>对于任意非空引用x，x.equals(null)应该返回false。</li></ul></li><li><p>提出问题：a.equals(b),如果a和b不是同一个类，那么用什么条件判断？</p><p>java重写的equals方法中采用instanceof检测，getClass检测，捕获ClassCastException异常。</p></li><li><p>equals方法实现建议：</p><p>1)显式参数命名为otherObject,稍后需要将它转换成另一个叫做other的变量。<br>2)检测this与otherObject是否引用同-一个对象:<br>if (this == other0bject) return true;<br>这条语句只是-一个优化。 实际上，这是-一种经常采用的形式。因为计算这个等式要比一-<br>个一个地比较类中的域所付出的代价小得多。<br>3)检测otherObject是否为null,如果为null,返回false。这项检测是很必要的。<br>if (other0bject == nu11) return false;<br>4)比较this与otherObject是否属于同一个类。如果equals的语义在每个子类中有所改<br>变，就使用getClass检测:<br>if (getC1ass( != other0bject.getClass() return false;<br>如果所有的子类都拥有统一的语 义，就使用instanceof检测:<br>if (! (other0bject instanceof ClassName)) return false;<br>5)将otherObject转换为相应的类类型变量:<br>ClassName other = (ClassName) other0bject<br>6)现在开始对所有需要比较的域进行比较了。使用==比较基本类型域，使用equals 比<br>较对象域。如果所有的域都匹配，就返回true;否则返回false。</p></li></ul><h3 id="2-hashCode方法"><a href="#2-hashCode方法" class="headerlink" title="2.hashCode方法"></a>2.hashCode方法</h3><ul><li>Object类中hashCode的默认实现为对象的储存地址；</li><li></li></ul><h2 id="三、包装类和自动装箱"><a href="#三、包装类和自动装箱" class="headerlink" title="三、包装类和自动装箱"></a>三、包装类和自动装箱</h2><h3 id="1-八大包装类"><a href="#1-八大包装类" class="headerlink" title="1.八大包装类"></a>1.八大包装类</h3><p>八种基本类型都有对应的包装类</p><p>byte-Byte    short-Short    int-Integer    long-Long     Float-Float    double-Double    boolean-Boolean    char-Character</p><img src="/2021/06/20/java1/%E5%8C%85%E8%A3%85%E7%B1%BB.png" class=""><h3 id="2-自动装箱和自动拆箱"><a href="#2-自动装箱和自动拆箱" class="headerlink" title="2.自动装箱和自动拆箱"></a>2.自动装箱和自动拆箱</h3><p>基本类型和包装类型之间的互相自动转换为自动拆装箱；</p><p>Integer的取值范围和int的取值范围一致</p><p>Integer的缓存取值范围是-128-127</p><p>Integer  a = 128, b = 128, c = 127, d = 127;</p><p>a==b false 不在缓存范围内，所以会创建两个新的对象</p><p>c==d true  在缓存范围内，直接从缓存中取相同的对象</p><h2 id="四、常用类和接口"><a href="#四、常用类和接口" class="headerlink" title="四、常用类和接口"></a>四、常用类和接口</h2>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-基础</title>
      <link href="/2021/06/19/java/"/>
      <url>/2021/06/19/java/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h2><h3 id="1-main方法"><a href="#1-main方法" class="headerlink" title="1.main方法"></a>1.main方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/*main()方法必须是public吗？jdk1.4后必须是public*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2.数据类型"></a>2.数据类型</h3><h4 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1.整型"></a>2.1.整型</h4><img src="/2021/06/19/java/%E6%95%B4%E5%BD%A2.png" class="" title="image-20211030175430890"><ul><li>整型的范围和运行java代码的机器无关</li><li>0b或0B前缀代表二进制，如0b1001是9；0前缀代表八进制；0x或0X代表十六进制</li></ul><h4 id="2-2-浮点类型"><a href="#2-2-浮点类型" class="headerlink" title="2.2.浮点类型"></a>2.2.浮点类型</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="/2021/06/19/java/%E6%B5%AE%E7%82%B9.png" class="" title="image-20211030180158960"></h4><ul><li>float数值有后缀f或F；double数值 后缀为d或D；没有f或F后缀的默认是double类型；</li><li>三个特殊的浮点数值；<ul><li>正无穷大；1/0；常量Double.POSITIVE_INFINITY代表;</li><li>负无穷大；-1/0; 常量Double.NEGATIVE_INFINITY代表;</li><li>NaN,不是一个数字；0/0; 常量Double.NaN代表;</li></ul></li></ul><h4 id="2-3-char和boolean类型"><a href="#2-3-char和boolean类型" class="headerlink" title="2.3.char和boolean类型"></a>2.3.char和boolean类型</h4><ul><li>char字符类型，要用单引号引起来  </li></ul><h3 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3.运算符"></a>3.运算符</h3><h4 id="3-1-浮点数据的精度"><a href="#3-1-浮点数据的精度" class="headerlink" title="3.1. 浮点数据的精度"></a>3.1. 浮点数据的精度</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> w<span class="token operator">=</span>x<span class="token operator">*</span>y<span class="token operator">/</span>z<span class="token punctuation">;</span><span class="token comment">/*不同的计算方式&lt;1.处理器计算x *y,并且将结果存储在80位的寄存器中，再除以z并将结果截断为64位。得到更精确的计算结果，并且还能够避免产生指数溢出。&lt;2.所有的中间计算过程进行截断，使用strictfp关键字标记的方法必须使用严格的浮点计算*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-数值类型的转换"><a href="#3-2-数值类型的转换" class="headerlink" title="3.2.数值类型的转换"></a>3.2.数值类型的转换</h4><ul><li>如果两个操作数中有一个是double类型，另一个操作数就会转换为double类型。</li><li>否则，如果其中一个操作数是float类型，另一个操作数将会转换为float 类型。</li><li>否则，如果其中-个操作数是long类型，另一个操作数将会转换为long类型。</li><li>否则，两个操作数都将被转换为int类型。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
